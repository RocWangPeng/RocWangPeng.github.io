<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>react组件的6种通信方式</title>
    <url>/2020/04/06/react%E7%BB%84%E4%BB%B6%E7%9A%846%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>问React组件有哪些通信方式？</p>
<ul>
<li>1.props父子通信</li>
<li>2.回调函数，子父通信</li>
<li>3.变量提升，兄弟组建通信</li>
<li>4.Context,跨组建通信</li>
<li>5.node的events模块的单例通信</li>
<li>6.redux共享数据通信</li>
</ul>
<a id="more"></a>

<h2 id="1-props父子通信"><a href="#1-props父子通信" class="headerlink" title="1.props父子通信"></a>1.props父子通信</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;p&gt;Children&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;&#123;props.text&#125;&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Parent() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;Parent&lt;/</span>p&gt;</span><br><span class="line">      &lt;Children text=<span class="string">"这是爸爸传给你的东西"</span>&gt;&lt;<span class="regexp">/Children&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure>

<h2 id="2-回调函数，子父通信"><a href="#2-回调函数，子父通信" class="headerlink" title="2.回调函数，子父通信"></a>2.回调函数，子父通信</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Children&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;&#123;props.text&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;button </span><br><span class="line">        onClick=&#123;() =&gt; &#123; props.handleChange(<span class="string">'改变了'</span>) &#125;&#125;&gt;</span><br><span class="line">        点击我改变爸爸传给我的东西</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [text, setText] = useState(<span class="string">'这是爸爸传给你的东西'</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    setText(val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Parent&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Children handleChange=&#123;handleChange&#125; text=&#123;text&#125;&gt;&lt;/</span>Children&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Parent</span></span><br></pre></td></tr></table></figure>

<h2 id="3-变量提升，兄弟组建通信"><a href="#3-变量提升，兄弟组建通信" class="headerlink" title="3.变量提升，兄弟组建通信"></a>3.变量提升，兄弟组建通信</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Children&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button </span></span><br><span class="line"><span class="regexp">        onClick=&#123;() =&gt; &#123; props.setText('我是Children发的信息') &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        给Children1发信息&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">function Children1(props) &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;Children1&lt;/</span>p&gt;</span><br><span class="line">      &lt;p&gt;&#123;props.text&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [text, setText] = useState(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;APP&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Children setText=&#123;setText&#125;&gt;&lt;/</span>Children&gt;</span><br><span class="line">      &lt;Children1 text=&#123;text&#125;&gt;&lt;<span class="regexp">/Children1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>

<h2 id="4-Context-跨组建通信"><a href="#4-Context-跨组建通信" class="headerlink" title="4.Context,跨组建通信"></a>4.Context,跨组建通信</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Consumer, Provider &#125; = React.createContext()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          (value) =&gt; (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;p&gt;Children1&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">              &lt;p&gt;&#123;value.text&#125;&lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Consumer&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider value=&#123;&#123; <span class="attr">text</span>: <span class="string">'我是context'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;p&gt;Parent&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Children1&gt;&lt;/</span>Children1&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure>

<h2 id="5-node的events模块的单例通信"><a href="#5-node的events模块的单例通信" class="headerlink" title="5.node的events模块的单例通信"></a>5.node的events模块的单例通信</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Children&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;&#123;props.text&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;button </span><br><span class="line">        onClick=&#123;() =&gt; &#123; props.event.emit(<span class="string">'foo'</span>) &#125;&#125;&gt;点击我改变爸爸传给我的东西&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [text, setText] = useState(<span class="string">'这是爸爸传给你的东西'</span>)</span><br><span class="line">  <span class="keyword">let</span> event = <span class="keyword">new</span> Events()</span><br><span class="line">  event.on(<span class="string">'foo'</span>, () =&gt; &#123; setText(<span class="string">'改变了'</span>) &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Parent&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Children event=&#123;event&#125; text=&#123;text&#125;&gt;&lt;/</span>Children&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Parent</span></span><br></pre></td></tr></table></figure>
<p>注意</p>
<blockquote>
<p>这种通信记住在顶部引入events模块，无需安装，node自身模块。</p>
</blockquote>
<h2 id="6-redux共享数据通信"><a href="#6-redux共享数据通信" class="headerlink" title="6.redux共享数据通信"></a>6.redux共享数据通信</h2><p>store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defaultState = &#123;</span><br><span class="line">    text: <span class="string">'我是store'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reducer = <span class="function">(<span class="params">state = defaultState, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer)</span><br></pre></td></tr></table></figure>
<p>child.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;Child&lt;p&gt;&#123;<span class="keyword">this</span>.props.text&#125;&lt;<span class="regexp">/p&gt;&lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mapStataToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        text: state.text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStataToProps, <span class="literal">null</span>)(Child)</span><br></pre></td></tr></table></figure>
<p>Parent.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;p&gt;Parent&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Child&gt;&lt;/</span>Child&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nodeJS+cheerio实现一个简单的网页爬虫功能</title>
    <url>/2020/04/02/%E4%BD%BF%E7%94%A8nodeJS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>本文将使用nodeJS+cheerio实现一个简单的网页爬虫功能</p>
<h2 id="网页源码"><a href="#网页源码" class="headerlink" title="网页源码"></a>网页源码</h2><p>使用http.get()方法获取网页源码，以hao123网站的头条页面为例<br><code>http://tuijian.hao123.com/hotrank</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.get(<span class="string">'http://tuijian.hao123.com/hotrank'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="筛选数据"><a href="#筛选数据" class="headerlink" title="筛选数据"></a>筛选数据</h2><p>以网页中的综艺热点部分<br><img src="http://static.zybuluo.com/wp0214/bqzguv8jnanuu54eds2ejo81/image_1c4ghuuf5s7a2bk1pn81s5m1e17p.png" alt="image_1c4ghuuf5s7a2bk1pn81s5m1e17p.png-19.9kB"></p>
<p>源网页相关源代码如下<br><img src="http://static.zybuluo.com/wp0214/mlhm6kp2pnpdje3tezukme7t/image_1c4ghvq9d16no1rb81otv17ef1rg716.png" alt="image_1c4ghvq9d16no1rb81otv17ef1rg716.png-106.3kB"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过分析可知，‘综艺’模块与其他模块都位于&lt;div class&#x3D;&quot;top-wrap&quot;&gt;中，其中，综艺模块的内层div的monkey&#x3D;&#39;zy&#39;，综艺模块的10条综艺节目的信息都位于&lt;div class&#x3D;&quot;poinr clearfix&quot;&gt;中，综艺节目的名称位于&lt;span class&#x3D;&quot;point-title&quot;&gt;中</span><br></pre></td></tr></table></figure>

<h2 id="cheerio"><a href="#cheerio" class="headerlink" title="cheerio"></a>cheerio</h2><p>我们怎么从源代码中获取到有用的数据呢？首先，nodeJS不支持document对象。如果要使用笨办法，只能使用正则表达式来处理</p>
<p>cheerio 是nodejs特别为服务端定制的，能够快速灵活的对JQuery核心进行实现。它工作于DOM模型上，且解析、操作、呈送都很高效</p>
<p><strong>【安装】</strong></p>
<p><img src="http://static.zybuluo.com/wp0214/dy77b8ris2x9ln9mbua4kli7/image_1c4gi1vi3g3916rs3rd1o0aino1j.png" alt="image_1c4gi1vi3g3916rs3rd1o0aino1j.png-15.5kB"></p>
<p><strong>【使用】</strong><br>它的使用方法和jQuery相当类似，上手非常容易。以获取综艺热度前10名的节目名称为例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line">http.get(<span class="string">'http://tuijian.hao123.com/hotrank'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        filter(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//保存搜索量前10的综艺节目标题</span></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="comment">//将页面源代码转换为$对象</span></span><br><span class="line">    <span class="keyword">var</span> $ = cheerio.load(data);</span><br><span class="line">    <span class="comment">//查找每个综艺节目标题的外层div</span></span><br><span class="line">    <span class="keyword">var</span> temp_arr = $(<span class="string">'[monkey = "zy"]'</span>).find(<span class="string">'.point-bd'</span>).find(<span class="string">'.point-title'</span>);</span><br><span class="line">    <span class="comment">//将综艺节目标题依次保存到结果数组中</span></span><br><span class="line">    temp_arr.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line">        result.push($(item).text());</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[ '变形计','来吧冠军','拜托了冰箱','昆仑决','天生是优我','姐姐好饿','脑力男人时代','奔跑吧兄弟','我想和你唱','玫瑰之旅' ]</span></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h2><p>　下面将hao123网页中的’实时热点’、’今日热点’、’民生热点’、’电影’、’电视剧’、’综艺’这6部分的排名爬下来，分别到对象名为’result’中的数组中，分别命令为’ss’、’jr’、’ms’、’dy’、’dsj’、’zy’<br>　<img src="http://static.zybuluo.com/wp0214/07j777aovt2viwi0xr6pzrd9/image_1c4gi42np12prqb16up1ci9lc20.png" alt="image_1c4gi42np12prqb16up1ci9lc20.png-103.2kB"></p>
<p><strong>【代码如下】</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line">http.get(<span class="string">'http://tuijian.hao123.com/hotrank'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        filter(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//保存各部分搜索量前10的名称</span></span><br><span class="line">    <span class="comment">//对象名为榜单名，如'实时热点'</span></span><br><span class="line">    <span class="comment">//对象内容为10个标题名称组成的数组</span></span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    <span class="comment">//将页面源代码转换为$对象</span></span><br><span class="line">    <span class="keyword">var</span> $ = cheerio.load(data);</span><br><span class="line">    <span class="comment">//查找'实时热点'、'今日热点'、'民生热点'、'电影'、'电视剧'、'综艺'这6个榜单所在的div</span></span><br><span class="line">    <span class="keyword">var</span> temp_div = $(<span class="string">'.top-wrap'</span>);</span><br><span class="line">    <span class="comment">//保存榜单名称</span></span><br><span class="line">    <span class="keyword">var</span> temp_title = [];</span><br><span class="line">    temp_div.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//查找榜单名，并保存到temp_title文件夹中</span></span><br><span class="line">        temp_title.push($(item).find(<span class="string">'h2'</span>).text());</span><br><span class="line">        <span class="comment">//查找每类下每个标题的外层div</span></span><br><span class="line">        <span class="keyword">var</span> temp_arr = $(item).find(<span class="string">'.point-bd'</span>).find(<span class="string">'.point-title'</span>);</span><br><span class="line">        <span class="comment">//将result下的每个榜单初始化为一个数组</span></span><br><span class="line">        <span class="keyword">var</span> innerResult = result[temp_title[index]] = [];</span><br><span class="line">        <span class="comment">//将节目标题依次保存到相应榜单的数组中</span></span><br><span class="line">        temp_arr.each(<span class="function"><span class="keyword">function</span>(<span class="params">_index,_item</span>)</span>&#123;</span><br><span class="line">            innerResult.push($(_item).text())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>【结果如下】</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">'实时热点'</span>: </span><br><span class="line">   [ <span class="string">'美国逮捕女斯诺登'</span>,</span><br><span class="line">     <span class="string">'成都隐秘母乳买卖'</span>,</span><br><span class="line">     <span class="string">'曝周杰伦青涩旧照'</span>,</span><br><span class="line">     <span class="string">'老头公交强吻女孩'</span>,</span><br><span class="line">     <span class="string">'王传君恋情曝光'</span>,</span><br><span class="line">     <span class="string">'杭州现奇葩窗口'</span>,</span><br><span class="line">     <span class="string">'忘带全班准考证'</span>,</span><br><span class="line">     <span class="string">'未成年持械拍网红'</span>,</span><br><span class="line">     <span class="string">'9秒揍儿子8拳'</span>,</span><br><span class="line">     <span class="string">'戴耳机穿轨道被撞'</span> ],</span><br><span class="line">  <span class="string">'今日热点'</span>: </span><br><span class="line">   [ <span class="string">'北京回龙观大火'</span>,</span><br><span class="line">     <span class="string">'选美冠军车祸身亡'</span>,</span><br><span class="line">     <span class="string">'2017高考'</span>,</span><br><span class="line">     <span class="string">'成都老火锅店被查'</span>,</span><br><span class="line">     <span class="string">'陈浩民娇妻秀身材'</span>,</span><br><span class="line">     <span class="string">'海边直播发现浮尸'</span>,</span><br><span class="line">     <span class="string">'曝印小天遭妻骗婚'</span>,</span><br><span class="line">     <span class="string">'苹果开发者大会'</span>,</span><br><span class="line">     <span class="string">'6万斤鱼缺氧死亡'</span>,</span><br><span class="line">     <span class="string">'安以轩夏威夷大婚'</span> ],</span><br><span class="line">  <span class="string">'民生热点'</span>: </span><br><span class="line">   [ <span class="string">'北京回龙观大火'</span>,</span><br><span class="line">     <span class="string">'2017高考'</span>,</span><br><span class="line">     <span class="string">'成都老火锅店被查'</span>,</span><br><span class="line">     <span class="string">'海边直播发现浮尸'</span>,</span><br><span class="line">     <span class="string">'苹果开发者大会'</span>,</span><br><span class="line">     <span class="string">'6万斤鱼缺氧死亡'</span>,</span><br><span class="line">     <span class="string">'北控外援训练猝死'</span>,</span><br><span class="line">     <span class="string">'武汉男子裸体捅人'</span>,</span><br><span class="line">     <span class="string">'多国与卡塔尔断交'</span>,</span><br><span class="line">     <span class="string">'美驻华外交官辞职'</span> ],</span><br><span class="line">  <span class="string">'电影'</span>: </span><br><span class="line">   [ <span class="string">'神奇女侠'</span>,</span><br><span class="line">     <span class="string">'异星觉醒'</span>,</span><br><span class="line">     <span class="string">'新木乃伊'</span>,</span><br><span class="line">     <span class="string">'中国推销员'</span>,</span><br><span class="line">     <span class="string">'荡寇风云'</span>,</span><br><span class="line">     <span class="string">'异兽来袭'</span>,</span><br><span class="line">     <span class="string">'李雷和韩梅梅'</span>,</span><br><span class="line">     <span class="string">'北极星'</span>,</span><br><span class="line">     <span class="string">'美好的意外'</span>,</span><br><span class="line">     <span class="string">'夏天19岁的肖像'</span> ],</span><br><span class="line">  <span class="string">'电视剧'</span>: </span><br><span class="line">   [ <span class="string">'龙珠传奇'</span>,</span><br><span class="line">     <span class="string">'楚乔传'</span>,</span><br><span class="line">     <span class="string">'欢乐颂2'</span>,</span><br><span class="line">     <span class="string">'欢乐颂'</span>,</span><br><span class="line">     <span class="string">'职场是个技术活'</span>,</span><br><span class="line">     <span class="string">'择天记'</span>,</span><br><span class="line">     <span class="string">'美食大冒险'</span>,</span><br><span class="line">     <span class="string">'废柴兄弟'</span>,</span><br><span class="line">     <span class="string">'人民的名义'</span>,</span><br><span class="line">     <span class="string">'三生三世十里桃花'</span> ],</span><br><span class="line">  <span class="string">'综艺'</span>: </span><br><span class="line">   [ <span class="string">'变形计'</span>,</span><br><span class="line">     <span class="string">'来吧冠军'</span>,</span><br><span class="line">     <span class="string">'拜托了冰箱'</span>,</span><br><span class="line">     <span class="string">'昆仑决'</span>,</span><br><span class="line">     <span class="string">'天生是优我'</span>,</span><br><span class="line">     <span class="string">'姐姐好饿'</span>,</span><br><span class="line">     <span class="string">'脑力男人时代'</span>,</span><br><span class="line">     <span class="string">'奔跑吧兄弟'</span>,</span><br><span class="line">     <span class="string">'我想和你唱'</span>,</span><br><span class="line">     <span class="string">'玫瑰之旅'</span> ] &#125;</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.7</span>s]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>爬虫</tag>
        <tag>案例</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs之fs模块</title>
    <url>/2020/04/02/nodejs%E4%B9%8Bfs%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<blockquote>
<p><strong>fs文件系统用于对系统文件及目录进行读写操作</strong></p>
</blockquote>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h4 id="普通读取"><a href="#普通读取" class="headerlink" title="普通读取"></a>普通读取</h4><p>同步读取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    data = fs.readFileSync(<span class="string">'./fileForRead.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件内容: '</span> + data);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'读取文件出错: '</span> + err.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node readFileSync.js</span><br><span class="line">文件内容: hello world</span><br></pre></td></tr></table></figure>

<p>异步读取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./fileForRead.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'读取文件出错: '</span> + err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件内容: '</span> + data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node readFile.js</span><br><span class="line">文件内容: hello world</span><br></pre></td></tr></table></figure>

<h4 id="通过文件流读取"><a href="#通过文件流读取" class="headerlink" title="通过文件流读取"></a>通过文件流读取</h4><p>适合读取大文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'./fileForRead.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">readStream</span><br><span class="line">    .on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'读取数据: '</span> + chunk);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'出错: '</span> + err.message);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 没有数据了</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没有数据了'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 已经关闭，不会再有事件抛出</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已经关闭'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node createReadStream.js</span><br><span class="line">读取数据: hello world</span><br><span class="line">没有数据了</span><br><span class="line">已经关闭</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### 文件写入</span></span><br><span class="line"></span><br><span class="line">备注：以下代码，如果文件不存在，则创建文件；如果文件存在，则覆盖文件内容；</span><br><span class="line"></span><br><span class="line">异步写入</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var fs = require(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'./fileForWrite.txt'</span>, <span class="string">'hello world'</span>, <span class="string">'utf8'</span>, function(err)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    console.log(<span class="string">'文件写入成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步写入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fs.writeFileSync(<span class="string">'./fileForWrite1.txt'</span>, <span class="string">'hello world'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件写入成功'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通过文件流写入"><a href="#通过文件流写入" class="headerlink" title="通过文件流写入"></a>通过文件流写入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'./fileForWrite1.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">writeStream</span><br><span class="line">    .on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 已经关闭，不会再有事件抛出</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已经关闭'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">writeStream.write(<span class="string">'hello'</span>);</span><br><span class="line">writeStream.write(<span class="string">'world'</span>);</span><br><span class="line">writeStream.end(<span class="string">''</span>);</span><br></pre></td></tr></table></figure>

<h4 id="相对底层的接口"><a href="#相对底层的接口" class="headerlink" title="相对底层的接口"></a>相对底层的接口</h4><blockquote>
<p>fs.write(fd, buffer, offset, length[, position], callback)<br>fs.write(fd, data[, position[, encoding]], callback)<br>fs.writeSync(fd, buffer, offset, length[, position])<br>fs.writeSync(fd, data[, position[, encoding]])</p>
</blockquote>
<ul>
<li>fd：写入的文件句柄。</li>
<li>buffer：写入的内容。</li>
<li>offset：将buffer从offset位置开始，长度为length的内容写入。</li>
<li>length：写入的buffer内容的长度。</li>
<li>position：从打开文件的position处写入。</li>
<li>callback：参数为 <code>(err, written, buffer)</code>。<code>written</code>表示有xx字节的buffer被写入。</li>
</ul>
<p>备注：<code>fs.write(fd, buffer, offset, length[, position], callback)</code>跟<code>fs.write(fd, data[, position[, encoding]], callback)</code>的区别在于：后面的只能把所有的data写入，而前面的可以写入指定的data子串？</p>
<h3 id="文件是否存在"><a href="#文件是否存在" class="headerlink" title="文件是否存在"></a>文件是否存在</h3><p><code>fs.exists()</code>已经是<code>deprecated</code>状态，现在可以通过下面代码判断文件是否存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.access(<span class="string">'./fileForRead.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fileForRead.txt存在'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.access(<span class="string">'./fileForRead2.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fileForRead2.txt存在'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>fs.access()</code>除了判断文件是否存在（默认模式），还可以用来判断文件的权限。</p>
<p>备忘：<code>fs.constants.F_OK</code>等常量无法获取（node v6.1，mac 10.11.4下，<code>fs.constants</code>是<code>undefined</code>）</p>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>异步版本（如果目录已存在，会报错）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">'./hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'目录创建成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步版本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdirSync(<span class="string">'./hello'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.unlink(<span class="string">'./fileForUnlink.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件删除成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.unlinkSync(<span class="string">'./fileForUnlink.txt'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建目录-1"><a href="#创建目录-1" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.mkdir(path[, mode], callback)</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">'sub'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建目录成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.mkdirSync(path[, mode])</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fs.mkdirSync(<span class="string">'hello'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建目录成功'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><p>同步版本，注意：<code>fs.readdirSync()</code>只会读一层，所以需要判断文件类型是否目录，如果是，则进行递归遍历。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.readdirSync(path[, options])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFilesInDir = <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> results = [ path.resolve(dir) ];</span><br><span class="line">    <span class="keyword">var</span> files = fs.readdirSync(dir, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        file = path.resolve(dir, file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> stats = fs.statSync(file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stats.isFile())&#123;</span><br><span class="line">            results.push(file);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(stats.isDirectory())&#123;</span><br><span class="line">            results = results.concat( getFilesInDir(file) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> files = getFilesInDir(<span class="string">'../'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(files);</span><br></pre></td></tr></table></figure>

<p>异步版本：（TODO）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.rename(oldPath, newPath, callback)</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.rename(<span class="string">'./hello'</span>, <span class="string">'./world'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'重命名成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.renameSync(oldPath, newPath)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.renameSync(<span class="string">'./world'</span>, <span class="string">'./hello'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>移动文件也是我们经常会遇见的，可是fs没有专门移动文件的函数，但是我们可以通过rename函数来达到移动文件的目的，示例如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">fs.rename(oldPath,newPath,function (err) &#123;</span><br><span class="line">   if (err) throw err;</span><br><span class="line">   console.log(&#39;renamed complete&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="监听文件修改"><a href="#监听文件修改" class="headerlink" title="监听文件修改"></a>监听文件修改</h3><p><code>fs.watch()</code>比<code>fs.watchFile()</code>高效很多（why）</p>
<h4 id="fs-watchFile"><a href="#fs-watchFile" class="headerlink" title="fs.watchFile()"></a>fs.watchFile()</h4><p>实现原理：轮询。每隔一段时间检查文件是否发生变化。所以在不同平台上表现基本是一致的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    persistent: <span class="literal">true</span>,  <span class="comment">// 默认就是true</span></span><br><span class="line">    interval: <span class="number">2000</span>  <span class="comment">// 多久检查一次</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// curr, prev 是被监听文件的状态, fs.Stat实例</span></span><br><span class="line"><span class="comment">// 可以通过 fs.unwatch() 移除监听</span></span><br><span class="line">fs.watchFile(<span class="string">'./fileForWatch.txt'</span>, options, <span class="function"><span class="keyword">function</span>(<span class="params">curr, prev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'修改时间为: '</span> + curr.mtime);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>修改<code>fileForWatch.txt</code>，可以看到控制台下打印出日志</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node watchFile.js</span><br><span class="line">修改时间为: Sat Jul <span class="number">16</span> <span class="number">2016</span> <span class="number">19</span>:<span class="number">03</span>:<span class="number">57</span> GMT+<span class="number">0800</span> (CST)</span><br><span class="line">修改时间为: Sat Jul <span class="number">16</span> <span class="number">2016</span> <span class="number">19</span>:<span class="number">04</span>:<span class="number">05</span> GMT+<span class="number">0800</span> (CST)</span><br></pre></td></tr></table></figure>

<p>为啥子？莫非单纯访问文件也会触发回调？</p>
<blockquote>
<p>If you want to be notified when the file was modified, not just accessed, you need to compare curr.mtime and prev.mtime.</p>
</blockquote>
<p>在 <strong>v0.10</strong> 之后的改动。如果监听的文件不存在，会怎么处理。如下</p>
<blockquote>
<p>Note: when an fs.watchFile operation results in an ENOENT error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). In Windows, blksize and blocks fields will be undefined, instead of zero. If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10.</p>
</blockquote>
<h4 id="fs-watch"><a href="#fs-watch" class="headerlink" title="fs.watch()"></a>fs.watch()</h4><blockquote>
<p>fs.watch(filename[, options][, listener])<br>fs.unwatchFile(filename[, listener])</p>
</blockquote>
<p>这接口非常不靠谱（当前测试用的v6.1.0），参考 <a href="https://github.com/nodejs/node/issues/7420" target="_blank" rel="noopener">https://github.com/nodejs/node/issues/7420</a></p>
<blockquote>
<p>fs.watch(filename[, options][, listener])#</p>
</blockquote>
<p>注意：<code>fs.watch()</code>这个接口并不是在所有的平台行为都一致，并且在某些情况下是不可用的。<code>recursive</code>这个选项只在<code>mac</code>、<code>windows</code>下可用。</p>
<p>问题来了：</p>
<ol>
<li>不一致的表现。</li>
<li>不可用的场景。</li>
<li>linux上要recursive咋整。</li>
</ol>
<blockquote>
<p>The fs.watch API is not 100% consistent across platforms, and is unavailable in some situations.<br>The recursive option is only supported on OS X and Windows.</p>
</blockquote>
<p>备忘，不可用的场景。比如网络文件系统等。</p>
<blockquote>
<p>For example, watching files or directories can be unreliable, and in some cases impossible, on network file systems (NFS, SMB, etc), or host file systems when using virtualization software such as Vagrant, Docker, etc.</p>
</blockquote>
<p>另外，listener回调有两个参数，分别是<code>event</code>、<code>filename</code>。其中，<code>filename</code>仅在linux、windows上会提供，并且不是100%提供，所以，尽量不要依赖<code>filename</code>。</p>
<p>在linux、osx上，<code>fs.watch()</code>监听的是inode。如果文件被删除，并重新创建，那么删除事件会触发。同时，<code>fs.watch()</code>监听的还是最初的inode。（API的设计就是这样的）</p>
<p>结论：怎么看都感觉这个API很不靠谱，虽然性能比fs.watchFile()要高很多。</p>
<p>先来个例子，在osx下测试了一下，简直令人绝望。。。无论是创建、修改、删除文件，<code>evt</code>都是<code>rename</code>。。。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    persistent: <span class="literal">true</span>,</span><br><span class="line">    recursive: <span class="literal">true</span>,</span><br><span class="line">    encoding: <span class="string">'utf8'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fs.watch(<span class="string">'../'</span>, options, <span class="function"><span class="keyword">function</span>(<span class="params">event, filename</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'触发事件:'</span> + event);</span><br><span class="line">    <span class="keyword">if</span>(filename)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件名是: '</span> + filename);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件名是没有提供'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>修改下<code>fileForWatch.txt</code>，看到下面输出。。。感觉打死也不想用这个API。。。</p>
<p>贴下环境：osx 10.11.4, node v6.1.0。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">触发事件:rename</span><br><span class="line">文件名是: fs/fileForWatch.txt___jb_bak___</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: fs/fileForWatch.txt</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: fs/fileForWatch.txt___jb_old___</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: .idea/workspace.xml___jb_bak___</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: .idea/workspace.xml</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: .idea/workspace.xml___jb_old___</span><br></pre></td></tr></table></figure>

<h3 id="修改所有者"><a href="#修改所有者" class="headerlink" title="修改所有者"></a>修改所有者</h3><p>参考linux命令行，不举例子了。。。</p>
<blockquote>
<p>fs.chown(path, uid, gid, callback)<br>fs.chownSync(path, uid, gid)<br>fs.fchown(fd, uid, gid, callback)<br>fs.fchownSync(fd, uid, gid)</p>
</blockquote>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>可以用<code>fs.chmod()</code>，也可以用<code>fs.fchmod()</code>。两者的区别在于，前面传的是文件路径，后面传的的文件句柄。</p>
<ol>
<li><code>fs.chmod)</code>、<code>fs.fchmod()</code>区别：传的是文件路径，还是文件句柄。</li>
<li><code>fs.chmod()</code>、<code>fs.lchmod()</code>区别：如果文件是软连接，那么<code>fs.chmod()</code>修改的是软连接指向的目标文件；<code>fs.lchmod()</code>修改的是软连接。</li>
</ol>
<blockquote>
<p>fs.chmod(path, mode, callback)<br>fs.chmodSync(path, mode)</p>
</blockquote>
<blockquote>
<p>fs.fchmod(fd, mode, callback)<br>fs.fchmodSync(fd, mode)</p>
</blockquote>
<blockquote>
<p>fs.lchmod(path, mode, callback)#<br>fs.lchmodSync(path, mode)</p>
</blockquote>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.chmod(<span class="string">'./fileForChown.txt'</span>, <span class="string">'777'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'权限修改成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">fs.chmodSync(&#39;.&#x2F;fileForChown.txt&#39;, &#39;777&#39;);</span><br></pre></td></tr></table></figure>

<h3 id="获取文件状态"><a href="#获取文件状态" class="headerlink" title="获取文件状态"></a>获取文件状态</h3><p>区别：</p>
<ul>
<li><code>fs.stat()</code> vs <code>fs.fstat()</code>：传文件路径 vs 文件句柄。</li>
<li><code>fs.stat()</code> vs <code>fs.lstat()</code>：如果文件是软链接，那么<code>fs.stat()</code>返回目标文件的状态，<code>fs.lstat()</code>返回软链接本身的状态。</li>
</ul>
<blockquote>
<p>fs.stat(path, callback)<br>fs.statSync(path)</p>
</blockquote>
<blockquote>
<p>fs.fstat(fd, callback)<br>fs.fstatSync(fd)</p>
</blockquote>
<blockquote>
<p>fs.lstat(path, callback)<br>fs.lstatSync(path)</p>
</blockquote>
<p>主要关注<code>Class: fs.Stats</code>。</p>
<p>首先是方法</p>
<ul>
<li>stats.isFile()  – 是否文件</li>
<li>stats.isDirectory() – 是否目录</li>
<li>stats.isBlockDevice() – 什么鬼</li>
<li>stats.isCharacterDevice() – 什么鬼</li>
<li>stats.isSymbolicLink() (only valid with fs.lstat()) – 什么鬼</li>
<li>stats.isFIFO() – 什么鬼</li>
<li>stats.isSocket() – 是不是socket文件</li>
</ul>
<p>官网例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  dev: <span class="number">2114</span>,</span><br><span class="line">  ino: <span class="number">48064969</span>,</span><br><span class="line">  mode: <span class="number">33188</span>,</span><br><span class="line">  nlink: <span class="number">1</span>,</span><br><span class="line">  uid: <span class="number">85</span>,</span><br><span class="line">  gid: <span class="number">100</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  size: <span class="number">527</span>,</span><br><span class="line">  blksize: <span class="number">4096</span>,</span><br><span class="line">  blocks: <span class="number">8</span>,</span><br><span class="line">  atime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT, <span class="comment">// 访问时间</span></span><br><span class="line">  mtime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT,  <span class="comment">// 文件内容修改时间</span></span><br><span class="line">  ctime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT,  <span class="comment">// 文件状态修改时间</span></span><br><span class="line">  birthtime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT  <span class="comment">// 创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>atime：Access Time // 访问时间</li>
<li>mtime:: Modified Time  // 文件内容修改时间</li>
<li>ctime: Changed Time.  // 文件状态修改时间，比如修改文件所有者、修改权限、重命名等</li>
<li>birthtime: Birth Time // 创建时间。在某些系统上是不可靠的，因为拿不到。</li>
</ul>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getTimeDesc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [d.getFullYear(), d.getMonth()+<span class="number">1</span>, d.getDate()].join(<span class="string">'-'</span>) + <span class="string">' '</span> + [d.getHours(), d.getMinutes(), d.getSeconds()].join(<span class="string">':'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fs.stat(<span class="string">'./fileForStat.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件大小: '</span> + stats.size);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建时间: '</span> + getTimeDesc(stats.birthtime));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'访问时间: '</span> + getTimeDesc(stats.atime));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'修改时间: '</span> + getTimeDesc(stats.mtime));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node stat.js</span><br><span class="line">文件大小: <span class="number">3613</span></span><br><span class="line">创建时间: <span class="number">2016</span><span class="literal">-7</span><span class="literal">-16</span> <span class="number">12</span>:<span class="number">40</span>:<span class="number">49</span></span><br><span class="line">访问时间: <span class="number">2016</span><span class="literal">-7</span><span class="literal">-16</span> <span class="number">12</span>:<span class="number">40</span>:<span class="number">49</span></span><br><span class="line">修改时间: <span class="number">2016</span><span class="literal">-7</span><span class="literal">-16</span> <span class="number">12</span>:<span class="number">40</span>:<span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Process</span> finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>同步的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getTimeDesc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [d.getFullYear(), d.getMonth()+<span class="number">1</span>, d.getDate()].join(<span class="string">'-'</span>) + <span class="string">' '</span> + [d.getHours(), d.getMinutes(), d.getSeconds()].join(<span class="string">':'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stats = fs.statSync(<span class="string">'./fileForStat.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文件大小: '</span> + stats.size);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'创建时间: '</span> + getTimeDesc(stats.birthtime));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'访问时间: '</span> + getTimeDesc(stats.atime));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'修改时间: '</span> + getTimeDesc(stats.mtime));</span><br></pre></td></tr></table></figure>

<h3 id="访问-权限检测"><a href="#访问-权限检测" class="headerlink" title="访问/权限检测"></a>访问/权限检测</h3><p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.access(path[, mode], callback)</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.access(<span class="string">'./fileForAccess.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'可以访问'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.accessSync(path[, mode])</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果成功，则返回undefined，如果失败，则抛出错误（什么鬼）</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fs.accessSync(<span class="string">'./fileForAccess.txt'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">throw</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件打开-关闭"><a href="#文件打开-关闭" class="headerlink" title="文件打开/关闭"></a>文件打开/关闭</h3><p>比较底层的接口，实际需要用到的机会不多。需要用到的时候看下<a href="https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback" target="_blank" rel="noopener">文档</a>就行。</p>
<ul>
<li>flags：文件打开模式，比如<code>r</code>、<code>r+</code>、<code>w</code>、<code>w+</code>等。可选模式非常多。</li>
<li>mode：默认是<code>666</code>，可读+可写。</li>
</ul>
<blockquote>
<p>fs.open(path, flags[, mode], callback)<br>fs.openSync(path, flags[, mode])<br>fs.close(fd, callback)<br>fs.closeSync(fd)</p>
</blockquote>
<h3 id="文件读取（底层）"><a href="#文件读取（底层）" class="headerlink" title="文件读取（底层）"></a>文件读取（底层）</h3><p>相对底层的读取接口，参数如下</p>
<ul>
<li>fd：文件句柄。</li>
<li>buffer：将读取的文件内容写到buffer里。</li>
<li>offset：buffer开始写入的位置。（在offset开始写入，还是offset+1？）</li>
<li>length：要读取的字节数。</li>
<li>position：文件从哪个位置开始读取。如果是null，那么就从当前位置开始读取。（读取操作会记录下上一个位置）</li>
</ul>
<p>此外，<code>callback</code>的回调参数为<code>(err, bytesRead, buffer)</code></p>
<blockquote>
<p>fs.read(fd, buffer, offset, length, position, callback)</p>
</blockquote>
<h3 id="追加文件内容"><a href="#追加文件内容" class="headerlink" title="追加文件内容"></a>追加文件内容</h3><blockquote>
<p>fs.appendFile(file, data[, options], callback)</p>
</blockquote>
<ul>
<li>file：可以是文件路径，也可以是文件句柄。（还可以是buffer？）</li>
<li>data：要追加的内容。string或者buffer。</li>
<li>options<ul>
<li>encoding：编码，默认是<code>utf8</code></li>
<li>mode：默认是<code>0o666</code></li>
<li>flag：默认是<code>a</code></li>
</ul>
</li>
</ul>
<p>注意：如果<code>file</code>是文件句柄，那么</p>
<ul>
<li>开始追加数据前，file需要已经打开。</li>
<li>file需要手动关闭。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.appendFile(<span class="string">'./extra/fileForAppend.txt'</span>, <span class="string">'helo'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'append成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="文件内容截取"><a href="#文件内容截取" class="headerlink" title="文件内容截取"></a>文件内容截取</h3><blockquote>
<p>fs.truncate(path, len, callback)<br>fs.truncateSync(path, len)</p>
<p>fs.ftruncate(fd, len, callback)<br>fs.ftruncateSync(fd, len)</p>
</blockquote>
<p>用途参考<a href="http://man7.org/linux/man-pages/man2/ftruncate.2.html" target="_blank" rel="noopener">linux说明文档</a>。</p>
<p>要点：</p>
<ul>
<li><code>offset</code>不会变化。比如通过<code>fs.read()</code>读取文件内容，就需要特别注意。</li>
<li>如果<code>len</code>小于文件内容长度，剩余文件内容部分会丢失；如果<code>len</code>大于文件内容长度，那么超出的部分，会用<code>\0</code>进行填充。</li>
<li>如果传的是文件路径，需要确保文件是可写的；如果传的是文件句柄，需要确保文件句柄已经打开并且可写入。</li>
</ul>
<blockquote>
<p>The truncate() and ftruncate() functions cause the regular file named<br>by path or referenced by fd to be truncated to a size of precisely<br>length bytes.</p>
</blockquote>
<blockquote>
<p>If the file previously was larger than this size, the extra data is<br>lost.  If the file previously was shorter, it is extended, and the<br>extended part reads as null bytes (‘\0’).</p>
</blockquote>
<blockquote>
<p>The file offset is not changed.</p>
</blockquote>
<blockquote>
<p>With ftruncate(), the file must be open for writing; with truncate(), the file must be writable.</p>
</blockquote>
<h3 id="修改文件属性（时间）"><a href="#修改文件属性（时间）" class="headerlink" title="修改文件属性（时间）"></a>修改文件属性（时间）</h3><ul>
<li>path/fd：文件路径/文件句柄</li>
<li>atime：Access Time。上一次访问文件数据的时间。</li>
<li>mtime：Modified Time。修改时间。</li>
</ul>
<blockquote>
<p>fs.utimes(path, atime, mtime, callback)<br>fs.utimesSync(path, atime, mtime)</p>
</blockquote>
<blockquote>
<p>fs.futimes(fd, atime, mtime, callback)<br>fs.futimesSync(fd, atime, mtime)</p>
</blockquote>
<p>备注，在命令行下可以</p>
<ul>
<li>通过<code>stat</code>查看文件的状态信息，包括了上面的atime、mtime。</li>
<li>通过<code>touch</code>修改这几个时间。</li>
</ul>
<h3 id="创建文件链接"><a href="#创建文件链接" class="headerlink" title="创建文件链接"></a>创建文件链接</h3><blockquote>
<p>fs.symlink(target, path[, type], callback)<br>fs.symlinkSync(target, path[, type])</p>
<p>fs.link(srcpath, dstpath, callback)<br>fs.linkSync(srcpath, dstpath)</p>
</blockquote>
<blockquote>
<p> link() creates a new link (also known as a hard link) to an existing file.</p>
</blockquote>
<p>软链接、硬链接区别：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/" target="_blank" rel="noopener">参考</a> 或者 [这个]。(<a href="http://www.cnblogs.com/itech/archive/2009/04/10/1433052.html" target="_blank" rel="noopener">http://www.cnblogs.com/itech/archive/2009/04/10/1433052.html</a>)</p>
<ul>
<li>硬链接：inode相同，多个别名。删除一个硬链接文件，不会影响其他有相同inode的文件。</li>
<li>软链接：有自己的inode，用户数据块存放指向文件的inode。</li>
</ul>
<p>参考<a href="http://man7.org/linux/man-pages/man2/link.2.html" target="_blank" rel="noopener">这里</a>。</p>
<h3 id="创建临时目录"><a href="#创建临时目录" class="headerlink" title="创建临时目录"></a>创建临时目录</h3><blockquote>
<p>fs.mkdtemp(prefix, callback)<br>fs.mkdtempSync(prefix)</p>
</blockquote>
<p>备忘：跟普通的随便找个目录，创建个随机名字的文件夹，有什么区别？</p>
<p>代码示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdtemp(<span class="string">'/tmp/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, folder</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建临时目录: '</span> + folder);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node mkdtemp.js</span><br><span class="line">创建临时目录: /tmp/Cxw51O</span><br></pre></td></tr></table></figure>

<h3 id="找出软连接指向的真实路径"><a href="#找出软连接指向的真实路径" class="headerlink" title="找出软连接指向的真实路径"></a>找出软连接指向的真实路径</h3><blockquote>
<p>fs.readlink(path[, options], callback)<br>fs.readlinkSync(path[, options])</p>
</blockquote>
<p>如下面例子，创建了个软链接指向<code>fileForReadLink.txt</code>，通过<code>fs.readlink()</code>就可以找出原始的路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> randomFileName = <span class="string">'./extra/fileForReadLink-'</span> + <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>) + <span class="string">'.txt'</span>;</span><br><span class="line"></span><br><span class="line">fs.symlinkSync(<span class="string">'./extra/fileForReadLink.txt'</span>, randomFileName);</span><br><span class="line">fs.readlink(randomFileName, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, linkString</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'链接文件内容: '</span> + linkString);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>类似终端下直接运行<code>readlink</code>。对于软链接文件，效果同上面代码。对于硬链接，没有输出。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">➜  extra git:(master) ✗ readlink fileForReadLink<span class="literal">-9827</span>.txt</span><br><span class="line">./extra/fileForReadLink.txt</span><br><span class="line">➜  extra git:(master) ✗ readlink fileForLinkHard.txt </span><br><span class="line">➜  extra git:(master) ✗ readlink fileForLinkSoft.txt</span><br><span class="line">./extra/fileForLink.txt</span><br></pre></td></tr></table></figure>

<h3 id="真实路径"><a href="#真实路径" class="headerlink" title="真实路径"></a>真实路径</h3><blockquote>
<p>fs.realpath(path[, options], callback)<br>fs.realpathSync(path[, options])</p>
</blockquote>
<p>例子：（不能作用于软链接？）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fileForRealPath1.txt 是普通文件,正常运行</span></span><br><span class="line">fs.realpath(<span class="string">'./extra/inner/fileForRealPath1.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, resolvedPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fs.realpath: '</span> + resolvedPath);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fileForRealPath.txt 是软链接, 会报错,提示找不到文件</span></span><br><span class="line">fs.realpath(<span class="string">'./extra/inner/fileForRealPath.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, resolvedPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fs.realpath: '</span> + resolvedPath);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'path.resolve: '</span> + path.resolve(<span class="string">'./extra/inner/fileForRealpath.txt'</span>) );</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">path.resolve: /Users/a/Documents/git<span class="literal">-code</span>/git<span class="literal">-blog</span>/demo/<span class="number">2015.05</span>.<span class="number">21</span><span class="literal">-node</span><span class="literal">-basic</span>/fs/extra/inner/fileForRealpath.txt</span><br><span class="line">fs.realpath: /Users/a/Documents/git<span class="literal">-code</span>/git<span class="literal">-blog</span>/demo/<span class="number">2015.05</span>.<span class="number">21</span><span class="literal">-node</span><span class="literal">-basic</span>/fs/extra/inner/fileForRealPath1.txt</span><br><span class="line">/Users/a/Documents/git<span class="literal">-code</span>/git<span class="literal">-blog</span>/demo/<span class="number">2015.05</span>.<span class="number">21</span><span class="literal">-node</span><span class="literal">-basic</span>/fs/realpath.js:<span class="number">12</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            ^</span><br><span class="line"></span><br><span class="line">Error: ENOENT: no such file or directory, realpath <span class="string">'./extra/inner/fileForRealPath.txt'</span></span><br><span class="line">    at Error (native)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Process</span> finished with <span class="keyword">exit</span> code <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><blockquote>
<p>fs.rmdir(path, callback)<br>fs.rmdirSync(path)</p>
</blockquote>
<p>例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.rmdir(<span class="string">'./dirForRemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'目录删除成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><h4 id="缓冲区内容写到磁盘"><a href="#缓冲区内容写到磁盘" class="headerlink" title="缓冲区内容写到磁盘"></a>缓冲区内容写到磁盘</h4><blockquote>
<p>fs.fdatasync(fd, callback)<br>fs.fdatasyncSync(fd)</p>
</blockquote>
<p>可以参考这里：</p>
<blockquote>
<p>1、sync函数<br>sync函数只是将所有修改过的块缓冲区排入写队列，然后就返回，它并不等待实际写磁盘操作结束。<br>通常称为update的系统守护进程会周期性地（一般每隔30秒）调用sync函数。这就保证了定期冲洗内核的块缓冲区。命令sync(1)也调用sync函数。<br>2、fsync函数<br>fsync函数只对由文件描述符filedes指定的单一文件起作用，并且等待写磁盘操作结束，然后返回。<br>fsync可用于数据库这样的应用程序，这种应用程序需要确保将修改过的块立即写到磁盘上。<br>3、fdatasync函数<br>fdatasync函数类似于fsync，但它只影响文件的数据部分。而除数据外，fsync还会同步更新文件的属性。<br>对于提供事务支持的数据库，在事务提交时，都要确保事务日志（包含该事务所有的修改操作以及一个提交记录）完全写到硬盘上，才认定事务提交成功并返回给应用层。</p>
</blockquote>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Json最强攻略</title>
    <url>/2020/03/30/Json%E6%9C%80%E5%BC%BA%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h2 id="一、-JSON是什么？"><a href="#一、-JSON是什么？" class="headerlink" title="一、 JSON是什么？"></a>一、 JSON是什么？</h2><ul>
<li><p>JSON，全称“JavaScript Object Notation（JavaScript对象表示法）”，起源于JavaScript的对象和数组。JSON，说白了就是JavaScript用来处理数据的一种格式，这种格式非常简单易用。</p>
</li>
<li><p>JSON，大部分都是用来处理JavaScript和web服务器端之间的数据交换，把后台web服务器的数据传递到前台，然后使用JavaScript进行处理，例如ajax等。</p>
</li>
<li><p>JSON支持的语言非常多，包括JavaScript、C#、PHP、Java等等，这是由于JSON独立于语言的轻量级的数据交换格式，这个特点有点类似于SQL语言。</p>
</li>
<li><p>JSON，就是一种数据传输格式而已，无它，非常容易掌握。但是大家不要误以为JSON最大的用处是在前端，其实JSON最大的用处是处理JavaScript和web服务器端之间数据交换。</p>
</li>
</ul>
<a id="more"></a>

<h2 id="二、JSON对象结构"><a href="#二、JSON对象结构" class="headerlink" title="二、JSON对象结构"></a>二、JSON对象结构</h2><blockquote>
<p>JSON结构共有2种：<br>（1）对象结构；<br>（2）数组结构；</p>
</blockquote>
<h3 id="1、对象结构"><a href="#1、对象结构" class="headerlink" title="1、对象结构"></a>1、对象结构</h3><p>JSON，简单来说就是JavaScript中的对象或数组，所以这两种结构就是对象和数组。通过这两种结构就可以表示各种复杂的结构。</p>
<blockquote>
<p>对象结构是使用大括号“{}”括起来的，大括号内是由0个或多个用英文逗号分隔的“关键字:值”对（key:value）构成的。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObj =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"键名1"</span>:值<span class="number">1</span>,</span><br><span class="line">    <span class="string">"键名2"</span>:值<span class="number">2</span>,</span><br><span class="line">    ……</span><br><span class="line">    <span class="string">"键名n"</span>:值n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：<br>jsonObj指的是json对象。对象结构是以“{”开始，到“}”结束。其中“键名”和“值”之间用英文冒号构成对，两个“键名:值”之间用英文逗号分隔。</p>
<p>注意，这里的键名是字符串，但是值可以是数值、字符串、对象、数组或逻辑true和false。</p>
<p><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var obj =</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>name<span class="string">":"</span>helicopter<span class="string">",</span></span><br><span class="line"><span class="string">            "</span>age<span class="string">":23,</span></span><br><span class="line"><span class="string">            //JSON对象内部也有一个JSON对象</span></span><br><span class="line"><span class="string">            hobby:</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>first<span class="string">":"</span>swimming<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>second<span class="string">":"</span>singing<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>third<span class="string">":"</span>dancing<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        //读取JSON数据</span></span><br><span class="line"><span class="string">        document.write("</span>名字是：<span class="string">"+obj.name+"</span>&lt;br&gt;<span class="string">");</span></span><br><span class="line"><span class="string">        document.write("</span>第一项爱好是：<span class="string">"+obj.hobby.first);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器预览效果如下：</p>
<p><img src="http://static.zybuluo.com/wp0214/28qkfqjnwfg8zsx8oq9k72x1/image_1c1ui3ugh1q3g1lr8118f1i121dd519.png" alt="image_1c1ui3ugh1q3g1lr8118f1i121dd519.png-19.7kB"></p>
<p>  <strong>1、从JSON中读数据</strong></p>
<blockquote>
<p>对于JSON对象结构，读取JSON非常简单，获取JSON中的数据共有2种方式。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">jsonObj.key</span><br><span class="line">jsonObj[<span class="string">"key"</span>]</span><br></pre></td></tr></table></figure>
<p><code>说明：</code><br>jsonObj指的是JSON对象，key指的是键名。读取JSON数据使用的是“.”操作符，这个跟JavaScript对象读取属性值是差不多的。</p>
<p>实际例子请看上面举例。</p>
<p><strong>2、向JSON写数据</strong></p>
<blockquote>
<p>对于JSON对象结构，要往JSON中增加一条数据，也是使用“.”操作符。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jsonObj.key = 值;</span><br><span class="line">jsonObj[<span class="string">"key"</span>] = 值;</span><br></pre></td></tr></table></figure>
<p><code>说明：</code><br>jsonObj指的是JSON对象，key指的是键名。</p>
<p><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var obj =</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>name<span class="string">":"</span>helicopter<span class="string">",</span></span><br><span class="line"><span class="string">            "</span>age<span class="string">":23,</span></span><br><span class="line"><span class="string">            //JSON对象内部也有一个JSON对象</span></span><br><span class="line"><span class="string">            hobby:</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>first<span class="string">":"</span>swimming<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>second<span class="string">":"</span>singing<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>third<span class="string">":"</span>dancing<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        obj.gender = "</span>男<span class="string">";  //或者obj["</span>gender<span class="string">"]="</span>男<span class="string">";</span></span><br><span class="line"><span class="string">        document.write("</span>性别是：<span class="string">"+obj.gender);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器预览效果如下：</p>
<p><img src="http://static.zybuluo.com/wp0214/qef8saddse2xv8wbu98mefnu/image_1c1ui96k610351uq31ck91e3b1ts51m.png" alt="在浏览器预览效果如下："></p>
<p> <strong>3、修改JSON中的数据</strong></p>
<blockquote>
<p>对于JSON对象结构，要修改JSON中的数据，也是使用“.”操作符。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jsonObj.key = 新值;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var obj =</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>name<span class="string">":"</span>helicopter<span class="string">",</span></span><br><span class="line"><span class="string">            "</span>age<span class="string">":23,</span></span><br><span class="line"><span class="string">            "</span>gender<span class="string">":"</span>男<span class="string">",</span></span><br><span class="line"><span class="string">            //JSON对象内部也有一个JSON对象</span></span><br><span class="line"><span class="string">            hobby:</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>first<span class="string">":"</span>swimming<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>second<span class="string">":"</span>singing<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>third<span class="string">":"</span>dancing<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        obj.name = "</span>小杰<span class="string">";  //或者obj["</span>name<span class="string">"]="</span>小杰<span class="string">";</span></span><br><span class="line"><span class="string">        document.write("</span>姓名是：<span class="string">"+obj.name);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器预览效果如下：<br><img src="http://static.zybuluo.com/wp0214/kmgposdk24gulgwfq745g4mq/image_1c1uid74elbi1s21nut1o8e1q6g23.png" alt="image_1c1uid74elbi1s21nut1o8e1q6g23.png-15kB"></p>
<p><strong>4、删除JSON中的数据</strong></p>
<blockquote>
<p>对于JSON对象结构，我们使用delete关键字来删除JSON中的数据。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight plain"><figcaption><span>jsonObj.key;```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;说明：&#96;</span><br><span class="line">删除JSON中数据非常简单，只需要使用delete关键字即可。</span><br><span class="line"></span><br><span class="line">&#96;举例：&#96;</span><br><span class="line">&#96;&#96;&#96; javascript</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        var obj &#x3D;</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;helicopter&quot;,</span><br><span class="line">            &quot;age&quot;:23,</span><br><span class="line">            &quot;gender&quot;:&quot;男&quot;,</span><br><span class="line">            &#x2F;&#x2F;JSON对象内部也有一个JSON对象</span><br><span class="line">            hobby:</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;first&quot;:&quot;swimming&quot;,</span><br><span class="line">                &quot;second&quot;:&quot;singing&quot;,</span><br><span class="line">                &quot;third&quot;:&quot;dancing&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        delete obj.age;</span><br><span class="line">        if(obj.age&#x3D;&#x3D;null)</span><br><span class="line">        &#123;</span><br><span class="line">            console(&quot;JSON中的年龄项已经被删除！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>5、遍历JSON对象</strong></p>
<blockquote>
<p>对于JSON对象结构，可以使用for…in…循环来遍历JSON对象中的数据。</p>
</blockquote>
<p><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var obj =</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>name<span class="string">":"</span>helicopter<span class="string">",</span></span><br><span class="line"><span class="string">            "</span>age<span class="string">":23,</span></span><br><span class="line"><span class="string">            "</span>gender<span class="string">":"</span>男<span class="string">",</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        for(var c in obj)</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            if(c=="</span>name<span class="string">")</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                document.write("</span>姓名是：<span class="string">"+obj[c]);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器预览效果如下：<br><img src="http://static.zybuluo.com/wp0214/iy624bkzch2rlev5jrz60z6j/image_1c1uimc401hkdk8a2qq14nn1ude2g.png" alt="image_1c1uimc401hkdk8a2qq14nn1ude2g.png-15.5kB"></p>
<h3 id="2、数组结构"><a href="#2、数组结构" class="headerlink" title="2、数组结构"></a>2、数组结构</h3><blockquote>
<p>JSON数组结构是用中括号“[]”括起来，中括号内部由0个或多个以英文逗号“,”分隔的值列表组成。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"键名1"</span>:值<span class="number">1</span>,</span><br><span class="line">        <span class="string">"键名2"</span>:值<span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"键名3"</span>:值<span class="number">3</span>,</span><br><span class="line">        <span class="string">"键名4"</span>:值<span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ……</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><code>说明：</code><br>arr指的是json数组。数组结构是以“[”开始，到“]”结束，这一点跟JSON对象不同。不过在JSON数组结构中，每一对“{}”相当于一个JSON对象，大家看看像不像？而且语法都非常类似。</p>
<p>注意，这里的键名是字符串，但是值可以是数值、字符串、对象、数组或逻辑true和false。</p>
<p><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var arr =</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>name<span class="string">":"</span>小明<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>age<span class="string">":23,</span></span><br><span class="line"><span class="string">                "</span>gender<span class="string">":"</span>男<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>name<span class="string">":"</span>小红<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>age<span class="string">":21,</span></span><br><span class="line"><span class="string">                "</span>gender<span class="string">":"</span>女<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">        //读取JSON数据</span></span><br><span class="line"><span class="string">        document.write("</span>第一个学生的名字是：<span class="string">"+arr[0].name+"</span>&lt;br&gt;<span class="string">");</span></span><br><span class="line"><span class="string">        document.write("</span>第二个学生的性别是：<span class="string">"+arr[1].gender+"</span>&lt;br&gt;<span class="string">");</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器预览效果如下：</p>
<p><img src="http://static.zybuluo.com/wp0214/v26g4p99j9m67jhbmaqh3xu6/image_1c1uitq791nva1egmvbs1jqhnh2t.png" alt="image_1c1uitq791nva1egmvbs1jqhnh2t.png-16.5kB"></p>
<p>JSON数组结构也是非常简单的，只需要通过数组下标来获取哪一个数组元素（一个“{}”的内容就类似一个数组元素），然后再配合使用“.”操作符就可以获取相应数组元素的内部数据。</p>
<p>对于获取、写入、修改、删除、遍历JSON数组结构中的数据，跟JSON对象结构的数据操作类似，大家对比琢磨一下基本就懂了，在此不再累赘讲解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var arr =</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>name<span class="string">":"</span>小明<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>age<span class="string">":23,</span></span><br><span class="line"><span class="string">                "</span>gender<span class="string">":"</span>男<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>name<span class="string">":"</span>小红<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>age<span class="string">":21,</span></span><br><span class="line"><span class="string">                "</span>gender<span class="string">":"</span>女<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">        delete arr[0];</span></span><br><span class="line"><span class="string">        arr[1].name="</span>小兰<span class="string">";</span></span><br><span class="line"><span class="string">        document.write("</span>第<span class="number">2</span>个学生的姓名是：<span class="string">"+arr[1].name);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、JSON对象和JSON字符串"><a href="#三、JSON对象和JSON字符串" class="headerlink" title="三、JSON对象和JSON字符串"></a>三、JSON对象和JSON字符串</h2><p><strong>普通字符串、JSON字符串和JSON对象</strong><br>初学者经常有一个困惑，就是分不清普通字符串、JSON字符串和JSON对象。其实这3者是非常容易区分的。</p>
<p>1、普通字符串<br>    字符串嘛，大家都知道是使用单引号或双引号括起来的一串字符。<br><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"学习json教程"</span>;</span><br></pre></td></tr></table></figure>
<p>2、JSON对象<br>JSON对象我们在“JSON对象结构”这一节已经详细为大家讲解了。JSON对象，指的是符合JSON格式要求的JavaScript对象。<br><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObj = &#123;<span class="string">"name"</span>:<span class="string">"helicopter"</span>,<span class="string">"age"</span>:<span class="number">23</span>,<span class="string">"gender"</span>:<span class="string">"男"</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>3、JSON字符串<br>JSON字符串，指的是符合“JSON格式”的字符串。<br>JSON字符串要求两点：</p>
<p>（1）必须是字符串，也就是要用单引号或双引号括起来；</p>
<p>（2）必须符合“JSON”格式。<br><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">'&#123;"name": "helicopter", "age":23, "gender": "男"&#125;'</span>;</span><br></pre></td></tr></table></figure>
<p>JSON字符串说白了就是在JSON对象外面加一对单引号。</p>
<p>大家好好对比一下，就知道普通字符串、JSON对象和JSON字符串的区别了。</p>
<p>###JSON对象转换为JSON字符串</p>
<blockquote>
<p>在JSON中，可以使用JSON.stringify()方法将JSON对象转换为JSON字符串。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>对象名);</span><br></pre></td></tr></table></figure>
<p><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var obj =</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "</span>name<span class="string">":"</span>helicopter<span class="string">",</span></span><br><span class="line"><span class="string">            "</span>age<span class="string">":23,</span></span><br><span class="line"><span class="string">            //JSON对象内部也有一个JSON对象</span></span><br><span class="line"><span class="string">            hobby:</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                "</span>first<span class="string">":"</span>swimming<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>second<span class="string">":"</span>singing<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>third<span class="string">":"</span>dancing<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        var jsonStr=JSON.stringify(obj);</span></span><br><span class="line"><span class="string">        document.write(jsonStr);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器预览效果如下：<br><img src="http://static.zybuluo.com/wp0214/8r04wc4v20xqb8p05yfnmzh4/image_1c1ujb7d81fui9hhuk19sp89p3a.png" alt="image_1c1ujb7d81fui9hhuk19sp89p3a.png-34.5kB"></p>
<h3 id="JSON字符串转换为JSON对象"><a href="#JSON字符串转换为JSON对象" class="headerlink" title="JSON字符串转换为JSON对象"></a>JSON字符串转换为JSON对象</h3><p> 在JavaScript中，将JSON字符串转换为JSON对象非常有用。一般，在Web服务器后台向前台传输数据的过程中，往往都是用字符串形式来传输JSON数据。如果我们在前台想要获取JSON数据，就必须将JSON字符串转换为JSON对象才能操作。</p>
<blockquote>
<p>现在大多数浏览器（IE8及以上，Chrome和Firefox差不多全部）自带原生JSON对象，提供JSON.parse()方法来将JSON字符串转换为JSON对象。</p>
</blockquote>
<p><code>语法：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(字符串名);</span><br></pre></td></tr></table></figure>

<p><code>举例：</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        var jsonStr = '&#123;"</span>name<span class="string">": "</span>helicopter<span class="string">", "</span>age<span class="string">":23, "</span>gender<span class="string">": "</span>男<span class="string">"&#125;';</span></span><br><span class="line"><span class="string">        var jsonObj=JSON.parse(jsonStr);</span></span><br><span class="line"><span class="string">        document.write("</span>姓名是：<span class="string">"+jsonObj.name);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建React项目全家桶</title>
    <url>/2020/03/30/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAReact%E9%A1%B9%E7%9B%AE%E5%85%A8%E5%AE%B6%E6%A1%B6/</url>
    <content><![CDATA[<p>React是近几年来前端项目开发非常火的一个框架，其背景是Facebook团队的技术支持，市场占有率也很高。很多初学者纠结一开始是学react还是vue。个人觉得，有时间的话，最好两个都掌握一下。从学习难度上来说，react要比vue稍难一些。万事开头难，但是掌握了react对于大幅提高前端技能还是非常有帮助的。本文一步步详细梳理了从创建react、精简项目、集成插件、初步优化等过程。对于react开发者来说，能够节省很多探索的时间。下面请跟着我来一步步操作。</p>
<a id="more"></a>

<h2 id="先睹为快"><a href="#先睹为快" class="headerlink" title="先睹为快"></a>先睹为快</h2><p>正式开始前，先看下通过本次分享，能掌握什么？</p>
<ul>
<li>从零创建React项目</li>
<li>支持Sass/Scss/Less/Stylus</li>
<li>路由使用：react-router-dom</li>
<li>组件的创建与引用</li>
<li>React Developer Tools浏览器插件</li>
<li>redux、react-redux使用</li>
<li>redux-thunk</li>
<li>store的创建与使用</li>
<li>Redux DevTools安装与使用</li>
<li>immutable.js使用</li>
<li>Mock.js使用</li>
<li>解决本地跨域反向代理</li>
<li>其他常用工具汇总</li>
<li>超值附赠：集成Ant Design</li>
</ul>
<p>即使你是新手，跟着操作一遍以后，也可以快速上手React项目啦！</p>
<blockquote>
<p>※注：本文代码区域每行开头的“+”表示新增，“-”表示删除，“M”表示修改；代码中的“…”表示省略。</p>
</blockquote>
<h2 id="1-创建React-APP"><a href="#1-创建React-APP" class="headerlink" title="1 创建React-APP"></a>1 创建React-APP</h2><p>为了加速npm下载速度，先把npm设置为淘宝镜像地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>通过官方的create-react-app，找个喜欢的目录，执行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx create-react-app react-app</span><br></pre></td></tr></table></figure>
<p>命令最后的react-app是项目的名称，可以自行更改。</p>
<p>稍等片刻即可完成安装。安装完成后，可以使用npm或者yarn启动项目。</p>
<p>进入项目目录，并启动项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd react-app</span><br><span class="line">yarn start  （或者使用npm start）</span><br></pre></td></tr></table></figure>
<p>启动后，可以通过<code>http://localhost:3000/</code>地址访问项目：</p>
<h2 id="2-精简项目"><a href="#2-精简项目" class="headerlink" title="2 精简项目"></a>2 精简项目</h2><h3 id="2-1-删除文件"><a href="#2-1-删除文件" class="headerlink" title="2.1 删除文件"></a>2.1 删除文件</h3><p>接下来，删除一般项目中用不到的文件，最简化项目。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    ├─ /node_modules</span><br><span class="line">    ├─ package.json</span><br><span class="line">    ├─ /public</span><br><span class="line">    |  ├─ favicon.ico</span><br><span class="line">    |  ├─ index.html</span><br><span class="line">-   |  ├─ logo192.png</span><br><span class="line">-   |  ├─ logo512.png</span><br><span class="line">-   |  ├─ mainfest.json</span><br><span class="line">-   |  └─ robots.txt</span><br><span class="line">    ├─ README.md</span><br><span class="line">    ├─ /src</span><br><span class="line">-   |  ├─ App.css</span><br><span class="line">    |  ├─ App.js</span><br><span class="line">-   |  ├─ App.test.js      (jTest自动化测试)</span><br><span class="line">-   |  ├─ index.css</span><br><span class="line">-   |  ├─ index.js</span><br><span class="line">-   |  ├─ logo.svg</span><br><span class="line">-   |  ├─ serviceWorker.js</span><br><span class="line">-   |  └─ setuoTests.js    (PWA)</span><br><span class="line">    └─ yarn.lock</span><br></pre></td></tr></table></figure>
<p>以上文件删除后，页面会报错。这是因为相应的文件引用已不存在。需要继续修改代码。</p>
<h3 id="2-2-简化代码"><a href="#2-2-简化代码" class="headerlink" title="2.2 简化代码"></a>2.2 简化代码</h3><p>现在目录结构如下，清爽许多：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├─ /node_modules</span><br><span class="line">├─ package.json</span><br><span class="line">├─ /public</span><br><span class="line">|  ├─ favicon.ico</span><br><span class="line">|  └─ index.html</span><br><span class="line">├─ README.md</span><br><span class="line">├─ /src</span><br><span class="line">|  ├─ App.js</span><br><span class="line">|  └─ index.js</span><br><span class="line">└─ yarn.lock</span><br></pre></td></tr></table></figure>
<blockquote>
<p>记的删除文件中引用的代码</p>
</blockquote>
<h3 id="2-3-使用Fragment去掉组件外层标签"><a href="#2-3-使用Fragment去掉组件外层标签" class="headerlink" title="2.3 使用Fragment去掉组件外层标签"></a>2.3 使用Fragment去掉组件外层标签</h3><p>react要求每个组件HTML的最外层必须是由一个标签包裹，且不能存在并列的标签。例如，在src/App.js中，如果是这样就会报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 以下代码将会报错，最外层不能存在并列的标签。</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;h1&gt;This is React App.&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div className=<span class="string">"App-other"</span>&gt;</span><br><span class="line">      &lt;h1&gt;This is React App-other.&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果确实需要这样的HTML，并且不想再添加一个父级标签，可以使用Fragment作为最外层。代码修改如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">M   <span class="keyword">import</span> React, &#123; Fragment &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">+           <span class="xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">                &lt;div className="App"&gt;</span><br><span class="line">                    &lt;h1&gt;This is React App.&lt;/h1&gt;</span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;div className="App-other"&gt;</span><br><span class="line">                    &lt;h1&gt;This is React App-ohter.&lt;/h1&gt;</span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">+           <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>
<p>以上仅为了说明Fragment的使用效果。在某些组件嵌套的使用场景下，非常适合使用Fragment。例如父组件是<code>&lt;table&gt;</code>，而子组件可以用<code>&lt;Fragment&gt;</code>包裹多个<code>&lt;tr&gt;</code>。</p>
<h2 id="3-项目目录结构"><a href="#3-项目目录结构" class="headerlink" title="3 项目目录结构"></a>3 项目目录结构</h2><p>项目目录结构可根据项目实际灵活制定。这里分享下我常用的结构，仅供参考。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├─ /node_modules</span><br><span class="line">├─ package.json</span><br><span class="line">├─ /public</span><br><span class="line">|  ├─ favicon.ico        &lt;-- 网页图标</span><br><span class="line">|  └─ index.html         &lt;-- HTML页模板</span><br><span class="line">├─ README.md</span><br><span class="line">├─ /src</span><br><span class="line">|  ├─ /common            &lt;-- 全局公用目录</span><br><span class="line">|  |  ├─ /fonts          &lt;-- 字体文件目录</span><br><span class="line">|  |  ├─ /images         &lt;-- 图片文件目录</span><br><span class="line">|  |  ├─ /js             &lt;-- 公用js文件目录</span><br><span class="line">|  |  └─ /style          &lt;-- 公用样式文件目录</span><br><span class="line">|  |  |  ├─ frame.css    &lt;-- 全部公用样式（<span class="keyword">import</span>其他css）</span><br><span class="line">|  |  |  ├─ reset.css    &lt;-- 清零样式</span><br><span class="line">|  |  |  └─ global.css   &lt;-- 全局公用样式</span><br><span class="line">|  ├─ /components        &lt;-- 公共模块组件目录</span><br><span class="line">|  |  ├─ /header         &lt;-- 头部导航模块</span><br><span class="line">|  |  |  ├─ index.js     &lt;-- header主文件</span><br><span class="line">|  |  |  └─ header.css   &lt;-- header样式文件</span><br><span class="line">|  |  └─ ...             &lt;-- 其他模块</span><br><span class="line">|  ├─ /pages             &lt;-- 页面组件目录</span><br><span class="line">|  |  ├─ /home           &lt;-- home页目录</span><br><span class="line">|  |  |  ├─ index.js     &lt;-- home主文件</span><br><span class="line">|  |  |  └─ home.css     &lt;-- home样式文件</span><br><span class="line">|  |  ├─ /login          &lt;-- login页目录</span><br><span class="line">|  |  |  ├─ index.js     &lt;-- login主文件</span><br><span class="line">|  |  |  └─ login.css    &lt;-- login样式文件</span><br><span class="line">|  |  └─ ...             &lt;-- 其他页面</span><br><span class="line">|  ├─ App.js             &lt;-- 项目主模块</span><br><span class="line">|  └─ index.js           &lt;-- 项目入口文件</span><br><span class="line">└─ yarn.lock</span><br></pre></td></tr></table></figure>
<h3 id="3-1-引入全局公用样式"><a href="#3-1-引入全局公用样式" class="headerlink" title="3.1 引入全局公用样式"></a>3.1 引入全局公用样式</h3><p>在frame.css里引入其他公用样式： src/common/style/frame.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'./reset.css'</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'./global.css'</span>;</span><br></pre></td></tr></table></figure>
<p>然后在src/index.js里引入frame.css</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    import React from &#39;react&#39;</span><br><span class="line">    import ReactDOM from &#39;react-dom&#39;</span><br><span class="line">    import App from &#39;.&#x2F;App&#39;</span><br><span class="line">+   import &#39;.&#x2F;common&#x2F;style&#x2F;frame.css&#39;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&#39;root&#39;))</span><br></pre></td></tr></table></figure>
<h3 id="3-2-支持Sass-Less-Stylus"><a href="#3-2-支持Sass-Less-Stylus" class="headerlink" title="3.2 支持Sass/Less/Stylus"></a>3.2 支持Sass/Less/Stylus</h3><p>工欲善其事必先利其器，这么高大上的react怎能好意思用最原始的css搭配呢？create-react-app默认情况下未暴露配置文件。要更灵活配置项目，需要将配置文件暴露出来。</p>
<p>执行以下命令，暴露配置文件：</p>
<blockquote>
<p>※注意：暴露配置的文件的操作不可逆！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure>
<p>如果之前没有提及git的话，可能会报以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Remove untracked files, stash or commit any changes, and try again</span><br></pre></td></tr></table></figure>
<p>需要先在项目根目录下执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "初始化项目(备注)"</span><br></pre></td></tr></table></figure>
<p>稍等片刻，eject成功，目录变化如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+   ├─ /config</span><br><span class="line">+   |  ├─ /jest</span><br><span class="line">+   |  ├─ env.js</span><br><span class="line">+   |  ├─ <span class="built_in">module</span>.js</span><br><span class="line">+   |  ├─ paths.js</span><br><span class="line">+   |  ├─ pnpTs.js</span><br><span class="line">+   |  ├─ webpack.config.js   &lt;-- webpack配置文件</span><br><span class="line">+   |  └─ webpackDevServer.config.js</span><br><span class="line">    ├─ /node_modules</span><br><span class="line">    ├─ package.json</span><br><span class="line">    ├─ /public</span><br><span class="line">    |  ├─ favicon.ico</span><br><span class="line">    |  └─ index.html</span><br><span class="line">    ├─ README.md</span><br><span class="line">+   ├─ /scripts</span><br><span class="line">+   |  ├─ build.js</span><br><span class="line">+   |  ├─ start.js</span><br><span class="line">+   |  └─ test.js</span><br><span class="line">    ├─ /src</span><br><span class="line">    |  ├─ /common         &lt;-- 全局公用目录</span><br><span class="line">    |  ├─ /components     &lt;-- 公共模块组件目录</span><br><span class="line">    |  ├─ /pages          &lt;-- 页面组件目录</span><br><span class="line">    |  ├─ App.js          &lt;-- 项目主模块</span><br><span class="line">    |  └─ index.js        &lt;-- 项目入口文件</span><br><span class="line">    └─ yarn.lock</span><br></pre></td></tr></table></figure>
<h3 id="3-2-1-支持Sass-Scss"><a href="#3-2-1-支持Sass-Scss" class="headerlink" title="3.2.1 支持Sass/Scss"></a>3.2.1 支持Sass/Scss</h3><p>eject后，虽然package.json以及webpack.config.js里有了sass相关代码，但是要正确使用Sass/Scss，还要再安装node-sass。</p>
<p>执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install node-sass -D</span><br><span class="line">  or</span><br><span class="line">yarn add node-sass -D</span><br></pre></td></tr></table></figure>
<p>安装完成后，项目已支持Sass/Scss，可以将原css文件后缀名修改为sacc/scss，别忘了把src/index.js中引入的frame.css后缀名修改为sacc/scss。</p>
<h3 id="3-2-2-支持Less"><a href="#3-2-2-支持Less" class="headerlink" title="3.2.2 支持Less"></a>3.2.2 支持Less</h3><p>支持Less稍微多一点步骤，首先安装less和less-loader：<br>执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install less-loader -D</span><br><span class="line">  or</span><br><span class="line">yarn add less-loader -D</span><br></pre></td></tr></table></figure>
<p>然后修改config/webpack.config.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// style files regexes</span></span><br><span class="line">    <span class="keyword">const</span> cssRegex = <span class="regexp">/\.css$/</span>;</span><br><span class="line">    <span class="keyword">const</span> cssModuleRegex = <span class="regexp">/\.module\.css$/</span>;</span><br><span class="line">    <span class="keyword">const</span> sassRegex = <span class="regexp">/\.(scss|sass)$/</span>;</span><br><span class="line">    <span class="keyword">const</span> sassModuleRegex = <span class="regexp">/\.module\.(scss|sass)$/</span>;</span><br><span class="line">+   <span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line">+   <span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br><span class="line">    ...(略)</span><br><span class="line">    <span class="comment">// Opt-in support for SASS (using .scss or .sass extensions).</span></span><br><span class="line">    <span class="comment">// By default we support SASS Modules with the</span></span><br><span class="line">    <span class="comment">// extensions .module.scss or .module.sass</span></span><br><span class="line">    &#123;</span><br><span class="line">        test: sassRegex,</span><br><span class="line">        exclude: sassModuleRegex,</span><br><span class="line">        use: getStyleLoaders(</span><br><span class="line">            &#123;</span><br><span class="line">                importLoaders: <span class="number">2</span>,</span><br><span class="line">                sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'sass-loader'</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// Don't consider CSS imports dead code even if the</span></span><br><span class="line">        <span class="comment">// containing package claims to have no side effects.</span></span><br><span class="line">        <span class="comment">// Remove this when webpack adds a warning or an error for this.</span></span><br><span class="line">        <span class="comment">// See https://github.com/webpack/webpack/issues/6571</span></span><br><span class="line">        sideEffects: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Adds support for CSS Modules, but using SASS</span></span><br><span class="line">    <span class="comment">// using the extension .module.scss or .module.sass</span></span><br><span class="line">    &#123;</span><br><span class="line">        test: sassModuleRegex,</span><br><span class="line">        use: getStyleLoaders(</span><br><span class="line">            &#123;</span><br><span class="line">                importLoaders: <span class="number">2</span>,</span><br><span class="line">                sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">                modules: &#123;</span><br><span class="line">                    getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">                  &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'sass-loader'</span></span><br><span class="line">        ),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 以下这里仿照上面sass的代码，配置下less。</span></span><br><span class="line">+   &#123;</span><br><span class="line">+       test: lessRegex,</span><br><span class="line">+           exclude: lessModuleRegex,</span><br><span class="line">+           use: getStyleLoaders(</span><br><span class="line">+               &#123;</span><br><span class="line">+                   importLoaders: <span class="number">2</span>,</span><br><span class="line">+                   sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">+               &#125;,</span><br><span class="line">+               <span class="string">'less-loader'</span></span><br><span class="line">+            ),</span><br><span class="line">+           sideEffects: <span class="literal">true</span>,</span><br><span class="line">+   &#125;,</span><br><span class="line">+   &#123;</span><br><span class="line">+       test: lessModuleRegex,</span><br><span class="line">+       use: getStyleLoaders(</span><br><span class="line">+           &#123;</span><br><span class="line">+               importLoaders: <span class="number">2</span>,</span><br><span class="line">+               sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">+               modules: &#123;</span><br><span class="line">+                   getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">+               &#125;,</span><br><span class="line">+           &#125;,</span><br><span class="line">+           <span class="string">'less-loader'</span></span><br><span class="line">+       ),</span><br><span class="line">+   &#125;,</span><br></pre></td></tr></table></figure>
<p>修改后需要执行yarn start重启项目。</p>
<p>然后将原css文件的后缀名修改为less，src/index.js中引入的frame.less，页面已正常解析less。</p>
<h3 id="3-2-3-支持Stylus"><a href="#3-2-3-支持Stylus" class="headerlink" title="3.2.3 支持Stylus"></a>3.2.3 支持Stylus</h3><p>支持Stylus跟Less完全一样，首先安装stylus和stylus-loader：</p>
<p>执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install stylus-loader -D</span><br><span class="line">  or</span><br><span class="line">yarn add stylus-loader -D</span><br></pre></td></tr></table></figure>
<p>安装完成后，按照上一小节介绍的支持less的方法，修改config/webpack.config.js。完成后重启项目，引入stylus文件可以正常解析了。</p>
<p>我个人习惯使用Stylus，因此后续的讲解中使用Stylus。同时，把src/common/下的style目录也更名为stylus。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    ├─ /config</span><br><span class="line">    ├─ /node_modules</span><br><span class="line">    ├─ package.json</span><br><span class="line">    ├─ /public</span><br><span class="line">    ├─ README.md</span><br><span class="line">    ├─ /scripts</span><br><span class="line">    ├─ /src</span><br><span class="line">    |  ├─ /common       &lt;-- 全局公用目录    </span><br><span class="line">    |  |  ├─ /fonts       </span><br><span class="line">    |  |  ├─ /images </span><br><span class="line">    |  |  ├─ /js </span><br><span class="line">M   |  |  └─ /stylus</span><br><span class="line">M   |  |  |  ├─ frame.styl</span><br><span class="line">M   |  |  |  ├─ reset.styl</span><br><span class="line">M   |  |  |  └─ global.styl  </span><br><span class="line">    |  ├─ /components   &lt;-- 公共模块组件目录</span><br><span class="line">    |  ├─ /pages        &lt;-- 页面组件目录</span><br><span class="line">    |  ├─ App.js        &lt;-- 项目主模块</span><br><span class="line">    |  └─ index.js      &lt;-- 项目入口文件</span><br><span class="line">    └─ yarn.lock</span><br></pre></td></tr></table></figure>
<p>最基本的配置搞定了，接下来要开始引入页面（pages）了。页面的切换需要使用路由（Router），请继续阅读下面的章节。</p>
<h2 id="4-路由"><a href="#4-路由" class="headerlink" title="4 路由"></a>4 路由</h2><h3 id="4-1-页面构建"><a href="#4-1-页面构建" class="headerlink" title="4.1 页面构建"></a>4.1 页面构建</h3><p>首先，构建home和login页面。</p>
<p>src/pages/home/index.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./home.styl'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"P-home"</span>&gt;</span><br><span class="line">                &lt;h1&gt;Home page&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure>
<p>src/pages/home/home.styl代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.P-home</span></span><br><span class="line">    <span class="selector-tag">h1</span></span><br><span class="line">        <span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span> 0</span><br><span class="line">        <span class="selector-tag">font-size</span>: 30<span class="selector-tag">px</span></span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span></span><br><span class="line">        <span class="selector-tag">background</span>: <span class="selector-id">#67C23A</span></span><br><span class="line">        <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span></span><br></pre></td></tr></table></figure>
<p>src/pages/login/index.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./login.styl'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"P-login"</span>&gt;</span><br><span class="line">                &lt;h1&gt;Login page&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Login</span><br></pre></td></tr></table></figure>

<p>接下来，我们使用react-router-dom实现路由。</p>
<h3 id="4-2-使用react-router-dom"><a href="#4-2-使用react-router-dom" class="headerlink" title="4.2 使用react-router-dom"></a>4.2 使用react-router-dom</h3><p>执行安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install react-router-dom --save</span><br><span class="line">  or</span><br><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure>
<p>修改src/App.js，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Fragment &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'./pages/login'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./pages/home'</span></span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter, Route, Switch, Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;HashRouter&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/login"</span> component=&#123;Login&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/home"</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">          &lt;Redirect to=&#123;<span class="string">"/home"</span>&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>HashRouter&gt;</span><br><span class="line">    &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure>
<p>App.js引入了Home和Login两个页面级组件。然后使用react-router-dom分别设置了路径。</p>
<p>import的机制是默认寻找index.js，所以每个组件的主文件名设为index.js，在引用的时候就可以省略文件名。</p>
<p>这里说明一下<code>&lt;Route&gt;</code>的属性：</p>
<ul>
<li>path表示路径，这个很好理解。</li>
<li>component表示绑定的组件。</li>
<li>exact表示是否精确匹配。</li>
</ul>
<p>如果没有设置exact，那么：</p>
<ul>
<li>localhost:3000/会显示Home页，</li>
<li>localhost:3000/abc也会显示Home页。</li>
<li>因为匹配到了前面的”/“，路由就会成功。</li>
</ul>
<p>最后的<code>&lt;Redirect&gt;</code>表示以上都没有匹配成功的会，默认跳转的路由。</p>
<h3 id="4-3-路由跳转"><a href="#4-3-路由跳转" class="headerlink" title="4.3 路由跳转"></a>4.3 路由跳转</h3><p>接下来，简单介绍下如果在页面之间进行路由跳转。</p>
<p>在Login页面添加一个用于跳转至Home页的按钮，代码修改如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">'./login.styl'</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">               &lt;div className=<span class="string">"P-login"</span>&gt;</span><br><span class="line">                    &lt;h1&gt;Login page&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">+                   &lt;button onClick=&#123;this.gotoHome.bind(this)&#125;&gt;跳转Home页&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">+       gotoHome() &#123;</span></span><br><span class="line"><span class="regexp">+           this.props.history.push('/</span>home<span class="string">')</span></span><br><span class="line"><span class="string">+       &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    export default Login</span></span><br></pre></td></tr></table></figure>
<p>注意button的onClick里要bind(this)，否则，在gotoHome里的this是undefined。</p>
<p>当然，也可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; &#123;<span class="keyword">this</span>.gotoHome()&#125;&#125;&gt;跳转Home页&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终目的都是要让gotoHome中的this指向正确的作用域。</p>
<h2 id="5-组件引入"><a href="#5-组件引入" class="headerlink" title="5 组件引入"></a>5 组件引入</h2><p>这章节内容也很容易，接触过vue的同学应该也很清楚，为了教程的完整性，还是简单说一下。下面来简单实现一个公用的头部组件。</p>
<h3 id="5-1-创建header组件"><a href="#5-1-创建header组件" class="headerlink" title="5.1 创建header组件"></a>5.1 创建header组件</h3><p>目录结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    |  ├─ /components   &lt;-- 公共模块组件目录</span><br><span class="line">+   |  |  ├─ /header    &lt;-- 公用header组件</span><br><span class="line">+   |  |  |  ├─ index.js </span><br><span class="line">+   |  |  |  └─ header.styl</span><br></pre></td></tr></table></figure>
<p>src/components/header/index.js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./header.styl'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"M-header"</span>&gt;</span><br><span class="line">                Header</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header</span></span><br></pre></td></tr></table></figure>
<p>src/components/header/header.styl代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.M-header</span></span><br><span class="line">    <span class="selector-tag">height</span>: 40<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">line-height</span>: 40<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">font-size</span>: 36<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span></span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-id">#409EFF</span></span><br></pre></td></tr></table></figure>
<h3 id="5-2-引入Header组件"><a href="#5-2-引入Header组件" class="headerlink" title="5.2 引入Header组件"></a>5.2 引入Header组件</h3><p>然后，在Home和Login页面里引入Header组件。</p>
<p>以Home页面为例，修改src/pages/home/index.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line">+   <span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'../../components/header'</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">'./home.styl'</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div className=<span class="string">"P-home"</span>&gt;</span><br><span class="line">+                   <span class="xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line">                    &lt;h1&gt;Home page&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure>
<h3 id="5-3-组件传参"><a href="#5-3-组件传参" class="headerlink" title="5.3 组件传参"></a>5.3 组件传参</h3><p>使用过vue的同学都知道，vue组件有data和props。对应react的是state和props。</p>
<p>react向子组件传参使用以下方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Header </span><br><span class="line">    param1=<span class="string">"abc"</span></span><br><span class="line">    param2=<span class="string">"c"</span></span><br><span class="line">    func1=&#123;()=&gt;&#123;<span class="built_in">console</span>.log(<span class="string">'func1'</span>)&#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>在Header组件内部，直接使用this.props就可以接收。例如：this.props.param1。</p>
<h2 id="6-React-Developer-Tools浏览器插件"><a href="#6-React-Developer-Tools浏览器插件" class="headerlink" title="6 React Developer Tools浏览器插件"></a>6 React Developer Tools浏览器插件</h2><p>为了更方便调试react项目，建议安装chrome插件。</p>
<p>先科学上网，在chrome网上应用店里搜索“React Developer Tools”并安装。</p>
<p>安装完成后，打开chrome调试工具，可以清晰的看到react项目代码结构。</p>
<h2 id="7-Redux及相关插件"><a href="#7-Redux及相关插件" class="headerlink" title="7 Redux及相关插件"></a>7 Redux及相关插件</h2><p>做过vue开发的同学都知道vuex，react对应的工具就是Redux，当然还有一些附属工具，比如react-redux、redux-thunk、immutable。</p>
<h3 id="7-1-安装redux"><a href="#7-1-安装redux" class="headerlink" title="7.1 安装redux"></a>7.1 安装redux</h3><p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install  redux --save</span><br><span class="line">or</span><br><span class="line">yarn add redux</span><br></pre></td></tr></table></figure>
<p>仅安装redux也是可以使用的，但是比较麻烦。redux里更新store里的数据，需要手动订阅(subscribe)更新。可以借助另一个插件（react-redux）提高开发效率。</p>
<h3 id="7-2-安装react-redux"><a href="#7-2-安装react-redux" class="headerlink" title="7.2 安装react-redux"></a>7.2 安装react-redux</h3><p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install  react-redux --save</span><br><span class="line">or</span><br><span class="line">yarn add react-redux</span><br></pre></td></tr></table></figure>

<p>react-redux允许通过connect方法，将store中的数据映射到组件的props，省去了store订阅。原state中读取store的属性改用props读取。</p>
<h3 id="7-3-安装redux-thunk"><a href="#7-3-安装redux-thunk" class="headerlink" title="7.3 安装redux-thunk"></a>7.3 安装redux-thunk</h3><p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install  redux-thunk --save</span><br><span class="line">or</span><br><span class="line">yarn add redux-thunk</span><br></pre></td></tr></table></figure>

<p>redux-thunk允许在actionCreators里返回函函数。这样可以把业务逻辑（例如接口请求）集中写在actionCreator.js，方便复用的同时，可以使组件的主文件更简洁。</p>
<h3 id="7-4-安装浏览器Redux插件"><a href="#7-4-安装浏览器Redux插件" class="headerlink" title="7.4 安装浏览器Redux插件"></a>7.4 安装浏览器Redux插件</h3><p>为了更方便跟踪redux状态，建议安装chrome插件。</p>
<p>先科学上网，在chrome网上应用店里搜索“Redux DevTools”并安装。</p>
<p>安装完成后还不能直接使用，需要在项目代码中进行配置。接下来进行说明。</p>
<h3 id="7-5-创建store"><a href="#7-5-创建store" class="headerlink" title="7.5 创建store"></a>7.5 创建store</h3><p>安装以上各种插件后，可以store用来管理状态数据了。</p>
<p>如果项目比较简单，只有一两个页面，可以只创建一个总store管理整体项目。目录结构参考如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    ├─ /src   </span><br><span class="line">+   |  ├─ /store</span><br><span class="line">+   |  |  ├─ actionCreators.js</span><br><span class="line">+   |  |  ├─ contants.js       &lt;-- 定义方法的常量</span><br><span class="line">+   |  |  ├─ index.js</span><br><span class="line">+   |  |  └─ reducer.js</span><br></pre></td></tr></table></figure>
<p>以下是各文件的代码示例：</p>
<p>src/store/actionCreators.js:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as constans from &#39;.&#x2F;constants&#39;</span><br><span class="line"></span><br><span class="line">export const getData &#x3D; (data) &#x3D;&gt; (&#123;</span><br><span class="line">  type: constans.SET_DATA,</span><br><span class="line">  data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>src/store/contants.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_DATA = <span class="string">'SET_DATA'</span></span><br></pre></td></tr></table></figure>
<p>src/store/index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里让项目支持浏览器插件Redux DevTools</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?</span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;) : compose</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enhancer = composeEnhancers(</span><br><span class="line">  applyMiddleware(thunk)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  enhancer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上是store的核心代码，支持了Redux DevTools。同时，利用redux的集成中间件（applyMiddleware）功能将redux-thunk集成进来，最终创建了store。</p>
</blockquote>
<p>src/store/reducer.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始默认的state</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    myData: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 由于state是引用型，不能直接修改，否则是监测不到state发生变化的。因此需要先复制一份进行修改，然后再返回新的state。</span></span><br><span class="line">    <span class="keyword">let</span> newState = <span class="built_in">Object</span>.assign(&#123;&#125;, state)</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> constants.SET_DATA:</span><br><span class="line">            newState.myData = action.data</span><br><span class="line">            <span class="keyword">return</span> newState</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码，我们在store设置了一个myData。如何更好地解决state修改问题</p>
<h3 id="7-6-复杂项目store分解"><a href="#7-6-复杂项目store分解" class="headerlink" title="7.6 复杂项目store分解"></a>7.6 复杂项目store分解</h3><p>应对更多页面的项目，如果数据都集中放在一个store里，其维护成本非常高。接下来分享下如何将store分解到各个组件中。</p>
<p>一般来说，每个组件有自己的store，再由src下的store作为总集，集成每个组件的store。</p>
<p>以header和login两个组件为例，分别创建组件自己的store。</p>
<p>header的store目录结构如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    |  |  ├─ /store</span><br><span class="line">    |  |  |  ├─ /modules</span><br><span class="line">+   |  |  |  |  ├─ /header</span><br><span class="line">+   |  |  |  |  |  ├─ actionCreators.js</span><br><span class="line">+   |  |  |  |  |  ├─ contants.js      </span><br><span class="line">+   |  |  |  |  |  ├─ index.js</span><br><span class="line">+   |  |  |  |  |  └─ reducer.js</span><br></pre></td></tr></table></figure>
<p>module下store下的index.js代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./actionCreators'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; reducer, actionCreators, constants&#125;</span><br></pre></td></tr></table></figure>
<p>其实就是把组件store下的其他文件集中起来作为统一输出口。</p>
<p>modules下store下的contants.js代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ZONE = <span class="string">'components/header/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_DATA = ZONE + <span class="string">'SET_DATA'</span></span><br></pre></td></tr></table></figure>
<p>ZONE是用来避免与其他组件的contants重名。</p>
<p>同样的方式，在login下进行创建store（不再赘述）</p>
<p>然后修改项目src下的总store，目录结构变动如下：</p>
<p>src/store/index.js重写如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> loginReducer &#125; <span class="keyword">from</span> <span class="string">'./modules/login'</span></span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> headerReducer &#125; <span class="keyword">from</span> <span class="string">'./modules/header'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;</span><br><span class="line">    login: loginReducer,</span><br><span class="line">    header: headerReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>
<p>以上代码的作用就是把login和header的store引入，然后通过combineReducers合并在一起，并分别加上唯一的对象key值。</p>
<p>这样的好处非常明显：</p>
<ul>
<li>避免各组件的store数据互相污染</li>
<li>组件独立维护自己的store，减少维护成本</li>
</ul>
<p>非常建议使用这种方式维护store。</p>
<h3 id="7-7-对接react-redux与store"><a href="#7-7-对接react-redux与store" class="headerlink" title="7.7 对接react-redux与store"></a>7.7 对接react-redux与store</h3><p>为了方便每个组件都能使用store，而不用一遍一遍的引用store。下面来对接react-redux与store。</p>
<p>修改src/index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line">    <span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line">    <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line">+   <span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line">+   <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">'./common/style/frame.styl'</span></span><br><span class="line"></span><br><span class="line">+   <span class="keyword">const</span> Apps = (</span><br><span class="line">+       <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">+           <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">+       <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">+   )</span><br><span class="line"></span><br><span class="line">M   ReactDOM.render(Apps, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure>
<p>以上代码就是用react-redux提供的Provider，把store传给了整个App。</p>
<p>在需要使用store的组件中，要使用react-redux提供的connect方法对组件进行包装。</p>
<p>以login为例，修改src/pages/login/index.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line">    <span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'../../components/header'</span></span><br><span class="line">+   <span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line">+   <span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'./store/actionCreators'</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">'./login.styl'</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div className=<span class="string">"P-login"</span>&gt;</span><br><span class="line">                    &lt;Header /&gt;</span><br><span class="line">                    &lt;h1&gt;Login page&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">+                   &lt;p&gt;login: myData = &#123;this.props.myData&#125;&lt;/</span>p&gt;</span><br><span class="line">+                   <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> &#123;this.props.getData('123456')&#125;&#125;&gt;更改login的myData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.gotoHome.bind(<span class="keyword">this</span>)&#125;&gt;跳转Home页&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gotoHome() &#123;</span><br><span class="line">            <span class="keyword">this</span>.props.history.push(<span class="string">'/home'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">+   <span class="comment">// 把store中的数据映射到组件的props</span></span><br><span class="line">+   <span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">+       myData: state.getIn([<span class="string">'login'</span>, <span class="string">'myData'</span>]),</span><br><span class="line">+   &#125;)</span><br><span class="line"></span><br><span class="line">+   <span class="comment">// 把store的Dispatch映射到组件的props</span></span><br><span class="line">+   <span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (&#123;</span><br><span class="line">+       getData(data) &#123;</span><br><span class="line">+           <span class="keyword">const</span> action = actionCreators.getData(data)</span><br><span class="line">+           dispatch(action)</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;)</span><br><span class="line"></span><br><span class="line">M   <span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Login)</span><br></pre></td></tr></table></figure>
<p>最大的变化就是代码最后一行，被connect方法包装了。</p>
<p>然后把store里的state和dispatch都映射到了组件的props。这样可以直接通过props进行访问了，store中数据的变化会直接改变props从而触发组件的视图更新。</p>
<h2 id="8-Mock-js安装与使用"><a href="#8-Mock-js安装与使用" class="headerlink" title="8 Mock.js安装与使用"></a>8 Mock.js安装与使用</h2><p>在开发过程中，为了方便前端独自调试接口，经常使用Mock.js拦截Ajax请求，并返回预置好的数据。本小节介绍下如何在react项目中使用Mock.js。</p>
<p>执行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install mockjs -D</span><br><span class="line">or</span><br><span class="line">yarn add mockjs -D</span><br></pre></td></tr></table></figure>

<p>在src下新建mock.js，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> domain = <span class="string">'/api/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟getData接口</span></span><br><span class="line">Mock.mock(domain + <span class="string">'getData'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;</span><br><span class="line">      code: <span class="number">200</span>,</span><br><span class="line">      message: <span class="string">'OK'</span>,</span><br><span class="line">      data: <span class="string">'test'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后在src/index.js中引入mock.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line">    <span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line">    <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line">    <span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line">    <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">+   <span class="keyword">import</span> <span class="string">'./mock'</span></span><br><span class="line">    <span class="keyword">import</span> <span class="string">'./common/style/frame.styl'</span></span><br><span class="line"></span><br><span class="line">    ...（略）</span><br></pre></td></tr></table></figure>
<p>如此简单。这样，在项目中请求/api/getData的时候，就会被Mock.js拦截，并返回mock.js中写好的数据</p>
<h2 id="9-解决本地开发跨域问题"><a href="#9-解决本地开发跨域问题" class="headerlink" title="9 解决本地开发跨域问题"></a>9 解决本地开发跨域问题</h2><p>在react开发环境中，默认启动的是3000端口，而后端API服务可能在本机的80端口，这样在ajax请求的时候会出现跨域问题。可以借助http-proxy-middleware工具实现反向代理。<br>执行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install http-proxy-middleware -D</span><br><span class="line">or</span><br><span class="line">yarn add http-proxy-middleware -D</span><br></pre></td></tr></table></figure>
<p>在src下创建setupProxy.js，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(</span><br><span class="line">        <span class="string">'^/api'</span>,</span><br><span class="line">        proxy(&#123;</span><br><span class="line">            target: <span class="string">'http://localhost:5000'</span>,</span><br><span class="line">            changeOrigin: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： 你无需在任何位置导入此文件。 它在启动开发服务器时会自动注册。</p>
</blockquote>
<blockquote>
<p>注意： 此文件仅支持 Node 的 JavaScript 语法。 请务必仅使用支持的语言特性（即不支持 Flow ，ES Modules 等）</p>
</blockquote>
<h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p>CSS Modules 的做法就是通过配置将.css文件进行编译，编译后在每个用到css的组件中的css类名都是独一无二的，从而实现CSS的局部作用域。</p>
<p>create-react-app自从2.0.版本就已经开始支持CSS Modules了</p>
<h3 id="局部样式"><a href="#局部样式" class="headerlink" title="局部样式"></a>局部样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命名规则: xxx.module.css     </span><br><span class="line"></span><br><span class="line">引入方式 <span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'xxx.module.css'</span></span><br><span class="line"></span><br><span class="line">用法：&lt;div className=&#123;xxx.styleName&#125;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命名规则: xxx.css   </span><br><span class="line"></span><br><span class="line">引入方式 <span class="keyword">import</span> ‘xxx.css’</span><br><span class="line"></span><br><span class="line">用法：&lt;div className=<span class="string">'styleName'</span>&gt;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### 案例：</span></span><br><span class="line"><span class="string">`</span>person.module.css<span class="string">`</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> css</span><br><span class="line"></span><br><span class="line">.person&#123;</span><br><span class="line">    width: <span class="number">60</span>%;</span><br><span class="line">    margin:<span class="number">16</span>px auto;</span><br><span class="line">    border: 1px solid #eee;</span><br><span class="line">    box-shadow: 0 2px 3px #ccc;</span><br><span class="line">    padding:<span class="number">16</span>px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>person.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部样式</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Person.module.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../App.css'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;styles.person&#125;&gt;</span><br><span class="line">        &lt;p className=<span class="string">'fz'</span>&gt;person:Hello world&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt; </span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>redux</tag>
        <tag>react-router</tag>
      </tags>
  </entry>
  <entry>
    <title>js导出Excel表格的方法</title>
    <url>/2020/03/30/js%E5%AF%BC%E5%87%BAExcel%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>js导出Excel的方法</p>
<ul>
<li>利用html的table表格的格式书写想要的excel格式</li>
<li>获取table的内容并组装成一个xls格式的字符串</li>
<li>利用Blob对象生成一个xls格式的文件</li>
<li>利用a标签的download属性创建文件名，并下载到本地</li>
</ul>
<a id="more"></a>

<p><strong>table表格内容</strong></p>
<p>先写一个正常的html表格</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">  &lt;meta charset="UTF-8"&gt;</span><br><span class="line">  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style media="screen"&gt;</span><br><span class="line">    <span class="selector-class">.tableA</span> &#123;</span><br><span class="line">      <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.tableA</span> <span class="selector-class">.title</span> <span class="selector-tag">th</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">      <span class="attribute">font-family</span>: <span class="string">'微软雅黑'</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.tableA</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#efefef</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.tableA</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.tableA</span> <span class="selector-class">.footer</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;table bordercolor="black" class="tableA"&gt;</span><br><span class="line">    &lt;tr class="title"&gt;</span><br><span class="line">      &lt;th colspan="4"&gt;学生信息&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;th&gt;名字&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;班级&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;td&gt;小明&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;男&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;19&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;1班&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;td&gt;小黄&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;男&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;20&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;2班&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;td&gt;老王&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;男&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;29&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;3班&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr class="footer"&gt;</span><br><span class="line">      &lt;td colspan="4"&gt;总人数：3人&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>获取table的内容装成一个xls格式的字符串</strong><br>接下来就是获取table的html内容了，里面包括标签的class或id等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oHtml = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'tableA'</span>)[<span class="number">0</span>].outerHTML;</span><br></pre></td></tr></table></figure>

<p>将table和style组成一个html，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> excelHtml = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">      &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset='utf-8' /&gt;</span></span><br><span class="line"><span class="string">        &lt;style&gt;</span></span><br><span class="line"><span class="string">          .tableA &#123;</span></span><br><span class="line"><span class="string">            border-collapse: collapse;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          .tableA .title th&#123;</span></span><br><span class="line"><span class="string">            height: 50px;</span></span><br><span class="line"><span class="string">            font-size: 24px;</span></span><br><span class="line"><span class="string">            font-family: '微软雅黑';</span></span><br><span class="line"><span class="string">            font-weight: 700;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          .tableA tr th &#123;</span></span><br><span class="line"><span class="string">            border: 1px #000 solid;</span></span><br><span class="line"><span class="string">            height: 40px;</span></span><br><span class="line"><span class="string">            background: #efefef;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          .tableA tr td &#123;</span></span><br><span class="line"><span class="string">            padding: 0 40px;</span></span><br><span class="line"><span class="string">            border: 1px #000 solid;</span></span><br><span class="line"><span class="string">            height: 40px;</span></span><br><span class="line"><span class="string">			text-align: center;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          .tableA .footer td &#123;</span></span><br><span class="line"><span class="string">            font-size: 20px;</span></span><br><span class="line"><span class="string">            font-weight: 700;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &lt;/style&gt;</span></span><br><span class="line"><span class="string">      &lt;/head&gt;</span></span><br><span class="line"><span class="string">      &lt;body&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;oHtml&#125;</span></span></span><br><span class="line"><span class="string">      &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br></pre></td></tr></table></figure>

<p><strong>生成xls文件并通过a标签下载到本地</strong><br>前面的准备工作就差不多了，接下来就是将字符串转成xls文件了，这里主要利用Blob对象和<code>URL.createObjectURL()</code> 方法</p>
<ul>
<li><p>Blob对象表示不可变的类似文件对象的原始数据。Blob表示不一定是JavaScript原生形式的数据。 File 接口基于Blob，继承了 blob的功能并将其扩展使其支持用户系统上的文件。</p>
</li>
<li><p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。</p>
</li>
</ul>
<p>Blob 构造函数用法举例（生成一个json文件）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = &#123;<span class="attr">hello</span>: <span class="string">"world"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">JSON</span>.stringify(debug, <span class="literal">null</span>, <span class="number">2</span>)],&#123;<span class="attr">type</span> : <span class="string">'application/json'</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>同样道理利用第二个步骤的字符串生成Excel</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> excelBlob = <span class="keyword">new</span> Blob([excelHtml], &#123;<span class="attr">type</span>: <span class="string">'application/vnd.ms-excel'</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>最后一步就是通过a标签下载到本地了，下载前可以利用a标签的download属性命名</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个a标签</span></span><br><span class="line"><span class="keyword">var</span> oA = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用URL.createObjectURL()方法为a元素生成blob URL</span></span><br><span class="line">oA.href = URL.createObjectURL(excelBlob);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给文件命名</span></span><br><span class="line">oA.download = <span class="string">'学生名单.xls'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟点击</span></span><br><span class="line">oA.click();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps:因为权限问题，生成的excel的格式只能为.xls而且每次打开都会弹窗询问。所以建议打开后另存一份excel</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>前端</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>reactjs中使用css的方式</title>
    <url>/2020/03/29/reactjs%E4%B8%AD%E4%BD%BF%E7%94%A8css%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>由于 React的JSX语法，能在React中使用样式的方式有很多，本文主要介绍在React中经常使用CSS样式的五种方法：</p>
<ul>
<li>1、行内样式</li>
<li>2、声明样式</li>
<li>3、引入样式</li>
<li>4、CSS Modules模块化</li>
<li>5、Styled-component<a id="more"></a>
<h2 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h2>行内样式是一种最基本的写法，也就是我们最开始学HTML时写的内联样式那样，在项目中可能会比较少用到<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">background</span>: <span class="string">'#eee'</span>, <span class="attr">width</span>: <span class="string">'200px'</span>, <span class="attr">height</span>: <span class="string">'200px'</span>&#125;&#125;&gt;</span><br><span class="line">        &lt;p style= &#123;&#123;<span class="attr">color</span>:<span class="string">'red'</span>, <span class="attr">fontSize</span>:<span class="string">'40px'</span>&#125;&#125;&gt;行内样式&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="声明样式"><a href="#声明样式" class="headerlink" title="声明样式"></a>声明样式</h2>声明样式其实是行内样式的一种改进写法，在render函数外部创建style对象，然后传递给组件，让css与标签分离<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"> <span class="keyword">const</span> style1=&#123;    </span><br><span class="line">      background:<span class="string">'#eee'</span>,</span><br><span class="line">      width:<span class="string">'200px'</span>,</span><br><span class="line">      height:<span class="string">'200px'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> style2=&#123;    </span><br><span class="line">      color:<span class="string">'red'</span>,</span><br><span class="line">      fontSize:<span class="string">'40px'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;style1&#125;&gt;</span><br><span class="line">        &lt;p style= &#123;style2&#125;&gt;行内样式&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="引入样式"><a href="#引入样式" class="headerlink" title="引入样式"></a>引入样式</h2><p>引入样式就是将CSS文件写下外部，在引入jsx使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* person.css */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.person</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">16px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Person.css'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//....  </span></span><br><span class="line">  render() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">'person'</span>&gt;</span><br><span class="line">        &lt;p&gt;person:Hello world&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt; </span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p> <strong>注意</strong></p>
<blockquote>
<p>因为CSS的规则都是全局的，任何一个组件的样式规则，都对整个页面有效，这可能会导致大量的冲突。</p>
</blockquote>
<h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p>CSS Modules 的做法就是通过配置将.css文件进行编译，编译后在每个用到css的组件中的css类名都是独一无二的，从而实现CSS的局部作用域。</p>
<p>create-react-app自从2.0.版本就已经开始支持CSS Modules了</p>
<h3 id="局部样式"><a href="#局部样式" class="headerlink" title="局部样式"></a>局部样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命名规则: xxx.module.css     </span><br><span class="line"></span><br><span class="line">引入方式 <span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'xxx.module.css'</span></span><br><span class="line"></span><br><span class="line">用法：&lt;div className=&#123;xxx.styleName&#125;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命名规则: xxx.css   </span><br><span class="line"></span><br><span class="line">引入方式 <span class="keyword">import</span> ‘xxx.css’</span><br><span class="line"></span><br><span class="line">用法：&lt;div className=<span class="string">'styleName'</span>&gt;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### 案例：</span></span><br><span class="line"><span class="string">`</span>person.module.css<span class="string">`</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> css</span><br><span class="line"></span><br><span class="line">.person&#123;</span><br><span class="line">    width: <span class="number">60</span>%;</span><br><span class="line">    margin:<span class="number">16</span>px auto;</span><br><span class="line">    border: 1px solid #eee;</span><br><span class="line">    box-shadow: 0 2px 3px #ccc;</span><br><span class="line">    padding:<span class="number">16</span>px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>person.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//局部样式</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Person.module.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../App.css'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;styles.person&#125;&gt;</span><br><span class="line">        &lt;p className=<span class="string">'fz'</span>&gt;person:Hello world&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt; </span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>

<h2 id="Styled-Components"><a href="#Styled-Components" class="headerlink" title="Styled Components"></a>Styled Components</h2><p>随着组件化时代的来临，前端应用开始从组件的层面对 CSS 进行封装：也就是通过 JS 来声明、抽象样式从而提高组件的可维护性；在组件加载时动态的加载样式，动态生成类名从而避免全局污染。Styled Component以组件的形式来声明样式，让样式也成为组件从而分离逻辑组件与展示组件</p>
<p>Styled Component是react的一个第三方库，是CSS in JS 的优秀实践和代表，将CSS写在JS中，可以实现常规CSS所不好处理的逻辑复杂、函数方法、复用、避免干扰。样式书写将直接依附在JSX上面，HTML、CSS、JS三者再次内聚，同时也实现H5的语义化标签表现形式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save styled-components</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Title 组件,它将渲染一个附加了样式的 &lt;h1&gt; 标签</span></span><br><span class="line"><span class="keyword">const</span> Title = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 1.5em;</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">  color: palevioletred;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Wrapper 组件,它将渲染一个附加了样式的 &lt;section&gt; 标签</span></span><br><span class="line"><span class="keyword">const</span> Wrapper = styled.section<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 4em;</span></span><br><span class="line"><span class="string">  background: papayawhip;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 就像使用常规 React 组件一样使用 Title 和 Wrapper </span></span><br><span class="line">render(</span><br><span class="line">  &lt;Wrapper&gt;</span><br><span class="line">    &lt;Title&gt;</span><br><span class="line">      Hello World!</span><br><span class="line">    &lt;<span class="regexp">/Title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Wrapper&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>npm入门使用指南</title>
    <url>/2020/03/29/npm%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"><span class="number">5.5</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下：</p>
<p>如果是 Window 系统使用以下命令即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure>

<h3 id="使用-npm-命令安装模块"><a href="#使用-npm-命令安装模块" class="headerlink" title="使用 npm 命令安装模块"></a><strong>使用 npm 命令安装模块</strong></h3><p>npm 安装 Node.js 模块语法格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br></pre></td></tr></table></figure>

<p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require(‘express’) 的方式就好，无需指定第三方包路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a><strong>全局安装与本地安装</strong></h3><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已<br>比如:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">npm install express      # 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>

<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a><strong>本地安装</strong></h3><ol>
<li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li>
<li>可以通过 require() 来引入本地安装的包。</li>
</ol>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a><strong>全局安装</strong></h3><ol>
<li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li>
<li>可以直接在命令行里使用。</li>
</ol>
<h3 id="查看安装信息"><a href="#查看安装信息" class="headerlink" title="查看安装信息"></a><strong>查看安装信息</strong></h3><p>你可以使用以下命令来查看所有全局安装的模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ npm list -g</span><br><span class="line"></span><br><span class="line">├─┬ cnpm@<span class="number">4.3</span><span class="number">.2</span></span><br><span class="line">│ ├── auto-correct@<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">│ ├── bagpipe@<span class="number">0.3</span><span class="number">.5</span></span><br><span class="line">│ ├── colors@<span class="number">1.1</span><span class="number">.2</span></span><br><span class="line">│ ├─┬ commander@<span class="number">2.9</span><span class="number">.0</span></span><br><span class="line">│ │ └── graceful-readlink@<span class="number">1.0</span><span class="number">.1</span></span><br><span class="line">│ ├─┬ cross-spawn@<span class="number">0.2</span><span class="number">.9</span></span><br><span class="line">│ │ └── lru-cache@<span class="number">2.7</span><span class="number">.3</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<h3 id="使用-package-json"><a href="#使用-package-json" class="headerlink" title="使用 package.json"></a><strong>使用 package.json</strong></h3><p>每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。<br>直接的说：就是管理你本地安装的npm包 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">"Hello World"</span>,</span><br><span class="line">	<span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">	<span class="string">"author"</span>: <span class="string">"张三"</span>,</span><br><span class="line">	<span class="string">"description"</span>: <span class="string">"第一个node.js程序"</span>,</span><br><span class="line">	<span class="string">"keywords"</span>:[<span class="string">"node.js"</span>,<span class="string">"javascript"</span>],</span><br><span class="line">	<span class="string">"repository"</span>: &#123;</span><br><span class="line">		<span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">		<span class="string">"url"</span>: <span class="string">"https://path/to/url"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"license"</span>:<span class="string">"MIT"</span>,</span><br><span class="line">	<span class="string">"engines"</span>: &#123;<span class="string">"node"</span>: <span class="string">"0.10.x"</span>&#125;,</span><br><span class="line">	<span class="string">"bugs"</span>:&#123;<span class="string">"url"</span>:<span class="string">"http://path/to/bug"</span>,<span class="string">"email"</span>:<span class="string">"bug@example.com"</span>&#125;,</span><br><span class="line">	<span class="string">"contributors"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"email"</span>:<span class="string">"lisi@example.com"</span>&#125;],</span><br><span class="line">	<span class="string">"scripts"</span>: &#123;</span><br><span class="line">		<span class="string">"start"</span>: <span class="string">"node index.js"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"dependencies"</span>: &#123;</span><br><span class="line">		<span class="string">"express"</span>: <span class="string">"latest"</span>,</span><br><span class="line">		<span class="string">"mongoose"</span>: <span class="string">"~3.8.3"</span>,</span><br><span class="line">		<span class="string">"handlebars-runtime"</span>: <span class="string">"~1.0.12"</span>,</span><br><span class="line">		<span class="string">"express3-handlebars"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line">		<span class="string">"MD5"</span>: <span class="string">"~1.2.0"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">		<span class="string">"bower"</span>: <span class="string">"~1.2.8"</span>,</span><br><span class="line">		<span class="string">"grunt"</span>: <span class="string">"~0.4.1"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-concat"</span>: <span class="string">"~0.3.0"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-jshint"</span>: <span class="string">"~0.7.2"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-uglify"</span>: <span class="string">"~0.2.7"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-clean"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line">		<span class="string">"browserify"</span>: <span class="string">"2.36.1"</span>,</span><br><span class="line">		<span class="string">"grunt-browserify"</span>: <span class="string">"~1.3.0"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Package-json-属性说明"><a href="#Package-json-属性说明" class="headerlink" title="Package.json 属性说明"></a><strong>Package.json 属性说明</strong></h3><ul>
<li><p>name - 包名。</p>
</li>
<li><p>version - 包的版本号。</p>
</li>
<li><p>description - 包的描述。</p>
</li>
<li><p>homepage - 包的官网 url 。</p>
</li>
<li><p>author - 包的作者姓名。</p>
</li>
<li><p>contributors - 包的其他贡献者姓名。</p>
</li>
<li><p>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</p>
</li>
<li><p>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</p>
</li>
<li><p>main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</p>
</li>
<li><p>keywords - 关键字</p>
</li>
</ul>
<p><strong>详细介绍参考</strong> <a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></p>
<h3 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a><strong>卸载模块</strong></h3><p>我们可以使用以下命令来卸载 Node.js 模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm uninstall express</span><br></pre></td></tr></table></figure>
<h3 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a><strong>更新模块</strong></h3><p>我们可以使用以下命令更新模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm update express</span><br></pre></td></tr></table></figure>
<h3 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a><strong>搜索模块</strong></h3><p>使用以下来搜索模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm search express</span><br></pre></td></tr></table></figure>
<h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a><strong>创建模块</strong></h3><p>创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See <span class="string">`npm help json`</span> <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use <span class="string">`npm install &lt;pkg&gt; --save`</span> afterwards to install a package and</span><br><span class="line">save it <span class="keyword">as</span> a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">name: (node_modules) test                   # 模块名</span><br><span class="line">version: (<span class="number">1.0</span><span class="number">.0</span>) </span><br><span class="line">description: Node.js 测试模块(www.test.com)  # 描述</span><br><span class="line">entry point: (index.js) </span><br><span class="line">test command: make test</span><br><span class="line">git repository: https:<span class="comment">//github.com/test/runoob.git  # Github 地址</span></span><br><span class="line">keywords: </span><br><span class="line">author: </span><br><span class="line">license: (ISC) </span><br><span class="line">About to write to ……/node_modules/package.json:      # 生成地址</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"learn"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Node.js 测试模块"</span>,</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is <span class="keyword">this</span> ok? (yes) yes</span><br></pre></td></tr></table></figure>
<p>以上的信息，你需要根据你自己的情况输入。在最后输入 “yes” 后会生成 package.json 文件。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install [-g] 本地或全局安装模块</span><br><span class="line">npm uninstall [-g] 本地或全局卸载模块</span><br><span class="line">npm update 更新模块</span><br><span class="line">npm ls 查看安装的模块</span><br><span class="line">npm list 列出已安装模块</span><br><span class="line">npm show  显示模块详情</span><br><span class="line">npm info 查看模块的详细信息</span><br><span class="line">npm search 搜索模块</span><br><span class="line">npm publish 发布模块</span><br><span class="line">npm unpublish 删除已发布的模块</span><br><span class="line">npm -v 或 npm version显示版本信息</span><br><span class="line">npm view npm versions 列出npm 的所有有效版本</span><br><span class="line">npm install -g npm@<span class="number">2.14</span><span class="number">.14</span> /npm update -g npm@<span class="number">2.14</span><span class="number">.14</span>  安装指定的npm版本</span><br><span class="line">npm init 引导创建一个package.json文件，包括名称、版本、作者这些信息等</span><br><span class="line">npm outdated  #检查模块是否已经过时</span><br><span class="line">npm root  [-g] 查看包的安装路径，输出 node_modules的路径，</span><br><span class="line">npm help 查看某条命令的详细帮助 例如输入npm help install</span><br><span class="line">npm config 管理npm的配置路径</span><br></pre></td></tr></table></figure>

<h3 id="使用淘宝-NPM-镜像"><a href="#使用淘宝-NPM-镜像" class="headerlink" title="使用淘宝 NPM 镜像"></a><strong>使用淘宝 NPM 镜像</strong></h3><p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p>
<p>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>
<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">&#96;&#96;&#96; javascript</span><br><span class="line">这样就可以使用 cnpm 命令来安装模块了：</span><br></pre></td></tr></table></figure>
<p> cnpm install [name]</p>
<pre><code></code></pre>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>nodeJs入门系列</title>
    <url>/2020/03/29/nodeJs%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="01-介绍-安装"><a href="#01-介绍-安装" class="headerlink" title="01 介绍/安装/"></a>01 介绍/安装/</h2><h3 id="node-js-介绍"><a href="#node-js-介绍" class="headerlink" title="node.js 介绍"></a><strong>node.js 介绍</strong></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>
<a id="more"></a>

<h3 id="Node-js优点"><a href="#Node-js优点" class="headerlink" title="Node.js优点"></a><strong>Node.js优点</strong></h3><p>1、采用事件驱动、异步编程，为网络服务而设计。其实Javascript的匿名函数和闭包特性非常适合事件驱动、异步编程。而且JavaScript也简单易学，很多前端设计人员可以很快上手做后端设计。<br>2、Node.js非阻塞模式的IO处理给Node.js带来在相对低系统资源耗用下的高性能与出众的负载能力，非常适合用作依赖其它IO资源的中间层服务。<br>3、Node.js轻量高效，可以认为是数据密集型分布式部署环境下的实时应用系统的完美解决方案。</p>
<p>Node非常适合如下情况：<br>在响应客户端之前，您预计可能有很高的流量，但所需的服务器端逻辑和处理不一定很多。</p>
<h3 id="Node-js缺点"><a href="#Node-js缺点" class="headerlink" title="Node.js缺点"></a><strong>Node.js缺点</strong></h3><p>1、可靠性低<br>2、单进程，单线程，只支持单核CPU，不能充分的利用多核CPU服务器。一旦这个进程崩掉，那么整个web服务就崩掉了。不过以上缺点可以可以通过代码的健壮性来弥补。</p>
<h3 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a><strong>Node.js 安装</strong></h3><p>中文官网地址：<br><a href="http://nodejs.cn/download/，进入下载页面选择对应的版本安装即可。" target="_blank" rel="noopener">http://nodejs.cn/download/，进入下载页面选择对应的版本安装即可。</a></p>
<p>更详细的安装教程，包含各类操作系统：<br><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-install-setup.html</a></p>
<h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a><strong>检查是否安装成功</strong></h3><p>命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>返回node.js 版本号即代表安装成功。</p>
<h3 id="在命令行中实现hello-world"><a href="#在命令行中实现hello-world" class="headerlink" title="在命令行中实现hello world"></a><strong>在命令行中实现<code>hello world</code></strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;node \\此处是一个回车,既进入node交互环境</span><br><span class="line">&gt; <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">输出：hello world</span><br></pre></td></tr></table></figure>
<h3 id="创建一个js文件并执行它-t-js"><a href="#创建一个js文件并执行它-t-js" class="headerlink" title="创建一个js文件并执行它(t.js)"></a><strong>创建一个js文件并执行它(t.js)</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//t.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">D:\&gt;cd node.js</span><br><span class="line">D:\node.js&gt;node t.js</span><br><span class="line">输出：hello world</span><br></pre></td></tr></table></figure>

<h3 id="安装nodemon监控代码调试"><a href="#安装nodemon监控代码调试" class="headerlink" title="安装nodemon监控代码调试"></a>安装nodemon监控代码调试</h3><p>在开发nodejs程序，调试的时候，无论你修改了代码的哪一部分，都需要重启服务才能生效。这是因为 Node.js 只有在第一次引用到某部份时才会去解析脚本文件，以后都会直接访问内存，避免重复载入。。Node.js的这种设计虽然有利于提高性能，却不利于开发调试，因为我们在开发过程中总是希望修改后立即看到效果，而不是每次都要终止进程并重启。nodemon 可以帮助你实现这个功能，它会监视你对代码的改动，并自动重启 Node.js。</p>
<p>nodemon的安装也很简单：</p>
<p>直接用npm安装既可，键入命令: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm -g install nodemon</span><br></pre></td></tr></table></figure>

<p>nodemon 来启动服务了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nodemon index.js</span><br></pre></td></tr></table></figure>

<p>现在，代码发生改变，nodemon会自动重启 Node.js；</p>
<h3 id="服务端原理、语言倾诉对象"><a href="#服务端原理、语言倾诉对象" class="headerlink" title="服务端原理、语言倾诉对象"></a><strong>服务端原理、语言倾诉对象</strong></h3><p>使用node.js作为后端的项目，客户访问过程：<br>客户端发起请求 -&gt; node.js 服务器接到请求并运算、解析 -&gt; 返回请求结果。<br>我们所编写代码语言的倾诉对象就是 node.js 服务器端。</p>
<h2 id="02-NodeJs-创建第一个应用"><a href="#02-NodeJs-创建第一个应用" class="headerlink" title="02 NodeJs 创建第一个应用"></a>02 NodeJs 创建第一个应用</h2><p>在我们创建 Node.js 第一个 “Hello, World!” 应用前，让我们先了解下 Node.js 应用是由哪几部分组成的：</p>
<ol>
<li>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。</li>
<li>创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</li>
<li>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</li>
</ol>
<h3 id="创建-Node-js-应用"><a href="#创建-Node-js-应用" class="headerlink" title="创建 Node.js 应用"></a>创建 Node.js 应用</h3><p><strong>步骤一、引入 required 模块</strong><br>我们使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>); <span class="comment">//使用 require函数获取 http模块</span></span><br></pre></td></tr></table></figure>
<p><strong>步骤二、创建服务器</strong><br>接下来我们使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。</p>
<p>实例如下，在你项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 require函数获取 http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//不处理favicon.ico</span></span><br><span class="line">    <span class="keyword">if</span>(request.url == <span class="string">"/favicon.ico"</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/html,解决中文乱码问题</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html;  charset=utf-8'</span>&#125;);</span><br><span class="line">    <span class="comment">//设置编码类型</span></span><br><span class="line">    response.write(<span class="string">'&lt;head&gt;&lt;meta charset="utf-8"/&gt;&lt;/head&gt;'</span>);  </span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.write(<span class="string">"中文"</span>);</span><br><span class="line">    response.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码我们完成了一个可以工作的 HTTP 服务器。<br>使用 node 命令执行以上的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node server.js</span><br><span class="line">Server running at http:<span class="comment">//127.0.0.1:8888/</span></span><br></pre></td></tr></table></figure>

<p>接下来，打开浏览器访问 <a href="http://127.0.0.1:8888/，你会看到一个写着" target="_blank" rel="noopener">http://127.0.0.1:8888/，你会看到一个写着</a> “中文 Hello World”的网页。</p>
<h2 id="03-NPM-使用介绍"><a href="#03-NPM-使用介绍" class="headerlink" title="03 NPM 使用介绍"></a>03 NPM 使用介绍</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"><span class="number">5.5</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下：</p>
<p>如果是 Window 系统使用以下命令即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure>

<h3 id="使用-npm-命令安装模块"><a href="#使用-npm-命令安装模块" class="headerlink" title="使用 npm 命令安装模块"></a><strong>使用 npm 命令安装模块</strong></h3><p>npm 安装 Node.js 模块语法格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br></pre></td></tr></table></figure>

<p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>

<p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require(‘express’) 的方式就好，无需指定第三方包路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a><strong>全局安装与本地安装</strong></h3><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已<br>比如:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">npm install express      # 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>

<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a><strong>本地安装</strong></h3><ol>
<li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li>
<li>可以通过 require() 来引入本地安装的包。</li>
</ol>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a><strong>全局安装</strong></h3><ol>
<li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li>
<li>可以直接在命令行里使用。</li>
</ol>
<h3 id="查看安装信息"><a href="#查看安装信息" class="headerlink" title="查看安装信息"></a><strong>查看安装信息</strong></h3><p>你可以使用以下命令来查看所有全局安装的模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ npm list -g</span><br><span class="line"></span><br><span class="line">├─┬ cnpm@<span class="number">4.3</span><span class="number">.2</span></span><br><span class="line">│ ├── auto-correct@<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">│ ├── bagpipe@<span class="number">0.3</span><span class="number">.5</span></span><br><span class="line">│ ├── colors@<span class="number">1.1</span><span class="number">.2</span></span><br><span class="line">│ ├─┬ commander@<span class="number">2.9</span><span class="number">.0</span></span><br><span class="line">│ │ └── graceful-readlink@<span class="number">1.0</span><span class="number">.1</span></span><br><span class="line">│ ├─┬ cross-spawn@<span class="number">0.2</span><span class="number">.9</span></span><br><span class="line">│ │ └── lru-cache@<span class="number">2.7</span><span class="number">.3</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<h3 id="使用-package-json"><a href="#使用-package-json" class="headerlink" title="使用 package.json"></a><strong>使用 package.json</strong></h3><p>每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。<br>直接的说：就是管理你本地安装的npm包 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">"Hello World"</span>,</span><br><span class="line">	<span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">	<span class="string">"author"</span>: <span class="string">"张三"</span>,</span><br><span class="line">	<span class="string">"description"</span>: <span class="string">"第一个node.js程序"</span>,</span><br><span class="line">	<span class="string">"keywords"</span>:[<span class="string">"node.js"</span>,<span class="string">"javascript"</span>],</span><br><span class="line">	<span class="string">"repository"</span>: &#123;</span><br><span class="line">		<span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">		<span class="string">"url"</span>: <span class="string">"https://path/to/url"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"license"</span>:<span class="string">"MIT"</span>,</span><br><span class="line">	<span class="string">"engines"</span>: &#123;<span class="string">"node"</span>: <span class="string">"0.10.x"</span>&#125;,</span><br><span class="line">	<span class="string">"bugs"</span>:&#123;<span class="string">"url"</span>:<span class="string">"http://path/to/bug"</span>,<span class="string">"email"</span>:<span class="string">"bug@example.com"</span>&#125;,</span><br><span class="line">	<span class="string">"contributors"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"email"</span>:<span class="string">"lisi@example.com"</span>&#125;],</span><br><span class="line">	<span class="string">"scripts"</span>: &#123;</span><br><span class="line">		<span class="string">"start"</span>: <span class="string">"node index.js"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"dependencies"</span>: &#123;</span><br><span class="line">		<span class="string">"express"</span>: <span class="string">"latest"</span>,</span><br><span class="line">		<span class="string">"mongoose"</span>: <span class="string">"~3.8.3"</span>,</span><br><span class="line">		<span class="string">"handlebars-runtime"</span>: <span class="string">"~1.0.12"</span>,</span><br><span class="line">		<span class="string">"express3-handlebars"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line">		<span class="string">"MD5"</span>: <span class="string">"~1.2.0"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">		<span class="string">"bower"</span>: <span class="string">"~1.2.8"</span>,</span><br><span class="line">		<span class="string">"grunt"</span>: <span class="string">"~0.4.1"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-concat"</span>: <span class="string">"~0.3.0"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-jshint"</span>: <span class="string">"~0.7.2"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-uglify"</span>: <span class="string">"~0.2.7"</span>,</span><br><span class="line">		<span class="string">"grunt-contrib-clean"</span>: <span class="string">"~0.5.0"</span>,</span><br><span class="line">		<span class="string">"browserify"</span>: <span class="string">"2.36.1"</span>,</span><br><span class="line">		<span class="string">"grunt-browserify"</span>: <span class="string">"~1.3.0"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Package-json-属性说明"><a href="#Package-json-属性说明" class="headerlink" title="Package.json 属性说明"></a><strong>Package.json 属性说明</strong></h3><ul>
<li><p>name - 包名。</p>
</li>
<li><p>version - 包的版本号。</p>
</li>
<li><p>description - 包的描述。</p>
</li>
<li><p>homepage - 包的官网 url 。</p>
</li>
<li><p>author - 包的作者姓名。</p>
</li>
<li><p>contributors - 包的其他贡献者姓名。</p>
</li>
<li><p>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</p>
</li>
<li><p>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</p>
</li>
<li><p>main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</p>
</li>
<li><p>keywords - 关键字</p>
</li>
</ul>
<p><strong>详细介绍参考</strong> <a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/nodejs/packagejson.html</a></p>
<h3 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a><strong>卸载模块</strong></h3><p>我们可以使用以下命令来卸载 Node.js 模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm uninstall express</span><br></pre></td></tr></table></figure>
<h3 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a><strong>更新模块</strong></h3><p>我们可以使用以下命令更新模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm update express</span><br></pre></td></tr></table></figure>
<h3 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a><strong>搜索模块</strong></h3><p>使用以下来搜索模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm search express</span><br></pre></td></tr></table></figure>
<h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a><strong>创建模块</strong></h3><p>创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See <span class="string">`npm help json`</span> <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use <span class="string">`npm install &lt;pkg&gt; --save`</span> afterwards to install a package and</span><br><span class="line">save it <span class="keyword">as</span> a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">name: (node_modules) test                   # 模块名</span><br><span class="line">version: (<span class="number">1.0</span><span class="number">.0</span>) </span><br><span class="line">description: Node.js 测试模块(www.test.com)  # 描述</span><br><span class="line">entry point: (index.js) </span><br><span class="line">test command: make test</span><br><span class="line">git repository: https:<span class="comment">//github.com/test/runoob.git  # Github 地址</span></span><br><span class="line">keywords: </span><br><span class="line">author: </span><br><span class="line">license: (ISC) </span><br><span class="line">About to write to ……/node_modules/package.json:      # 生成地址</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"learn"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Node.js 测试模块"</span>,</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is <span class="keyword">this</span> ok? (yes) yes</span><br></pre></td></tr></table></figure>
<p>以上的信息，你需要根据你自己的情况输入。在最后输入 “yes” 后会生成 package.json 文件。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install [-g] 本地或全局安装模块</span><br><span class="line">npm uninstall [-g] 本地或全局卸载模块</span><br><span class="line">npm update 更新模块</span><br><span class="line">npm ls 查看安装的模块</span><br><span class="line">npm list 列出已安装模块</span><br><span class="line">npm show  显示模块详情</span><br><span class="line">npm info 查看模块的详细信息</span><br><span class="line">npm search 搜索模块</span><br><span class="line">npm publish 发布模块</span><br><span class="line">npm unpublish 删除已发布的模块</span><br><span class="line">npm -v 或 npm version显示版本信息</span><br><span class="line">npm view npm versions 列出npm 的所有有效版本</span><br><span class="line">npm install -g npm@<span class="number">2.14</span><span class="number">.14</span> /npm update -g npm@<span class="number">2.14</span><span class="number">.14</span>  安装指定的npm版本</span><br><span class="line">npm init 引导创建一个package.json文件，包括名称、版本、作者这些信息等</span><br><span class="line">npm outdated  #检查模块是否已经过时</span><br><span class="line">npm root  [-g] 查看包的安装路径，输出 node_modules的路径，</span><br><span class="line">npm help 查看某条命令的详细帮助 例如输入npm help install</span><br><span class="line">npm config 管理npm的配置路径</span><br></pre></td></tr></table></figure>

<h3 id="使用淘宝-NPM-镜像"><a href="#使用淘宝-NPM-镜像" class="headerlink" title="使用淘宝 NPM 镜像"></a><strong>使用淘宝 NPM 镜像</strong></h3><p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p>
<p>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>
<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">这样就可以使用 cnpm 命令来安装模块了：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"> cnpm install [name]</span><br></pre></td></tr></table></figure>

<h2 id="04-模块（module）"><a href="#04-模块（module）" class="headerlink" title="04 模块（module）"></a>04 模块（module）</h2><p>Node.js中，一个JavaScript文件中定义的变量、函数，都只在这个文件内部有效。当需要从模块外部引用这些变量、函数时，必须使用exports对象进行暴露。使用者要用require()命令引用这个JS文件。</p>
<p>foo.js文件中的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">"你好"</span>;</span><br><span class="line"></span><br><span class="line">exports.msg = msg; </span><br><span class="line"><span class="comment">//msg这个变量，是一个js文件内部才有作用域的变量。如果别人想用这个变量，那么就要用exports进行暴露。</span></span><br></pre></td></tr></table></figure>
<p>使用者：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"./test/foo.js"</span>);</span><br><span class="line"><span class="comment">//使用者用foo来接收exports对象，也就是说，这里的foo变量，就是文件中的exports变量。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.msg);</span><br></pre></td></tr></table></figure>
<p>一个JavaScript文件，可以向外exports无数个变量、函数。但是require的时候，仅仅需要require这个JS文件一次。使用的它的变量、函数的时候，用点语法即可</p>
<p>js文件中，可以用exports暴露很多东西，比如函数、变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">"你好"</span>;</span><br><span class="line"><span class="keyword">var</span> info = <span class="string">"呵呵"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.msg = msg;</span><br><span class="line">exports.info = info;</span><br><span class="line">exports.showInfo = showInfo;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">在使用者中，只需要require一次。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"./test/foo.js"</span>);</span><br></pre></td></tr></table></figure>
<p>相当于增加了顶层变量。所有的函数、变量都要从这个顶层变量走：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo.msg);</span><br><span class="line"><span class="built_in">console</span>.log(foo.info);</span><br><span class="line">foo.showInfo();</span><br></pre></td></tr></table></figure>
<p>Node中，js文件和js文件，就是被一个个exports和require构建成为网状的。</p>
<p>如果在require命令中，这么写:<code>var foo = require(&quot;foo.js&quot;);</code> 没有写<code>./</code>,所以不是一个相对路径。是一个特殊的路径,那么Node.js将该文件视为<code>node_modules</code>目录下的一个文件</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><p>Node中模块分为两类：一类是Node提供的模块，称为核心模块；另一类是用户编写的模块，称为文件模块</p>
<p>核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的</p>
<p>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢</p>
<h3 id="module对象信息"><a href="#module对象信息" class="headerlink" title="module对象信息"></a><strong>module对象信息</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.id 模块的识别符，通常是带有绝对路径的模块文件名。</span><br><span class="line"><span class="built_in">module</span>.filename 模块的文件名，带有绝对路径。</span><br><span class="line"><span class="built_in">module</span>.loaded 返回一个布尔值，表示模块是否已经完成加载。</span><br><span class="line"><span class="built_in">module</span>.parent 返回一个对象，表示调用该模块的模块。</span><br><span class="line"><span class="built_in">module</span>.children 返回一个数组，表示该模块要用到的其他模块。</span><br><span class="line"><span class="built_in">module</span>.exports 表示模块对外输出的值。</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/wp0214/z19k9k3jwvp9h0oop300x1lh/image.png" alt="image.png-42.3kB"></p>
<h2 id="05-文件系统操作-fs"><a href="#05-文件系统操作-fs" class="headerlink" title="05 文件系统操作-fs"></a>05 文件系统操作-fs</h2><blockquote>
<p><strong>fs文件系统用于对系统文件及目录进行读写操作</strong></p>
</blockquote>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h4 id="普通读取"><a href="#普通读取" class="headerlink" title="普通读取"></a>普通读取</h4><p>同步读取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    data = fs.readFileSync(<span class="string">'./fileForRead.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件内容: '</span> + data);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'读取文件出错: '</span> + err.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node readFileSync.js</span><br><span class="line">文件内容: hello world</span><br></pre></td></tr></table></figure>

<p>异步读取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./fileForRead.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'读取文件出错: '</span> + err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件内容: '</span> + data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node readFile.js</span><br><span class="line">文件内容: hello world</span><br></pre></td></tr></table></figure>

<h4 id="通过文件流读取"><a href="#通过文件流读取" class="headerlink" title="通过文件流读取"></a>通过文件流读取</h4><p>适合读取大文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'./fileForRead.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">readStream</span><br><span class="line">    .on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'读取数据: '</span> + chunk);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'出错: '</span> + err.message);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 没有数据了</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没有数据了'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 已经关闭，不会再有事件抛出</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已经关闭'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node createReadStream.js</span><br><span class="line">读取数据: hello world</span><br><span class="line">没有数据了</span><br><span class="line">已经关闭</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### 文件写入</span></span><br><span class="line"></span><br><span class="line">备注：以下代码，如果文件不存在，则创建文件；如果文件存在，则覆盖文件内容；</span><br><span class="line"></span><br><span class="line">异步写入</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var fs = require(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'./fileForWrite.txt'</span>, <span class="string">'hello world'</span>, <span class="string">'utf8'</span>, function(err)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    console.log(<span class="string">'文件写入成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步写入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fs.writeFileSync(<span class="string">'./fileForWrite1.txt'</span>, <span class="string">'hello world'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件写入成功'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通过文件流写入"><a href="#通过文件流写入" class="headerlink" title="通过文件流写入"></a>通过文件流写入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'./fileForWrite1.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">writeStream</span><br><span class="line">    .on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 已经关闭，不会再有事件抛出</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'已经关闭'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">writeStream.write(<span class="string">'hello'</span>);</span><br><span class="line">writeStream.write(<span class="string">'world'</span>);</span><br><span class="line">writeStream.end(<span class="string">''</span>);</span><br></pre></td></tr></table></figure>

<h4 id="相对底层的接口"><a href="#相对底层的接口" class="headerlink" title="相对底层的接口"></a>相对底层的接口</h4><blockquote>
<p>fs.write(fd, buffer, offset, length[, position], callback)<br>fs.write(fd, data[, position[, encoding]], callback)<br>fs.writeSync(fd, buffer, offset, length[, position])<br>fs.writeSync(fd, data[, position[, encoding]])</p>
</blockquote>
<ul>
<li>fd：写入的文件句柄。</li>
<li>buffer：写入的内容。</li>
<li>offset：将buffer从offset位置开始，长度为length的内容写入。</li>
<li>length：写入的buffer内容的长度。</li>
<li>position：从打开文件的position处写入。</li>
<li>callback：参数为 <code>(err, written, buffer)</code>。<code>written</code>表示有xx字节的buffer被写入。</li>
</ul>
<p>备注：<code>fs.write(fd, buffer, offset, length[, position], callback)</code>跟<code>fs.write(fd, data[, position[, encoding]], callback)</code>的区别在于：后面的只能把所有的data写入，而前面的可以写入指定的data子串？</p>
<h3 id="文件是否存在"><a href="#文件是否存在" class="headerlink" title="文件是否存在"></a>文件是否存在</h3><p><code>fs.exists()</code>已经是<code>deprecated</code>状态，现在可以通过下面代码判断文件是否存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.access(<span class="string">'./fileForRead.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fileForRead.txt存在'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.access(<span class="string">'./fileForRead2.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fileForRead2.txt存在'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>fs.access()</code>除了判断文件是否存在（默认模式），还可以用来判断文件的权限。</p>
<p>备忘：<code>fs.constants.F_OK</code>等常量无法获取（node v6.1，mac 10.11.4下，<code>fs.constants</code>是<code>undefined</code>）</p>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>异步版本（如果目录已存在，会报错）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">'./hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'目录创建成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步版本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdirSync(<span class="string">'./hello'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.unlink(<span class="string">'./fileForUnlink.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件删除成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.unlinkSync(<span class="string">'./fileForUnlink.txt'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建目录-1"><a href="#创建目录-1" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.mkdir(path[, mode], callback)</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">'sub'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建目录成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.mkdirSync(path[, mode])</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fs.mkdirSync(<span class="string">'hello'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建目录成功'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><p>同步版本，注意：<code>fs.readdirSync()</code>只会读一层，所以需要判断文件类型是否目录，如果是，则进行递归遍历。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.readdirSync(path[, options])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFilesInDir = <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> results = [ path.resolve(dir) ];</span><br><span class="line">    <span class="keyword">var</span> files = fs.readdirSync(dir, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        file = path.resolve(dir, file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> stats = fs.statSync(file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stats.isFile())&#123;</span><br><span class="line">            results.push(file);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(stats.isDirectory())&#123;</span><br><span class="line">            results = results.concat( getFilesInDir(file) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> files = getFilesInDir(<span class="string">'../'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(files);</span><br></pre></td></tr></table></figure>

<p>异步版本：（TODO）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.rename(oldPath, newPath, callback)</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.rename(<span class="string">'./hello'</span>, <span class="string">'./world'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'重命名成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.renameSync(oldPath, newPath)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.renameSync(<span class="string">'./world'</span>, <span class="string">'./hello'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>移动文件也是我们经常会遇见的，可是fs没有专门移动文件的函数，但是我们可以通过rename函数来达到移动文件的目的，示例如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">fs.rename(oldPath,newPath,function (err) &#123;</span><br><span class="line">   if (err) throw err;</span><br><span class="line">   console.log(&#39;renamed complete&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="监听文件修改"><a href="#监听文件修改" class="headerlink" title="监听文件修改"></a>监听文件修改</h3><p><code>fs.watch()</code>比<code>fs.watchFile()</code>高效很多（why）</p>
<h4 id="fs-watchFile"><a href="#fs-watchFile" class="headerlink" title="fs.watchFile()"></a>fs.watchFile()</h4><p>实现原理：轮询。每隔一段时间检查文件是否发生变化。所以在不同平台上表现基本是一致的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    persistent: <span class="literal">true</span>,  <span class="comment">// 默认就是true</span></span><br><span class="line">    interval: <span class="number">2000</span>  <span class="comment">// 多久检查一次</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// curr, prev 是被监听文件的状态, fs.Stat实例</span></span><br><span class="line"><span class="comment">// 可以通过 fs.unwatch() 移除监听</span></span><br><span class="line">fs.watchFile(<span class="string">'./fileForWatch.txt'</span>, options, <span class="function"><span class="keyword">function</span>(<span class="params">curr, prev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'修改时间为: '</span> + curr.mtime);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>修改<code>fileForWatch.txt</code>，可以看到控制台下打印出日志</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node watchFile.js</span><br><span class="line">修改时间为: Sat Jul <span class="number">16</span> <span class="number">2016</span> <span class="number">19</span>:<span class="number">03</span>:<span class="number">57</span> GMT+<span class="number">0800</span> (CST)</span><br><span class="line">修改时间为: Sat Jul <span class="number">16</span> <span class="number">2016</span> <span class="number">19</span>:<span class="number">04</span>:<span class="number">05</span> GMT+<span class="number">0800</span> (CST)</span><br></pre></td></tr></table></figure>

<p>为啥子？莫非单纯访问文件也会触发回调？</p>
<blockquote>
<p>If you want to be notified when the file was modified, not just accessed, you need to compare curr.mtime and prev.mtime.</p>
</blockquote>
<p>在 <strong>v0.10</strong> 之后的改动。如果监听的文件不存在，会怎么处理。如下</p>
<blockquote>
<p>Note: when an fs.watchFile operation results in an ENOENT error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). In Windows, blksize and blocks fields will be undefined, instead of zero. If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10.</p>
</blockquote>
<h4 id="fs-watch"><a href="#fs-watch" class="headerlink" title="fs.watch()"></a>fs.watch()</h4><blockquote>
<p>fs.watch(filename[, options][, listener])<br>fs.unwatchFile(filename[, listener])</p>
</blockquote>
<p>这接口非常不靠谱（当前测试用的v6.1.0），参考 <a href="https://github.com/nodejs/node/issues/7420" target="_blank" rel="noopener">https://github.com/nodejs/node/issues/7420</a></p>
<blockquote>
<p>fs.watch(filename[, options][, listener])#</p>
</blockquote>
<p>注意：<code>fs.watch()</code>这个接口并不是在所有的平台行为都一致，并且在某些情况下是不可用的。<code>recursive</code>这个选项只在<code>mac</code>、<code>windows</code>下可用。</p>
<p>问题来了：</p>
<ol>
<li>不一致的表现。</li>
<li>不可用的场景。</li>
<li>linux上要recursive咋整。</li>
</ol>
<blockquote>
<p>The fs.watch API is not 100% consistent across platforms, and is unavailable in some situations.<br>The recursive option is only supported on OS X and Windows.</p>
</blockquote>
<p>备忘，不可用的场景。比如网络文件系统等。</p>
<blockquote>
<p>For example, watching files or directories can be unreliable, and in some cases impossible, on network file systems (NFS, SMB, etc), or host file systems when using virtualization software such as Vagrant, Docker, etc.</p>
</blockquote>
<p>另外，listener回调有两个参数，分别是<code>event</code>、<code>filename</code>。其中，<code>filename</code>仅在linux、windows上会提供，并且不是100%提供，所以，尽量不要依赖<code>filename</code>。</p>
<p>在linux、osx上，<code>fs.watch()</code>监听的是inode。如果文件被删除，并重新创建，那么删除事件会触发。同时，<code>fs.watch()</code>监听的还是最初的inode。（API的设计就是这样的）</p>
<p>结论：怎么看都感觉这个API很不靠谱，虽然性能比fs.watchFile()要高很多。</p>
<p>先来个例子，在osx下测试了一下，简直令人绝望。。。无论是创建、修改、删除文件，<code>evt</code>都是<code>rename</code>。。。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    persistent: <span class="literal">true</span>,</span><br><span class="line">    recursive: <span class="literal">true</span>,</span><br><span class="line">    encoding: <span class="string">'utf8'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fs.watch(<span class="string">'../'</span>, options, <span class="function"><span class="keyword">function</span>(<span class="params">event, filename</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'触发事件:'</span> + event);</span><br><span class="line">    <span class="keyword">if</span>(filename)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件名是: '</span> + filename);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件名是没有提供'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>修改下<code>fileForWatch.txt</code>，看到下面输出。。。感觉打死也不想用这个API。。。</p>
<p>贴下环境：osx 10.11.4, node v6.1.0。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">触发事件:rename</span><br><span class="line">文件名是: fs/fileForWatch.txt___jb_bak___</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: fs/fileForWatch.txt</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: fs/fileForWatch.txt___jb_old___</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: .idea/workspace.xml___jb_bak___</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: .idea/workspace.xml</span><br><span class="line">触发事件:rename</span><br><span class="line">文件名是: .idea/workspace.xml___jb_old___</span><br></pre></td></tr></table></figure>

<h3 id="修改所有者"><a href="#修改所有者" class="headerlink" title="修改所有者"></a>修改所有者</h3><p>参考linux命令行，不举例子了。。。</p>
<blockquote>
<p>fs.chown(path, uid, gid, callback)<br>fs.chownSync(path, uid, gid)<br>fs.fchown(fd, uid, gid, callback)<br>fs.fchownSync(fd, uid, gid)</p>
</blockquote>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>可以用<code>fs.chmod()</code>，也可以用<code>fs.fchmod()</code>。两者的区别在于，前面传的是文件路径，后面传的的文件句柄。</p>
<ol>
<li><code>fs.chmod)</code>、<code>fs.fchmod()</code>区别：传的是文件路径，还是文件句柄。</li>
<li><code>fs.chmod()</code>、<code>fs.lchmod()</code>区别：如果文件是软连接，那么<code>fs.chmod()</code>修改的是软连接指向的目标文件；<code>fs.lchmod()</code>修改的是软连接。</li>
</ol>
<blockquote>
<p>fs.chmod(path, mode, callback)<br>fs.chmodSync(path, mode)</p>
</blockquote>
<blockquote>
<p>fs.fchmod(fd, mode, callback)<br>fs.fchmodSync(fd, mode)</p>
</blockquote>
<blockquote>
<p>fs.lchmod(path, mode, callback)#<br>fs.lchmodSync(path, mode)</p>
</blockquote>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.chmod(<span class="string">'./fileForChown.txt'</span>, <span class="string">'777'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'权限修改成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">fs.chmodSync(&#39;.&#x2F;fileForChown.txt&#39;, &#39;777&#39;);</span><br></pre></td></tr></table></figure>

<h3 id="获取文件状态"><a href="#获取文件状态" class="headerlink" title="获取文件状态"></a>获取文件状态</h3><p>区别：</p>
<ul>
<li><code>fs.stat()</code> vs <code>fs.fstat()</code>：传文件路径 vs 文件句柄。</li>
<li><code>fs.stat()</code> vs <code>fs.lstat()</code>：如果文件是软链接，那么<code>fs.stat()</code>返回目标文件的状态，<code>fs.lstat()</code>返回软链接本身的状态。</li>
</ul>
<blockquote>
<p>fs.stat(path, callback)<br>fs.statSync(path)</p>
</blockquote>
<blockquote>
<p>fs.fstat(fd, callback)<br>fs.fstatSync(fd)</p>
</blockquote>
<blockquote>
<p>fs.lstat(path, callback)<br>fs.lstatSync(path)</p>
</blockquote>
<p>主要关注<code>Class: fs.Stats</code>。</p>
<p>首先是方法</p>
<ul>
<li>stats.isFile()  – 是否文件</li>
<li>stats.isDirectory() – 是否目录</li>
<li>stats.isBlockDevice() – 什么鬼</li>
<li>stats.isCharacterDevice() – 什么鬼</li>
<li>stats.isSymbolicLink() (only valid with fs.lstat()) – 什么鬼</li>
<li>stats.isFIFO() – 什么鬼</li>
<li>stats.isSocket() – 是不是socket文件</li>
</ul>
<p>官网例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  dev: <span class="number">2114</span>,</span><br><span class="line">  ino: <span class="number">48064969</span>,</span><br><span class="line">  mode: <span class="number">33188</span>,</span><br><span class="line">  nlink: <span class="number">1</span>,</span><br><span class="line">  uid: <span class="number">85</span>,</span><br><span class="line">  gid: <span class="number">100</span>,</span><br><span class="line">  rdev: <span class="number">0</span>,</span><br><span class="line">  size: <span class="number">527</span>,</span><br><span class="line">  blksize: <span class="number">4096</span>,</span><br><span class="line">  blocks: <span class="number">8</span>,</span><br><span class="line">  atime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT, <span class="comment">// 访问时间</span></span><br><span class="line">  mtime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT,  <span class="comment">// 文件内容修改时间</span></span><br><span class="line">  ctime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT,  <span class="comment">// 文件状态修改时间</span></span><br><span class="line">  birthtime: Mon, <span class="number">10</span> Oct <span class="number">2011</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">11</span> GMT  <span class="comment">// 创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>atime：Access Time // 访问时间</li>
<li>mtime:: Modified Time  // 文件内容修改时间</li>
<li>ctime: Changed Time.  // 文件状态修改时间，比如修改文件所有者、修改权限、重命名等</li>
<li>birthtime: Birth Time // 创建时间。在某些系统上是不可靠的，因为拿不到。</li>
</ul>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getTimeDesc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [d.getFullYear(), d.getMonth()+<span class="number">1</span>, d.getDate()].join(<span class="string">'-'</span>) + <span class="string">' '</span> + [d.getHours(), d.getMinutes(), d.getSeconds()].join(<span class="string">':'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fs.stat(<span class="string">'./fileForStat.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'文件大小: '</span> + stats.size);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建时间: '</span> + getTimeDesc(stats.birthtime));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'访问时间: '</span> + getTimeDesc(stats.atime));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'修改时间: '</span> + getTimeDesc(stats.mtime));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node stat.js</span><br><span class="line">文件大小: <span class="number">3613</span></span><br><span class="line">创建时间: <span class="number">2016</span><span class="literal">-7</span><span class="literal">-16</span> <span class="number">12</span>:<span class="number">40</span>:<span class="number">49</span></span><br><span class="line">访问时间: <span class="number">2016</span><span class="literal">-7</span><span class="literal">-16</span> <span class="number">12</span>:<span class="number">40</span>:<span class="number">49</span></span><br><span class="line">修改时间: <span class="number">2016</span><span class="literal">-7</span><span class="literal">-16</span> <span class="number">12</span>:<span class="number">40</span>:<span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Process</span> finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>同步的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getTimeDesc = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [d.getFullYear(), d.getMonth()+<span class="number">1</span>, d.getDate()].join(<span class="string">'-'</span>) + <span class="string">' '</span> + [d.getHours(), d.getMinutes(), d.getSeconds()].join(<span class="string">':'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stats = fs.statSync(<span class="string">'./fileForStat.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'文件大小: '</span> + stats.size);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'创建时间: '</span> + getTimeDesc(stats.birthtime));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'访问时间: '</span> + getTimeDesc(stats.atime));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'修改时间: '</span> + getTimeDesc(stats.mtime));</span><br></pre></td></tr></table></figure>

<h3 id="访问-权限检测"><a href="#访问-权限检测" class="headerlink" title="访问/权限检测"></a>访问/权限检测</h3><p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.access(path[, mode], callback)</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.access(<span class="string">'./fileForAccess.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'可以访问'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同步版本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fs.accessSync(path[, mode])</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果成功，则返回undefined，如果失败，则抛出错误（什么鬼）</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fs.accessSync(<span class="string">'./fileForAccess.txt'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">throw</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件打开-关闭"><a href="#文件打开-关闭" class="headerlink" title="文件打开/关闭"></a>文件打开/关闭</h3><p>比较底层的接口，实际需要用到的机会不多。需要用到的时候看下<a href="https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback" target="_blank" rel="noopener">文档</a>就行。</p>
<ul>
<li>flags：文件打开模式，比如<code>r</code>、<code>r+</code>、<code>w</code>、<code>w+</code>等。可选模式非常多。</li>
<li>mode：默认是<code>666</code>，可读+可写。</li>
</ul>
<blockquote>
<p>fs.open(path, flags[, mode], callback)<br>fs.openSync(path, flags[, mode])<br>fs.close(fd, callback)<br>fs.closeSync(fd)</p>
</blockquote>
<h3 id="文件读取（底层）"><a href="#文件读取（底层）" class="headerlink" title="文件读取（底层）"></a>文件读取（底层）</h3><p>相对底层的读取接口，参数如下</p>
<ul>
<li>fd：文件句柄。</li>
<li>buffer：将读取的文件内容写到buffer里。</li>
<li>offset：buffer开始写入的位置。（在offset开始写入，还是offset+1？）</li>
<li>length：要读取的字节数。</li>
<li>position：文件从哪个位置开始读取。如果是null，那么就从当前位置开始读取。（读取操作会记录下上一个位置）</li>
</ul>
<p>此外，<code>callback</code>的回调参数为<code>(err, bytesRead, buffer)</code></p>
<blockquote>
<p>fs.read(fd, buffer, offset, length, position, callback)</p>
</blockquote>
<h3 id="追加文件内容"><a href="#追加文件内容" class="headerlink" title="追加文件内容"></a>追加文件内容</h3><blockquote>
<p>fs.appendFile(file, data[, options], callback)</p>
</blockquote>
<ul>
<li>file：可以是文件路径，也可以是文件句柄。（还可以是buffer？）</li>
<li>data：要追加的内容。string或者buffer。</li>
<li>options<ul>
<li>encoding：编码，默认是<code>utf8</code></li>
<li>mode：默认是<code>0o666</code></li>
<li>flag：默认是<code>a</code></li>
</ul>
</li>
</ul>
<p>注意：如果<code>file</code>是文件句柄，那么</p>
<ul>
<li>开始追加数据前，file需要已经打开。</li>
<li>file需要手动关闭。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.appendFile(<span class="string">'./extra/fileForAppend.txt'</span>, <span class="string">'helo'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'append成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="文件内容截取"><a href="#文件内容截取" class="headerlink" title="文件内容截取"></a>文件内容截取</h3><blockquote>
<p>fs.truncate(path, len, callback)<br>fs.truncateSync(path, len)</p>
<p>fs.ftruncate(fd, len, callback)<br>fs.ftruncateSync(fd, len)</p>
</blockquote>
<p>用途参考<a href="http://man7.org/linux/man-pages/man2/ftruncate.2.html" target="_blank" rel="noopener">linux说明文档</a>。</p>
<p>要点：</p>
<ul>
<li><code>offset</code>不会变化。比如通过<code>fs.read()</code>读取文件内容，就需要特别注意。</li>
<li>如果<code>len</code>小于文件内容长度，剩余文件内容部分会丢失；如果<code>len</code>大于文件内容长度，那么超出的部分，会用<code>\0</code>进行填充。</li>
<li>如果传的是文件路径，需要确保文件是可写的；如果传的是文件句柄，需要确保文件句柄已经打开并且可写入。</li>
</ul>
<blockquote>
<p>The truncate() and ftruncate() functions cause the regular file named<br>by path or referenced by fd to be truncated to a size of precisely<br>length bytes.</p>
</blockquote>
<blockquote>
<p>If the file previously was larger than this size, the extra data is<br>lost.  If the file previously was shorter, it is extended, and the<br>extended part reads as null bytes (‘\0’).</p>
</blockquote>
<blockquote>
<p>The file offset is not changed.</p>
</blockquote>
<blockquote>
<p>With ftruncate(), the file must be open for writing; with truncate(), the file must be writable.</p>
</blockquote>
<h3 id="修改文件属性（时间）"><a href="#修改文件属性（时间）" class="headerlink" title="修改文件属性（时间）"></a>修改文件属性（时间）</h3><ul>
<li>path/fd：文件路径/文件句柄</li>
<li>atime：Access Time。上一次访问文件数据的时间。</li>
<li>mtime：Modified Time。修改时间。</li>
</ul>
<blockquote>
<p>fs.utimes(path, atime, mtime, callback)<br>fs.utimesSync(path, atime, mtime)</p>
</blockquote>
<blockquote>
<p>fs.futimes(fd, atime, mtime, callback)<br>fs.futimesSync(fd, atime, mtime)</p>
</blockquote>
<p>备注，在命令行下可以</p>
<ul>
<li>通过<code>stat</code>查看文件的状态信息，包括了上面的atime、mtime。</li>
<li>通过<code>touch</code>修改这几个时间。</li>
</ul>
<h3 id="创建文件链接"><a href="#创建文件链接" class="headerlink" title="创建文件链接"></a>创建文件链接</h3><blockquote>
<p>fs.symlink(target, path[, type], callback)<br>fs.symlinkSync(target, path[, type])</p>
<p>fs.link(srcpath, dstpath, callback)<br>fs.linkSync(srcpath, dstpath)</p>
</blockquote>
<blockquote>
<p> link() creates a new link (also known as a hard link) to an existing file.</p>
</blockquote>
<p>软链接、硬链接区别：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/" target="_blank" rel="noopener">参考</a> 或者 [这个]。(<a href="http://www.cnblogs.com/itech/archive/2009/04/10/1433052.html" target="_blank" rel="noopener">http://www.cnblogs.com/itech/archive/2009/04/10/1433052.html</a>)</p>
<ul>
<li>硬链接：inode相同，多个别名。删除一个硬链接文件，不会影响其他有相同inode的文件。</li>
<li>软链接：有自己的inode，用户数据块存放指向文件的inode。</li>
</ul>
<p>参考<a href="http://man7.org/linux/man-pages/man2/link.2.html" target="_blank" rel="noopener">这里</a>。</p>
<h3 id="创建临时目录"><a href="#创建临时目录" class="headerlink" title="创建临时目录"></a>创建临时目录</h3><blockquote>
<p>fs.mkdtemp(prefix, callback)<br>fs.mkdtempSync(prefix)</p>
</blockquote>
<p>备忘：跟普通的随便找个目录，创建个随机名字的文件夹，有什么区别？</p>
<p>代码示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.mkdtemp(<span class="string">'/tmp/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, folder</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建临时目录: '</span> + folder);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/node mkdtemp.js</span><br><span class="line">创建临时目录: /tmp/Cxw51O</span><br></pre></td></tr></table></figure>

<h3 id="找出软连接指向的真实路径"><a href="#找出软连接指向的真实路径" class="headerlink" title="找出软连接指向的真实路径"></a>找出软连接指向的真实路径</h3><blockquote>
<p>fs.readlink(path[, options], callback)<br>fs.readlinkSync(path[, options])</p>
</blockquote>
<p>如下面例子，创建了个软链接指向<code>fileForReadLink.txt</code>，通过<code>fs.readlink()</code>就可以找出原始的路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> randomFileName = <span class="string">'./extra/fileForReadLink-'</span> + <span class="built_in">String</span>(<span class="built_in">Math</span>.random()).slice(<span class="number">2</span>, <span class="number">6</span>) + <span class="string">'.txt'</span>;</span><br><span class="line"></span><br><span class="line">fs.symlinkSync(<span class="string">'./extra/fileForReadLink.txt'</span>, randomFileName);</span><br><span class="line">fs.readlink(randomFileName, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, linkString</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'链接文件内容: '</span> + linkString);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>类似终端下直接运行<code>readlink</code>。对于软链接文件，效果同上面代码。对于硬链接，没有输出。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">➜  extra git:(master) ✗ readlink fileForReadLink<span class="literal">-9827</span>.txt</span><br><span class="line">./extra/fileForReadLink.txt</span><br><span class="line">➜  extra git:(master) ✗ readlink fileForLinkHard.txt </span><br><span class="line">➜  extra git:(master) ✗ readlink fileForLinkSoft.txt</span><br><span class="line">./extra/fileForLink.txt</span><br></pre></td></tr></table></figure>

<h3 id="真实路径"><a href="#真实路径" class="headerlink" title="真实路径"></a>真实路径</h3><blockquote>
<p>fs.realpath(path[, options], callback)<br>fs.realpathSync(path[, options])</p>
</blockquote>
<p>例子：（不能作用于软链接？）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fileForRealPath1.txt 是普通文件,正常运行</span></span><br><span class="line">fs.realpath(<span class="string">'./extra/inner/fileForRealPath1.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, resolvedPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fs.realpath: '</span> + resolvedPath);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fileForRealPath.txt 是软链接, 会报错,提示找不到文件</span></span><br><span class="line">fs.realpath(<span class="string">'./extra/inner/fileForRealPath.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, resolvedPath</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fs.realpath: '</span> + resolvedPath);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'path.resolve: '</span> + path.resolve(<span class="string">'./extra/inner/fileForRealpath.txt'</span>) );</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">path.resolve: /Users/a/Documents/git<span class="literal">-code</span>/git<span class="literal">-blog</span>/demo/<span class="number">2015.05</span>.<span class="number">21</span><span class="literal">-node</span><span class="literal">-basic</span>/fs/extra/inner/fileForRealpath.txt</span><br><span class="line">fs.realpath: /Users/a/Documents/git<span class="literal">-code</span>/git<span class="literal">-blog</span>/demo/<span class="number">2015.05</span>.<span class="number">21</span><span class="literal">-node</span><span class="literal">-basic</span>/fs/extra/inner/fileForRealPath1.txt</span><br><span class="line">/Users/a/Documents/git<span class="literal">-code</span>/git<span class="literal">-blog</span>/demo/<span class="number">2015.05</span>.<span class="number">21</span><span class="literal">-node</span><span class="literal">-basic</span>/fs/realpath.js:<span class="number">12</span></span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            ^</span><br><span class="line"></span><br><span class="line">Error: ENOENT: no such file or directory, realpath <span class="string">'./extra/inner/fileForRealPath.txt'</span></span><br><span class="line">    at Error (native)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Process</span> finished with <span class="keyword">exit</span> code <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><blockquote>
<p>fs.rmdir(path, callback)<br>fs.rmdirSync(path)</p>
</blockquote>
<p>例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.rmdir(<span class="string">'./dirForRemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'目录删除成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><h4 id="缓冲区内容写到磁盘"><a href="#缓冲区内容写到磁盘" class="headerlink" title="缓冲区内容写到磁盘"></a>缓冲区内容写到磁盘</h4><blockquote>
<p>fs.fdatasync(fd, callback)<br>fs.fdatasyncSync(fd)</p>
</blockquote>
<p>可以参考这里：</p>
<blockquote>
<p>1、sync函数<br>sync函数只是将所有修改过的块缓冲区排入写队列，然后就返回，它并不等待实际写磁盘操作结束。<br>通常称为update的系统守护进程会周期性地（一般每隔30秒）调用sync函数。这就保证了定期冲洗内核的块缓冲区。命令sync(1)也调用sync函数。<br>2、fsync函数<br>fsync函数只对由文件描述符filedes指定的单一文件起作用，并且等待写磁盘操作结束，然后返回。<br>fsync可用于数据库这样的应用程序，这种应用程序需要确保将修改过的块立即写到磁盘上。<br>3、fdatasync函数<br>fdatasync函数类似于fsync，但它只影响文件的数据部分。而除数据外，fsync还会同步更新文件的属性。<br>对于提供事务支持的数据库，在事务提交时，都要确保事务日志（包含该事务所有的修改操作以及一个提交记录）完全写到硬盘上，才认定事务提交成功并返回给应用层。</p>
</blockquote>
<h2 id="06-网络服务-http"><a href="#06-网络服务-http" class="headerlink" title="06 网络服务-http"></a>06 网络服务-http</h2><p>大多数nodejs开发者都是冲着开发web server的目的选择了nodejs。正如官网所展示的，借助http模块，可以几行代码就搞定一个超迷你的web server。</p>
<p>在nodejs中，<code>http</code>可以说是最核心的模块，同时也是比较复杂的一个模块。上手很简单，但一旦深入学习，不少初学者就会觉得头疼，不知从何入手。</p>
<p>本文先从一个简单的例子出发，引出<code>http</code>模块最核心的四个实例。看完本文，应该就能够对http模块有个整体的认识。</p>
<h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p>在下面的例子中，我们创建了1个web服务器、1个http客户端</p>
<ul>
<li>服务器server：接收来自客户端的请求，并将客户端请求的地址返回给客户端。</li>
<li>客户端client：向服务器发起请求，并将服务器返回的内容打印到控制台。</li>
</ul>
<p>代码如下所示，只有几行，但包含了不少信息量。下一小节会进行简单介绍。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http server 例子</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">serverReq, serverRes</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = serverReq.url;</span><br><span class="line">    serverRes.end( <span class="string">'您访问的地址是：'</span> + url );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http client 例子</span></span><br><span class="line"><span class="keyword">var</span> client = http.get(<span class="string">'http://127.0.0.1:3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">clientRes</span>)</span>&#123;</span><br><span class="line">    clientRes.pipe(process.stdout);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="例子解释"><a href="#例子解释" class="headerlink" title="例子解释"></a>例子解释</h3><p>在上面这个简单的例子里，涉及了4个实例。大部分时候，serverReq、serverRes 才是主角。</p>
<ul>
<li>server：http.Server实例，用来提供服务，处理客户端的请求。</li>
<li>client：http.ClientReques实例，用来向服务端发起请求。</li>
<li>serverReq/clientRes：其实都是 http.IncomingMessage实。serverReq 用来获取客户端请求的相关信息，如request header；而clientRes用来获取服务端返回的相关信息，比如response header。</li>
<li>serverRes：http.ServerResponse实例</li>
</ul>
<h3 id="关于http-IncomingMessage、http-ServerResponse"><a href="#关于http-IncomingMessage、http-ServerResponse" class="headerlink" title="关于http.IncomingMessage、http.ServerResponse"></a>关于http.IncomingMessage、http.ServerResponse</h3><p>先讲下 http.ServerResponse 实例。作用很明确，服务端通过http.ServerResponse 实例，来个请求方发送数据。包括发送响应表头，发送响应主体等。</p>
<p>接下来是 http.IncomingMessage 实例，由于在 server、client 都出现了，初学者难免有点迷茫。它的作用是</p>
<p>在server端：获取请求发送方的信息，比如请求方法、路径、传递的数据等。<br>在client端：获取 server 端发送过来的信息，比如请求方法、路径、传递的数据等。</p>
<p>http.IncomingMessage实例 有三个属性需要注意：method、statusCode、statusMessage。</p>
<ul>
<li>method：只在 server 端的实例有（也就是 serverReq.method）</li>
<li>statusCode/statusMessage：只在 client 端 的实例有（也就是 clientRes.method）</li>
</ul>
<h3 id="关于继承与扩展"><a href="#关于继承与扩展" class="headerlink" title="关于继承与扩展"></a>关于继承与扩展</h3><h4 id="http-Server"><a href="#http-Server" class="headerlink" title="http.Server"></a>http.Server</h4><ul>
<li>http.Server 继承了 net.Server （于是顺带需要学一下 net.Server 的API、属性、相关事件）</li>
<li>net.createServer(fn)，回调中的 <code>socket</code> 是个双工的stream接口，也就是说，读取发送方信息、向发送方发送信息都靠他。</li>
</ul>
<p>备注：socket的客户端、服务端是相对的概念，所以其实 net.Server 内部也是用了 net.Socket（不负责任猜想）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参考：https://cnodejs.org/topic/4fb1c1fd1975fe1e1310490b</span></span><br><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">8989</span>;</span><br><span class="line"><span class="keyword">var</span> HOST = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + socket.remoteAddress + <span class="string">':'</span> + socket.remotePort);</span><br><span class="line">    </span><br><span class="line">    socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'DATA '</span> + socket.remoteAddress + <span class="string">': '</span> + data);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Data is: '</span> + data);</span><br><span class="line"></span><br><span class="line">        socket.write(<span class="string">'Data from you is  "'</span> + data + <span class="string">'"'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'CLOSED: '</span> +</span><br><span class="line">            socket.remoteAddress + <span class="string">' '</span> + socket.remotePort);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(PORT, HOST);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(server <span class="keyword">instanceof</span> net.Server);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="http-ClientRequest"><a href="#http-ClientRequest" class="headerlink" title="http.ClientRequest"></a>http.ClientRequest</h4><p>http.ClientRequest 内部创建了一个socket来发起请求，<a href="https://github.com/nodejs/node/blob/master/lib/_http_client.js#L174" target="_blank" rel="noopener">代码如下</a>。</p>
<p>当你调用 http.request(options) 时，内部是这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">self.onSocket(net.createConnection(options));</span><br></pre></td></tr></table></figure>

<h4 id="http-ServerResponse"><a href="#http-ServerResponse" class="headerlink" title="http.ServerResponse"></a>http.ServerResponse</h4><ul>
<li>实现了 Writable Stream interface，内部也是通过socket来发送信息。</li>
</ul>
<h4 id="http-IncomingMessage"><a href="#http-IncomingMessage" class="headerlink" title="http.IncomingMessage"></a>http.IncomingMessage</h4><ul>
<li>实现了 Readable Stream interface，参考<a href="https://github.com/nodejs/node/blob/master/lib/_http_incoming.js#L62" target="_blank" rel="noopener">这里</a></li>
<li>req.socket –&gt; 获得跟这次连接相关的socket</li>
</ul>
<h2 id="07-网络服务-http-req请求"><a href="#07-网络服务-http-req请求" class="headerlink" title="07 网络服务 http-req请求"></a>07 网络服务 http-req请求</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>本文的重点会放在<code>req</code>这个对象上。前面已经提到，它其实是http.IncomingMessage实例，在服务端、客户端作用略微有差异</p>
<ul>
<li>服务端处：获取请求方的相关信息，如request header等。</li>
<li>客户端处：获取响应方返回的相关信息，如statusCode等。</li>
</ul>
<p>服务端例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面的 req</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.headers);</span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>客户端例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面的res</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.get(<span class="string">'http://127.0.0.1:3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.statusCode);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="属性-方法-事件-分类"><a href="#属性-方法-事件-分类" class="headerlink" title="属性/方法/事件 分类"></a>属性/方法/事件 分类</h3><p>http.IncomingMessage的属性/方法/事件 不是特别多，按照是否客户端/服务端 特有的，下面进行简单归类。可以看到</p>
<ul>
<li>服务端处特有：url</li>
<li>客户端处特有：statusCode、statusMessage</li>
</ul>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="center">名称</th>
<th align="center">服务端</th>
<th align="center">客户端</th>
</tr>
</thead>
<tbody><tr>
<td align="left">事件</td>
<td align="center">aborted</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">事件</td>
<td align="center">close</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">headers</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">rawHeaders</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">statusCode</td>
<td align="center">✕</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">statusMessage</td>
<td align="center">✕</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">httpVersion</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">httpVersion</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">url</td>
<td align="center">✓</td>
<td align="center">✕</td>
</tr>
<tr>
<td align="left">属性</td>
<td align="center">socket</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">方法</td>
<td align="center">.destroy()</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
<tr>
<td align="left">方法</td>
<td align="center">.setTimeout()</td>
<td align="center">✓</td>
<td align="center">✓</td>
</tr>
</tbody></table>
<h3 id="服务端的例子"><a href="#服务端的例子" class="headerlink" title="服务端的例子"></a>服务端的例子</h3><h4 id="例子一：获取httpVersion-method-url"><a href="#例子一：获取httpVersion-method-url" class="headerlink" title="例子一：获取httpVersion/method/url"></a>例子一：获取httpVersion/method/url</h4><p>下面是一个典型的HTTP请求报文，里面最重要的内容包括：HTTP版本、请求方法、请求地址、请求头部。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/hello</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:3000</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br></pre></td></tr></table></figure>

<p>那么，如何获取上面提到的信息呢？很简单，直接上代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getClientInfo.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'1、客户端请求url：'</span> + req.url );</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'2、http版本：'</span> + req.httpVersion );</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'3、http请求方法：'</span> + req.method );</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'4、http请求头部'</span> + <span class="built_in">JSON</span>.stringify(req.headers) );</span><br><span class="line"></span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、客户端请求url：/hello</span><br><span class="line">2、http版本：1.1</span><br><span class="line">3、http请求方法：GET</span><br><span class="line">4、http headers：&#123;<span class="string">"host"</span>:<span class="string">"127.0.0.1:3000"</span>,<span class="string">"connection"</span>:<span class="string">"keep-alive"</span>,<span class="string">"cache-control"</span>:<span class="string">"no-cache"</span>,<span class="string">"user-agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"</span>,<span class="string">"postman-token"</span>:<span class="string">"1148986a-ddfb-3569-e2c0-585634655fe4"</span>,<span class="string">"accept"</span>:<span class="string">"*/*"</span>,<span class="string">"accept-encoding"</span>:<span class="string">"gzip, deflate, sdch, br"</span>,<span class="string">"accept-language"</span>:<span class="string">"zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4"</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例子二：获取get请求参数"><a href="#例子二：获取get请求参数" class="headerlink" title="例子二：获取get请求参数"></a>例子二：获取get请求参数</h4><p>服务端代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getClientGetQuery.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> urlObj = url.parse(req.url);</span><br><span class="line">    <span class="keyword">var</span> query = urlObj.query;</span><br><span class="line">    <span class="keyword">var</span> queryObj = querystring.parse(query);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">JSON</span>.stringify(queryObj) );</span><br><span class="line">    </span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>访问地址 <a href="http://127.0.0.1:3000/hello?nick=chyingp&amp;hello=world" target="_blank" rel="noopener">http://127.0.0.1:3000/hello?nick=chyingp&amp;hello=world</a></p>
<p>服务端输出如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"nick"</span>:<span class="string">"chyingp"</span>,<span class="string">"hello"</span>:<span class="string">"world"</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例子三：获取post请求参数"><a href="#例子三：获取post请求参数" class="headerlink" title="例子三：获取post请求参数"></a>例子三：获取post请求参数</h4><p>服务端代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getClientPostBody.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body = <span class="string">''</span>;  </span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">thunk</span>)</span>&#123;</span><br><span class="line">        body += thunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'post body is: '</span> + body );</span><br><span class="line">        res.end(<span class="string">'ok'</span>);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>通过curl构造post请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">'nick=casper&amp;hello=world'</span> http://127.0.0.1:3000</span><br></pre></td></tr></table></figure>

<p>服务端打印如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post body is: nick=casper&amp;hello=world</span><br></pre></td></tr></table></figure>

<p>备注：post请求中，不同的<code>Content-type</code>，post body有不小差异，感兴趣的同学可以研究下。</p>
<p>本例中的post请求，HTTP报文大概如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:3000</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">nick=casper&amp;hello=world</span><br></pre></td></tr></table></figure>

<h3 id="客户端处例子"><a href="#客户端处例子" class="headerlink" title="客户端处例子"></a>客户端处例子</h3><h4 id="例子一：获取httpVersion-statusCode-statusMessage"><a href="#例子一：获取httpVersion-statusCode-statusMessage" class="headerlink" title="例子一：获取httpVersion/statusCode/statusMessage"></a>例子一：获取httpVersion/statusCode/statusMessage</h4><p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/plain'</span>,&#125;);</span><br><span class="line">    res.end(<span class="string">'from server'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = http.get(<span class="string">'http://127.0.0.1:3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1、http版本：'</span> + res.httpVersion);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2、返回状态码：'</span> + res.statusCode);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3、返回状态描述信息：'</span> + res.statusMessage);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'4、返回正文：'</span>);</span><br><span class="line"></span><br><span class="line">    res.pipe(process.stdout);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、http版本：1.1</span><br><span class="line">2、返回状态码：200</span><br><span class="line">3、返回状态描述信息：OK</span><br><span class="line">4、返回正文：</span><br><span class="line">from server</span><br></pre></td></tr></table></figure>

<h3 id="事件对比：aborted、close"><a href="#事件对比：aborted、close" class="headerlink" title="事件对比：aborted、close"></a>事件对比：aborted、close</h3><p>官方文档对这两个事件的解释是：当客户端终止请求时，触发aborted事件；当客户端连接断开时，触发close事件；官方文档传送们：<a href="https://nodejs.org/api/http.html#http_event_aborted_1" target="_blank" rel="noopener">地址</a></p>
<p>解释得比较含糊，从实际实验对比上来看，跟官方文档有不小出入。此外，客户端处、服务端处的表现也是不同的。</p>
<h4 id="服务端表现"><a href="#服务端表现" class="headerlink" title="服务端表现"></a>服务端表现</h4><p>根据实际测试结果来看，当客户端：</p>
<ul>
<li>abort请求时，服务端req的aborted、close事件都会触发；（诡异）</li>
<li>请求正常完成时，服务端req的close事件不会触发；（也很诡异）</li>
</ul>
<p>直接扒了下nodejs的源代码，发现的确是同时触发的，触发场景：请求正常结束前，客户端abort请求。</p>
<p>测试代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1、收到客户端请求: '</span> + req.url);</span><br><span class="line">    </span><br><span class="line">    req.on(<span class="string">'aborted'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2、客户端请求aborted'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    req.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3、客户端请求close'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// res.end('ok'); 故意不返回，等着客户端中断请求</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> client = http.get(<span class="string">'http://127.0.0.1:3000/aborted'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        client.abort();  <span class="comment">// 故意延迟100ms，确保请求发出</span></span><br><span class="line">    &#125;, <span class="number">100</span>);    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下</span></span><br><span class="line"><span class="comment">// 1、收到客户端请求: /aborted</span></span><br><span class="line"><span class="comment">// 2、客户端请求aborted</span></span><br><span class="line"><span class="comment">// 3、客户端请求close</span></span><br></pre></td></tr></table></figure>

<p>以下代码来自nodejs源码（_http_server.js）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abortIncoming</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (incoming.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> req = incoming.shift();</span><br><span class="line">    req.emit(<span class="string">'aborted'</span>);</span><br><span class="line">    req.emit(<span class="string">'close'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// abort socket._httpMessage ?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来一波对比，<code>req.on(&#39;close&#39;)</code>和<code>req.socket.on(&#39;close&#39;)</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reqSocketClose.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server: 收到客户端请求'</span>);</span><br><span class="line">    </span><br><span class="line">    req.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: req close'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    req.socket.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: req.socket close'</span>);</span><br><span class="line">    &#125;);    </span><br><span class="line">    </span><br><span class="line">    res.end(<span class="string">'ok'</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = http.get(<span class="string">'http://127.0.0.1:3000/aborted'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'client: 收到服务端响应'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下，正儿八经的close事件触发了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server: 收到客户端请求</span><br><span class="line">server: req.socket close</span><br><span class="line">client: 收到服务端响应</span><br></pre></td></tr></table></figure>

<h4 id="客户端表现"><a href="#客户端表现" class="headerlink" title="客户端表现"></a>客户端表现</h4><p>猜测客户端的aborted、close也是在类似场景下触发，测试代码如下。发现一个比较有意思的情况，<code>res.pipe(process.stdout)</code> 这行代码是否添加，会影响<code>close</code>是否触发。</p>
<ul>
<li>没有<code>res.pipe(process.stdout)</code>：close不触发。</li>
<li>有<code>res.pipe(process.stdout)</code>：close触发。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1、服务端：收到客户端请求'</span>);</span><br><span class="line">    </span><br><span class="line">    res.flushHeaders();</span><br><span class="line">    res.setTimeout(<span class="number">100</span>);    <span class="comment">// 故意不返回，3000ms后超时</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> client = http.get(<span class="string">'http://127.0.0.1:3000/aborted'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2、客户端：收到服务端响应'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// res.pipe(process.stdout); 注意这行代码</span></span><br><span class="line">        </span><br><span class="line">        res.on(<span class="string">'aborted'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'3、客户端：aborted触发！'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        res.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'4、客户端：close触发！'</span>);</span><br><span class="line">        &#125;);     </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="信息量略大的-destroy"><a href="#信息量略大的-destroy" class="headerlink" title="信息量略大的 .destroy()"></a>信息量略大的 .destroy()</h3><p>经过前面aborted、close的摧残，本能的觉得 .destroy() 方法的表现会有很多惊喜之处。</p>
<p>测试代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务端：收到客户端请求'</span>);</span><br><span class="line">    </span><br><span class="line">    req.destroy(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'测试destroy'</span>));</span><br><span class="line">    </span><br><span class="line">    req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'服务端：req error: '</span> + error.message);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    req.socket.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'服务端：req socket error: '</span> + error.message);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务端：server error: '</span> + error.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> client = http.get(<span class="string">'http://127.0.0.1:3000/aborted'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'客户端：client error触发！'</span> + error.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出如下。根据 .destroy() 调用的时机不同，error 触发的对象不同。（测试过程比较枯燥，有时间再总结一下）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">服务端：收到客户端请求</span><br><span class="line">服务端：req socket error: 测试destroy</span><br><span class="line">客户端：client error触发！socket hang up</span><br></pre></td></tr></table></figure>

<h3 id="不常用属性"><a href="#不常用属性" class="headerlink" title="不常用属性"></a>不常用属性</h3><ul>
<li>rawHeaders：未解析前的request header。</li>
<li>trailers：在分块传输编码(chunk)中用到，表示trailer后的header可分块传输。（感兴趣的可以研究下）</li>
<li>rawTrailers：</li>
</ul>
<p>关于trailers属性：</p>
<blockquote>
<p>The request/response trailers object. Only populated at the ‘end’ event.</p>
</blockquote>
<h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>一个貌似很简单的对象，实际比想的要复杂一些。做了不少对比实验，也发现了一些好玩的东西，打算深入学习的同学可以自己多动手尝试一下 :)</p>
<p>TODO：</p>
<ol>
<li>对close、aborted进行更深入对比</li>
<li>对.destroy()进行更深入对比</li>
</ol>
<h2 id="08-网络服务-http-res响应"><a href="#08-网络服务-http-res响应" class="headerlink" title="08 网络服务 http-res响应"></a>08 网络服务 http-res响应</h2><h3 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h3><p>http模块四剑客之一的<code>res</code>，应该都不陌生了。一个web服务程序，接受到来自客户端的http请求后，向客户端返回正确的响应内容，这就是<code>res</code>的职责。</p>
<p>返回的内容包括：状态代码/状态描述信息、响应头部、响应主体。下文会举几个简单的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在下面的例子中，我们同时设置了 状态代码/状态描述信息、响应头部、响应主体，就是这么简单。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置状态码、状态描述信息、响应主体</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, <span class="string">'ok'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="设置状态代码、状态描述信息"><a href="#设置状态代码、状态描述信息" class="headerlink" title="设置状态代码、状态描述信息"></a>设置状态代码、状态描述信息</h4><p><code>res</code>提供了 res.writeHead()、res.statusCode/res.statusMessage 来实现这个目的。</p>
<p>举例，如果想要设置 200/ok ，可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.writeHead(<span class="number">200</span>, <span class="string">'ok'</span>);</span><br></pre></td></tr></table></figure>

<p>也可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.statusCode = <span class="number">200</span>;</span><br><span class="line">res.statusMessage = <span class="string">'ok'</span>;</span><br></pre></td></tr></table></figure>

<p>两者差不多，差异点在于</p>
<ol>
<li>res.writeHead() 可以提供额外的功能，比如设置响应头部。</li>
<li>当响应头部发送出去后，res.statusCode/res.statusMessage 会被设置成已发送出去的 状态代码/状态描述信息。</li>
</ol>
<h4 id="设置响应头部"><a href="#设置响应头部" class="headerlink" title="设置响应头部"></a>设置响应头部</h4><p><code>res</code>提供了 res.writeHead()、response.setHeader() 来实现响应头部的设置。</p>
<p>举例，比如想把 <code>Content-Type</code> 设置为 <code>text-plain</code>，那么可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">res.writeHead(<span class="number">200</span>, <span class="string">'ok'</span>, &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text-plain'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text-plain'</span>);</span><br></pre></td></tr></table></figure>

<p>两者的差异点在哪里呢？</p>
<ol>
<li>res.writeHead() 不单单是设置header。</li>
<li>已经通过 res.setHeader() 设置了header，当通过 res.writeHead() 设置同名header，res.writeHead() 的设置会覆盖之前的设置。</li>
</ol>
<p>关于第2点差异，这里举个例子。下面代码，最终的 <code>Content-Type</code> 为 <code>text/plain</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>);</span><br><span class="line">    res.writeHead(<span class="number">200</span>, <span class="string">'ok'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>而下面的例子，则直接报错。报错信息为 <code>Error: Can&#39;t set headers after they are sent.</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;    </span><br><span class="line">    res.writeHead(<span class="number">200</span>, <span class="string">'ok'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>);</span><br><span class="line">    res.end(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="其他响应头部操作"><a href="#其他响应头部操作" class="headerlink" title="其他响应头部操作"></a>其他响应头部操作</h4><p>增、删、改、查 是配套的。下面分别举例说明下，例子太简单就直接上代码了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增</span></span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">res.removeHeader(<span class="string">'Content-Type'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>);  <span class="comment">// 覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line">res.getHeader(<span class="string">'content-type'</span>);</span><br></pre></td></tr></table></figure>

<p>其中略显不同的是 res.getHeader(name)，name 用的是小写，返回值没做特殊处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'TEXT/HTML'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( res.getHeader(<span class="string">'content-type'</span>) );  <span class="comment">// TEXT/HTML</span></span><br><span class="line"></span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</span><br><span class="line"><span class="built_in">console</span>.log( res.getHeader(<span class="string">'content-type'</span>) );  <span class="comment">// text/plain</span></span><br></pre></td></tr></table></figure>

<p>此外，还有不那么常用的：</p>
<ul>
<li>res.headersSent：header是否已经发送；</li>
<li>res.sendDate：默认为true。但为true时，会在response header里自动设置Date首部。</li>
</ul>
<h3 id="设置响应主体"><a href="#设置响应主体" class="headerlink" title="设置响应主体"></a>设置响应主体</h3><p>主要用到 res.write() 以及 res.end() 两个方法。</p>
<p>res.write() API的信息量略大，建议看下<a href="https://nodejs.org/api/http.html#http_response_write_chunk_encoding_callback" target="_blank" rel="noopener">官方文档</a>。</p>
<h4 id="response-write-chunk-encoding-callback"><a href="#response-write-chunk-encoding-callback" class="headerlink" title="response.write(chunk[, encoding][, callback])"></a>response.write(chunk[, encoding][, callback])</h4><ul>
<li>chunk：响应主体的内容，可以是string，也可以是buffer。当为string时，encoding参数用来指明编码方式。（默认是utf8）</li>
<li>encoding：编码方式，默认是 utf8。</li>
<li>callback：当响应体flushed时触发。（TODO 这里想下更好的解释。。。）</li>
</ul>
<p>使用上没什么难度，只是有些注意事项：</p>
<ol>
<li>如果 res.write() 被调用时， res.writeHead() 还没被调用过，那么，就会把header flush出去。</li>
<li>res.write() 可以被调用多次。</li>
<li>当 res.write(chunk) 第一次被调用时，node 会将 header 信息 以及 chunk 发送到客户端。第二次调用 res.write(chunk) ，node 会认为你是要streaming data（WTF，该怎么翻译）。。。</li>
</ol>
<blockquote>
<p>Returns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. ‘drain’ will be emitted when the buffer is free again.</p>
</blockquote>
<h4 id="response-end-data-encoding-callback"><a href="#response-end-data-encoding-callback" class="headerlink" title="response.end([data][, encoding][, callback])"></a>response.end([data][, encoding][, callback])</h4><p>掌握了 res.write() 的话，res.end() 就很简单了。res.end() 的用处是告诉nodejs，header、body都给你了，这次响应就到这里吧。</p>
<p>有点像个语法糖，可以看成下面两个调用的组合。至于callback，当响应传递结束后触发。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.write(data, encoding);</span><br><span class="line">res.end()</span><br></pre></td></tr></table></figure>

<h3 id="chunk数据"><a href="#chunk数据" class="headerlink" title="chunk数据"></a>chunk数据</h3><p>参考这里：<a href="http://stackoverflow.com/questions/6258210/how-can-i-output-data-before-i-end-the-response" target="_blank" rel="noopener">http://stackoverflow.com/questions/6258210/how-can-i-output-data-before-i-end-the-response</a></p>
<p>也就是说，除了nodejs的特性，还需要了解 HTTP协议、浏览器的具体实现。（细思极恐）</p>
<p>如果是 <code>text/html</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;    </span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>);</span><br><span class="line">    res.write(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        res.write(<span class="string">' world!'</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>如果是 <code>text/plain</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span>,</span><br><span class="line">        <span class="string">'X-Content-Type-Options'</span>: <span class="string">'nosniff'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        res.write(<span class="string">'world'</span>);</span><br><span class="line">        res.end()</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">    </span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>失败例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, <span class="string">'ok'</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="string">'hello'</span>);</span><br><span class="line">    </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        res.write(<span class="string">'world'</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h3><p>接口：response.setTimeout(msecs, callback)</p>
<p>关于 timeout 事件的说明，同样是言简意赅（WTF），话少信息量大，最好来个demo TODO</p>
<blockquote>
<p>If no ‘timeout’ listener is added to the request, the response, or the server, then sockets are destroyed when they time out. If you assign a handler on the request, the response, or the server’s ‘timeout’ events, then it is your responsibility to handle timed out sockets.</p>
</blockquote>
<h3 id="事件-close-finish"><a href="#事件-close-finish" class="headerlink" title="事件 close/finish"></a>事件 close/finish</h3><ul>
<li>close：response.end() 被调用前，连接就断开了。此时会触发这个事件。</li>
<li>finish：响应header、body都已经发送出去（交给操作系统，排队等候传输），但客户端是否实际收到数据为止。（这个事件后，res 上就不会再有其他事件触发）</li>
</ul>
<h3 id="其他不常用属性-方法"><a href="#其他不常用属性-方法" class="headerlink" title="其他不常用属性/方法"></a>其他不常用属性/方法</h3><ul>
<li>response.finished：一开始是false，响应结束后，设置为true。</li>
<li>response.sendDate：默认是true。是否自动设置Date头部。（按HTTP协议是必须要的，除非是调试用，不然不要设置为false）</li>
<li>response.headersSent：只读属性。响应头部是否已发送。</li>
<li>response.writeContinue()：发送  HTTP/1.1 100 Continue 消息给客户端，提示说服务端愿意接受客户端的请求，请继续发送请求正文（body)。（TODO 做个demo啥的是大大的好）</li>
</ul>
<h2 id="09-网络服务-http-client"><a href="#09-网络服务-http-client" class="headerlink" title="09 网络服务-http-client"></a>09 网络服务-http-client</h2><h3 id="ClientRequest概览"><a href="#ClientRequest概览" class="headerlink" title="ClientRequest概览"></a>ClientRequest概览</h3><p>当你调用 http.request(options) 时，会返回 ClientRequest实例，主要用来创建HTTP客户端请求。</p>
<p>在前面的章节里，已经对http模块的的其他方面进行了不少介绍，如http.Server、http.ServerResponse、http.IncomingMessage。</p>
<p>有了前面的基础，详细本文不难理解，本文更多的以例子为主。</p>
<h3 id="简单的GET请求"><a href="#简单的GET请求" class="headerlink" title="简单的GET请求"></a>简单的GET请求</h3><p>下面构造了个GET请求，访问 <a href="http://id.qq.com/" target="_blank" rel="noopener">http://id.qq.com/</a> ，并将返回的网页内容打印在控制台下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    protocol: <span class="string">'http:'</span>,</span><br><span class="line">    hostname: <span class="string">'id.qq.com'</span>,</span><br><span class="line">    port: <span class="string">'80'</span>,</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    method: <span class="string">'GET'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.end();</span><br></pre></td></tr></table></figure>

<p>当然，也可以用便捷方法 http.get(options) 进行重写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.get(<span class="string">'http://id.qq.com/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="简单的post请求"><a href="#简单的post请求" class="headerlink" title="简单的post请求"></a>简单的post请求</h3><p>在下面例子中，首先创建了个http server，负责将客户端发送过来的数据回传。</p>
<p>接着，创建客户端POST请求，向服务端发送数据。需要注意的点有：</p>
<ol>
<li>method 指定为 POST。</li>
<li>headers 里声明了 content-type 为 application/x-www-form-urlencoded。</li>
<li>数据发送前，用 querystring.stringify(obj) 对传输的对象进行了格式化。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createClientPostRequest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        protocol: <span class="string">'http:'</span>,</span><br><span class="line">        hostname: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="string">'3000'</span>,</span><br><span class="line">        path: <span class="string">'/post'</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">"connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">            <span class="string">"content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送给服务端的数据</span></span><br><span class="line">    <span class="keyword">var</span> postBody = &#123;</span><br><span class="line">        nick: <span class="string">'chyingp'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建客户端请求</span></span><br><span class="line">    <span class="keyword">var</span> client = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 最终输出：Server got client data: nick=chyingp</span></span><br><span class="line">        res.pipe(process.stdout);  </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送的报文主体，记得先用 querystring.stringify() 处理下</span></span><br><span class="line">    client.write( querystring.stringify(postBody) );</span><br><span class="line">    client.end();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端程序，只是负责回传客户端数据</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.write(<span class="string">'Server got client data: '</span>);</span><br><span class="line">    req.pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, createClientPostRequest);</span><br></pre></td></tr></table></figure>

<h3 id="各种事件"><a href="#各种事件" class="headerlink" title="各种事件"></a>各种事件</h3><p>在官方文档里，http.RequestClient相关的事件共有7个。跟HTTP协议密切相关的有3个，分别是 connect、continue、upgrade，其他4个分别是 abort、aborted、socket、response。</p>
<ul>
<li>其他：abort、aborted、socket、response</li>
<li>与HTTP协议相关：connect、continue、upgrade</li>
</ul>
<p>跟HTTP协议相关的会相对复杂些，因为涉及HTTP协议的设计细节。其他3个相对简单。下面分别进行简单的介绍。</p>
<h4 id="response事件"><a href="#response事件" class="headerlink" title="response事件"></a>response事件</h4><p>最容易理解的一个，当收到来自服务端的响应时触发，其实跟 http.get(url, cbk) 中的回调是一样的，看下程序运行的打印信息就知道。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://id.qq.com/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = http.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1. response event'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'response'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2. response event'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.end();</span><br></pre></td></tr></table></figure>

<p>打印信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. response event</span><br><span class="line">2. response event</span><br></pre></td></tr></table></figure>

<h4 id="socket事件"><a href="#socket事件" class="headerlink" title="socket事件"></a>socket事件</h4><p>当给client分配socket的时候触发，如果熟悉net模块对这个事件应该不陌生。大部分时候并不需要关注这个事件，虽然内部其实挺复杂的。</p>
<h4 id="abort-aborted-事件"><a href="#abort-aborted-事件" class="headerlink" title="abort/aborted 事件"></a>abort/aborted 事件</h4><p>这两个事件看着非常像，都是请求中断时触发，差异在于中断的发起方：</p>
<ul>
<li>abort：客户端主动中断请求（第一次调用 client.abort() 时触发）</li>
<li>aborted：服务端主动中断请求，且请求已经中断时触发。</li>
</ul>
<h4 id="continue事件"><a href="#continue事件" class="headerlink" title="continue事件"></a>continue事件</h4><p>当收到服务端的响应 <code>100 Continue</code> 时触发。熟悉HTTP协议的同学应该对 <code>100 Continue</code> 有所了解。当客户端向服务端发送首部 <code>Expect: 100-continue</code> ，服务端经过一定的校验后，决定对客户端的后续请求放行，于是返回返回 <code>100 Continue</code>，知会客户端，可以继续发送数据。（request body）</p>
<h4 id="upgrade事件"><a href="#upgrade事件" class="headerlink" title="upgrade事件"></a>upgrade事件</h4><p>同样是跟HTTP协议密切相关。当客户端向客户端发起请求时，可以在请求首部里声明 <code>&#39;Connection&#39;: &#39;Upgrade&#39;</code> ，以此要求服务端，将当前连接升级到新的协议。如果服务器同意，那么就升级协议继续通信。这里不打算展开太多细节，直接上官方文档的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an HTTP server</span></span><br><span class="line"><span class="keyword">var</span> srv = http.createServer( <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">  res.end(<span class="string">'okay'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">srv.on(<span class="string">'upgrade'</span>, (req, socket, head) =&gt; &#123;</span><br><span class="line">  socket.write(<span class="string">'HTTP/1.1 101 Web Socket Protocol Handshake\r\n'</span> +</span><br><span class="line">               <span class="string">'Upgrade: WebSocket\r\n'</span> +</span><br><span class="line">               <span class="string">'Connection: Upgrade\r\n'</span> +</span><br><span class="line">               <span class="string">'\r\n'</span>);</span><br><span class="line"></span><br><span class="line">  socket.pipe(socket); <span class="comment">// echo back</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// now that server is running</span></span><br><span class="line">srv.listen(<span class="number">1337</span>, <span class="string">'127.0.0.1'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make a request</span></span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    port: <span class="number">1337</span>,</span><br><span class="line">    hostname: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Connection'</span>: <span class="string">'Upgrade'</span>,</span><br><span class="line">      <span class="string">'Upgrade'</span>: <span class="string">'websocket'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> req = http.request(options);</span><br><span class="line">  req.end();</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">'upgrade'</span>, (res, socket, upgradeHead) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'got upgraded!'</span>);</span><br><span class="line">    socket.end();</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>除了上面讲解到的属性、方法、事件外，还有下面方法没有讲到。并不是它们不重要，篇幅有限，后面再展开。</p>
<ul>
<li>client.abort()：中断请求；</li>
<li>client.setTimeout(timeout)：请求超时设置；</li>
<li>client.flushHeaders() 及早将请求首部发送出去；</li>
<li>client.setSocketKeepAlive()：当内部分配 socket 并连接上时，就会内部调用 socket.keepAlive()；</li>
<li>client.setNoDelay([noDelay])：当内部分配 socket 并连接上时，就会内部调用 socket.setNoDelay()；</li>
</ul>
<h2 id="10-网络服务-http-server"><a href="#10-网络服务-http-server" class="headerlink" title="10 网络服务-http-server"></a>10 网络服务-http-server</h2><h3 id="http服务端概览"><a href="#http服务端概览" class="headerlink" title="http服务端概览"></a>http服务端概览</h3><h3 id="创建server"><a href="#创建server" class="headerlink" title="创建server"></a>创建server</h3><p>几行代码搞定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> requestListener = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(requestListener);</span><br><span class="line"><span class="comment">// var server = new http.Server(requestListener); 跟上面是等价的</span></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="获取请求方信息"><a href="#获取请求方信息" class="headerlink" title="获取请求方信息"></a>获取请求方信息</h3><h4 id="HTTP版本、HTTP-method、headers、url"><a href="#HTTP版本、HTTP-method、headers、url" class="headerlink" title="HTTP版本、HTTP method、headers、url"></a>HTTP版本、HTTP method、headers、url</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'客户端请求url：'</span> + req.url);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'http版本：'</span> + req.httpVersion);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'http请求方法：'</span> + req.method);</span><br><span class="line"></span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">客户端请求url：/hello</span><br><span class="line">http版本：1.1</span><br><span class="line">http请求方法：GET</span><br><span class="line">http headers：&#123;<span class="string">"host"</span>:<span class="string">"127.0.0.1:3000"</span>,<span class="string">"connection"</span>:<span class="string">"keep-alive"</span>,<span class="string">"cache-control"</span>:<span class="string">"max-age=0"</span>,<span class="string">"upgrade-insecure-requests"</span>:<span class="string">"1"</span>,<span class="string">"user-agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"</span>,<span class="string">"accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,<span class="string">"accept-encoding"</span>:<span class="string">"gzip, deflate, sdch, br"</span>,<span class="string">"accept-language"</span>:<span class="string">"zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4"</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取get请求参数"><a href="#获取get请求参数" class="headerlink" title="获取get请求参数"></a>获取get请求参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> urlObj = url.parse(req.url);</span><br><span class="line">    <span class="keyword">var</span> query = urlObj.query;</span><br><span class="line">    <span class="keyword">var</span> queryObj = querystring.parse(query);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">JSON</span>.stringify(queryObj) );</span><br><span class="line">    </span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>运行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://127.0.0.1:3000/hello\?nick\=chyingp\&amp;hello\=world</span><br></pre></td></tr></table></figure>

<p>服务端输出如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"nick"</span>:<span class="string">"chyingp"</span>,<span class="string">"hello"</span>:<span class="string">"world"</span>&#125;</span><br></pre></td></tr></table></figure>


<h4 id="获取post请求参数"><a href="#获取post请求参数" class="headerlink" title="获取post请求参数"></a>获取post请求参数</h4><p>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body = <span class="string">''</span>;  </span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">thunk</span>)</span>&#123;</span><br><span class="line">        body += thunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">'post body is: '</span> + body );</span><br><span class="line">        res.end(<span class="string">'ok'</span>);</span><br><span class="line">    &#125;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>通过curl构造极简post请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">'nick=casper&amp;hello=world'</span> http://127.0.0.1:3000</span><br></pre></td></tr></table></figure>

<p>服务端打印如下。注意，在post请求中，不同的<code>Content-type</code>，post body有不小差异，感兴趣的同学可以自己试下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post body is: nick=casper&amp;hello=world</span><br></pre></td></tr></table></figure>

<p>比如本例中的post请求，HTTP报文大概如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:3000</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">nick=casper&amp;hello=world</span><br></pre></td></tr></table></figure>


<h3 id="枯燥的事件"><a href="#枯燥的事件" class="headerlink" title="枯燥的事件"></a>枯燥的事件</h3><p>首先，我们来看下有哪些事件</p>
<p>checkContinue、checkExpectation、clientError、close、connect、connection、request、upgrade</p>
<h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">var</span> noop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> svr = http.createServer(noop);</span><br><span class="line"><span class="keyword">var</span> anotherSvr = http.createServer(noop);</span><br><span class="line"></span><br><span class="line">anotherSvr.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'出错啦！'</span> + e.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svr.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    anotherSvr.listen(PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>运行代码，输出如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">出错啦！listen EADDRINUSE :::3000</span><br></pre></td></tr></table></figure>

<h4 id="connect-vs-connection"><a href="#connect-vs-connection" class="headerlink" title="connect vs connection"></a>connect vs connection</h4><p>两者差别非常大，虽然字眼看着有点像。</p>
<ul>
<li>connect：当客户端的HTTP method为connect时触发。</li>
<li>connection：当TCP连接建立时触发，大部分时候可以忽略这个事件（目测模块内部自己用到而已）。此外，可以通过 req.connection 来获取这个socket（从nodejs源码来看，req.socket、req.connection 都指向了这个socket）。此外，socket上的readable事件不会触发（具体原因请看模块内部实现，反正我是还没研究）</li>
</ul>
<p>大部分时候都不会用到，除非你要开发HTTP代理。当客户端发起 connect 请求时触发（注意绕过了 requestListener）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：发起connect请求的例子在 ./httpServerEventConnectClient.js 里</span></span><br><span class="line">server.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, socket, head</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'connect事件触发'</span>);</span><br><span class="line">    socket.end();   <span class="comment">// 反正我就只想举个例子，没打算正经处理。。。</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(PORT);</span><br></pre></td></tr></table></figure>

<h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><p>当有新的连接到来时触发。那跟 connection 有什么区别呢？</p>
<p>好了，<code>keep-alive</code>闪亮登场！在持久化连接的情况下，多个 request 可能对应的是 一个 connection。</p>
<p>先来看下没有<code>keep-alive</code>的场景</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">var</span> requestIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> connectionIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">'ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    requestIndex++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request event: 第'</span>+ requestIndex +<span class="string">'个请求！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    connectionIndex++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'connection event: 第'</span>+ connectionIndex +<span class="string">'个请求！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(PORT);</span><br></pre></td></tr></table></figure>

<p>通过curl连续发送3个请求，看下效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 3`; <span class="keyword">do</span> curl http://127.0.0.1:3000; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>服务端输出如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connection event: 第1个请求！</span><br><span class="line">request event: 第1个请求！</span><br><span class="line">connection event: 第2个请求！</span><br><span class="line">request event: 第2个请求！</span><br><span class="line">connection event: 第3个请求！</span><br><span class="line">request event: 第3个请求！</span><br></pre></td></tr></table></figure>

<p>然后，再来看下有<code>keep-alive</code>的场景。用 postman 构造包含 keep-alive 的请求，最终的HTTP请求报文如下</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:3000</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Postman-Token</span>: 6027fda7-f936-d3ac-e54f-dafcbf5e58ff</span><br></pre></td></tr></table></figure>

<p>连续发送3个请求，服务端打印日志如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connection event: 第1个请求！</span><br><span class="line">request event: 第1个请求！</span><br><span class="line">request event: 第2个请求！</span><br><span class="line">request event: 第3个请求！</span><br></pre></td></tr></table></figure>

<h3 id="不常用接口"><a href="#不常用接口" class="headerlink" title="不常用接口"></a>不常用接口</h3><h4 id="server-close-callback"><a href="#server-close-callback" class="headerlink" title="server.close([callback]);"></a>server.close([callback]);</h4><p>关闭服务器。其实就是 (new net.Server()).close()，停止接受新的连接。<br>已经连接上的请求会继续处理，当所有连接结束的时候，server 正式关闭，并抛出 close 事件。<br>一般提供了callback，就不用监听close; 监听了close，就不用添加callback。</p>
<h4 id="其他server-listen"><a href="#其他server-listen" class="headerlink" title="其他server.listen()"></a>其他server.listen()</h4><p>其实除了 server.listen(PORT) 这种监听方式外，还有以下几种相对不那么常用的监听方式。用到的时候看看文档就行了。</p>
<p>server.listen(handle[, callback])：监听本地文件描述符（fd）（windows不支持），或者server，或者socket<br>server.listen(path[, callback])：监听本地socket，创建一个 UNIX socket server 。<br>server.listen([port][, hostname][, backlog][, callback])</p>
<h4 id="网络超时-server-setTimeout-msecs-callback"><a href="#网络超时-server-setTimeout-msecs-callback" class="headerlink" title="网络超时 server.setTimeout(msecs, callback)"></a>网络超时 server.setTimeout(msecs, callback)</h4><p>设置网络连接的超时时间。当超过 msecs 没有响应时，网络就会自动断开。</p>
<p>如果传了 callback，那么当 timeout 发生时，就会将timeout的socket作为参数传给callback。</p>
<p>注意，一般情况下超时的socket会自动销毁。但当你传了callback后，你就需要手动end或者destroy这个socket。</p>
<h3 id="不常用属性-1"><a href="#不常用属性-1" class="headerlink" title="不常用属性"></a>不常用属性</h3><p>server.listening：是否在监听连接<br>server.timeout：设置超时时间（毫秒），注意，修改这个值，只会对新建立的连接产生影响。此外，将timeout设置为0，就会禁用自动超时行为。（目测不推荐）<br>server.maxHeadersCount：客户端最多传送的header数量，默认是1000，如果设置为0，则没有限制。（问题：如果超过1000怎么办？？）</p>
<h2 id="11-网络地址解析-url"><a href="#11-网络地址解析-url" class="headerlink" title="11 网络地址解析 url"></a>11 网络地址解析 url</h2><h3 id="模块概述"><a href="#模块概述" class="headerlink" title="模块概述"></a>模块概述</h3><p>nodejs中，提供了<strong>url</strong>这个非常实用的模块，用来做URL的解析。在做node服务端的开发时会经常用到。使用很简单，总共只有3个方法。</p>
<p>正式讲解前，各位同学先把下面这个图记在心上（来自nodejs官网），先对URL有一个直观的认识。</p>
<p><img src="/assets/url.png" alt=""></p>
<h3 id="模块方法概述"><a href="#模块方法概述" class="headerlink" title="模块方法概述"></a>模块方法概述</h3><p>url模块三个方法分别是：</p>
<ul>
<li><strong>.parse(urlString)</strong>：将url字符串，解析成object，便于开发者进行操作。</li>
<li><strong>.format(urlObj)</strong>：.parse() 方法的反向操作。</li>
<li><strong>.resove(from, to)</strong>：以from作为起始地址，解析出完整的目标地址（还是看直接看例子好些）</li>
</ul>
<h3 id="url解析：url-parse"><a href="#url解析：url-parse" class="headerlink" title="url解析：url.parse()"></a>url解析：url.parse()</h3><blockquote>
<p>完整语法：url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</p>
</blockquote>
<p>使用比较简单，几个要点备忘如下。</p>
<ol>
<li><strong>parseQueryString</strong>：（默认为false）如为false，则<code>urlObject.query</code>为未解析的字符串，比如<code>nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1</code>，且对应的值不会decode；如果<code>parseQueryString</code>为true，则<code>urlObject.query</code>为object，比如<code>{ nick: &#39;程序猿小卡&#39; }</code>，且值会被decode；</li>
<li><strong>slashesDenoteHos</strong>：（默认为false）如果为true，那么类似<code>//foo/bar</code>里的<code>foo</code>就会被认为是<code>hostname</code>；如果为false，则<code>foo</code>被认为是pathname的一部分。</li>
<li>关于解析得到的 urlObject ，会在下一小节进行详细介绍。</li>
</ol>
<h4 id="例子1：参数值不进行解析"><a href="#例子1：参数值不进行解析" class="headerlink" title="例子1：参数值不进行解析"></a>例子1：参数值不进行解析</h4><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'http://Chyingp:HelloWorld@ke.qq.com:8080/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1#part=1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = url.parse(str);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'http:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="string">'Chyingp:HelloWorld'</span>,</span><br><span class="line">  host: <span class="string">'ke.qq.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'ke.qq.com'</span>,</span><br><span class="line">  hash: <span class="string">'#part=1'</span>,</span><br><span class="line">  search: <span class="string">'?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1'</span>,</span><br><span class="line">  query: <span class="string">'nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1'</span>,</span><br><span class="line">  pathname: <span class="string">'/index.html'</span>,</span><br><span class="line">  path: <span class="string">'/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1'</span>,</span><br><span class="line">  href: <span class="string">'http://Chyingp:HelloWorld@ke.qq.com:8080/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1#part=1'</span> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="例子2：对参数值进行decode"><a href="#例子2：对参数值进行decode" class="headerlink" title="例子2：对参数值进行decode"></a>例子2：对参数值进行decode</h4><p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'http://Chyingp:HelloWorld@ke.qq.com:8080/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1#part=1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = url.parse(str, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>

<p>输出如下，对比上面的例子会发现，<strong>query</strong> 字段被解析成了object，并且decode过。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'http:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="string">'Chyingp:HelloWorld'</span>,</span><br><span class="line">  host: <span class="string">'ke.qq.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'ke.qq.com'</span>,</span><br><span class="line">  <span class="built_in">hash</span>: <span class="string">'#part=1'</span>,</span><br><span class="line">  search: <span class="string">'?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1'</span>,</span><br><span class="line">  query: &#123; nick: <span class="string">'程序猿小卡'</span> &#125;,</span><br><span class="line">  pathname: <span class="string">'/index.html'</span>,</span><br><span class="line">  path: <span class="string">'/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1'</span>,</span><br><span class="line">  href: <span class="string">'http://Chyingp:HelloWorld@ke.qq.com:8080/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1#part=1'</span> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="例子3：针对路径-foo-bar-的处理"><a href="#例子3：针对路径-foo-bar-的处理" class="headerlink" title="例子3：针对路径 //foo/bar 的处理"></a>例子3：针对路径 //foo/bar 的处理</h4><p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var url &#x3D; require(&#39;url&#39;);</span><br><span class="line">var str &#x3D; &#39;&#x2F;&#x2F;foo&#x2F;bar&#39;;</span><br><span class="line"></span><br><span class="line">var obj &#x3D; url.parse(str, true, false);</span><br><span class="line">console.log(obj);</span><br><span class="line"></span><br><span class="line">obj &#x3D; url.parse(str, true, true);</span><br><span class="line">console.log(obj);</span><br></pre></td></tr></table></figure>

<p>输出如下，自行对比两者之间的差异：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: null,</span><br><span class="line">  slashes: null,</span><br><span class="line">  auth: null,</span><br><span class="line">  host: null,</span><br><span class="line">  port: null,</span><br><span class="line">  hostname: null,</span><br><span class="line">  <span class="built_in">hash</span>: null,</span><br><span class="line">  search: <span class="string">''</span>,</span><br><span class="line">  query: &#123;&#125;,</span><br><span class="line">  pathname: <span class="string">'//foo/bar'</span>,</span><br><span class="line">  path: <span class="string">'//foo/bar'</span>,</span><br><span class="line">  href: <span class="string">'//foo/bar'</span> &#125;</span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: null,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: null,</span><br><span class="line">  host: <span class="string">'foo'</span>,</span><br><span class="line">  port: null,</span><br><span class="line">  hostname: <span class="string">'foo'</span>,</span><br><span class="line">  <span class="built_in">hash</span>: null,</span><br><span class="line">  search: <span class="string">''</span>,</span><br><span class="line">  query: &#123;&#125;,</span><br><span class="line">  pathname: <span class="string">'/bar'</span>,</span><br><span class="line">  path: <span class="string">'/bar'</span>,</span><br><span class="line">  href: <span class="string">'//foo/bar'</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于urlObject"><a href="#关于urlObject" class="headerlink" title="关于urlObject"></a>关于urlObject</h3><p>以上面的作为例子，粗略讲解下<code>urlObject</code>。更多细节可参考<a href="https://nodejs.org/api/url.html#url_url_strings_and_url_objects" target="_blank" rel="noopener">官方文档</a>。</p>
<ul>
<li>protocol：协议，需要注意的是包含了<code>:</code>，并且是小写的。</li>
<li>slashes：如果<code>:</code>后面跟了两个<code>//</code>，那么为true。</li>
<li>auth：认证信息，如果有密码，为<code>usrname:passwd</code>，如果没有，则为<code>usrname</code>。注意，这里区分大小写。</li>
<li>host：主机名。注意包含了端口，比如<code>ke.qq.com:8080</code>，并且是小写的。</li>
<li>hostname：主机名，不包含端口，并且是小写的。</li>
<li>hash：哈希部分，注意包含了<code>#</code>。</li>
<li>search：查询字符串，注意，包含了<code>?</code>，此外，值是没有经过decode的。</li>
<li>query：字符串 或者 对象。如果是字符串，则是<code>search</code>去掉<code>?</code>，其余一样；如果是对象，那么是decode过的。</li>
<li>path：路径部分，包含search部分。</li>
<li>pathname：路径部分，不包含search部分。</li>
<li>href：原始的地址。不过需要注意的是，<code>protocol</code>、<code>host</code>会被转成小写字母。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  protocol: <span class="string">'http:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="string">'Chyingp:HelloWorld'</span>,</span><br><span class="line">  host: <span class="string">'ke.qq.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'ke.qq.com'</span>,</span><br><span class="line">  hash: <span class="string">'#part=1'</span>,</span><br><span class="line">  search: <span class="string">'?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1'</span>,</span><br><span class="line">  query: &#123; <span class="attr">nick</span>: <span class="string">'程序猿小卡'</span> &#125;,</span><br><span class="line">  pathname: <span class="string">'/index.html'</span>,</span><br><span class="line">  path: <span class="string">'/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1'</span>,</span><br><span class="line">  href: <span class="string">'http://Chyingp:HelloWorld@ke.qq.com:8080/index.html?nick=%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%B0%8F%E5%8D%A1#part=1'</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="url拼接：url-format-urlObject"><a href="#url拼接：url-format-urlObject" class="headerlink" title="url拼接：url.format(urlObject)"></a>url拼接：url.format(urlObject)</h3><blockquote>
<p>完整语法：url.format(urlObject)</p>
</blockquote>
<p><code>url.parse(str)</code>的反向操作，没什么好说的。<code>urlObject</code>包含了很多字段，比如<code>protocol</code>、<code>slashes</code>、<code>protocol</code>等，且不一定需要全部传，所以有一套解析逻辑。</p>
<p>过程比较冗长，大部分时候不需要用到，直接贴<a href="https://nodejs.org/api/url.html#url_url_format_urlobject" target="_blank" rel="noopener">官方文档</a>的链接，有需要再看。</p>
<h3 id="url-resolve-from-to"><a href="#url-resolve-from-to" class="headerlink" title="url.resolve(from, to)"></a>url.resolve(from, to)</h3><p>用法比较简单，直接贴官方文档的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">url.resolve(<span class="string">'/one/two/three'</span>, <span class="string">'four'</span>)         <span class="comment">// '/one/two/four'</span></span><br><span class="line">url.resolve(<span class="string">'http://example.com/'</span>, <span class="string">'/one'</span>)    <span class="comment">// 'http://example.com/one'</span></span><br><span class="line">url.resolve(<span class="string">'http://example.com/one'</span>, <span class="string">'/two'</span>) <span class="comment">// 'http://example.com/two'</span></span><br></pre></td></tr></table></figure>

<h2 id="12-URL查询字符串-querystring"><a href="#12-URL查询字符串-querystring" class="headerlink" title="12 URL查询字符串 querystring"></a>12 URL查询字符串 querystring</h2><h3 id="模块概述-1"><a href="#模块概述-1" class="headerlink" title="模块概述"></a>模块概述</h3><p>在nodejs中，提供了<strong>querystring</strong>这个模块，用来做url查询参数的解析，使用非常简单。</p>
<p>模块总共有四个方法，绝大部分时，我们只会用到 <strong>.parse()</strong>、 <strong>.stringify()</strong>两个方法。剩余的方法，感兴趣的同学可自行查看文档。</p>
<ul>
<li><strong>.parse()</strong>：对url查询参数（字符串）进行解析，生成易于分析的json格式。</li>
<li><strong>.stringif()</strong>：跟<strong>.parse()</strong>相反，用于拼接查询查询。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">querystring.parse(str[, sep[, eq[, options]]])</span><br><span class="line">querystring.stringify(obj[, sep[, eq[, options]]])</span><br></pre></td></tr></table></figure>

<h3 id="查询参数解析：querystring-parse"><a href="#查询参数解析：querystring-parse" class="headerlink" title="查询参数解析：querystring.parse()"></a>查询参数解析：querystring.parse()</h3><blockquote>
<p>参数：querystring.parse(str[, sep[, eq[, options]]])</p>
</blockquote>
<p>第四个参数几乎不会用到,直接不讨论. 第二个, 第三个其实也很少用到,但某些时候还是可以用一下。直接看例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'nick=casper&amp;age=24'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = querystring.parse(str);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"nick"</span>: <span class="string">"casper"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"24"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看下<code>sep</code>、<code>eq</code>有什么作用。相当于可以替换<code>&amp;</code>、<code>=</code>为自定义字符，对于下面的场景来说还是挺省事的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'nick=casper&amp;age=24&amp;extra=name-chyingp|country-cn'</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = querystring.parse(str1);</span><br><span class="line"><span class="keyword">var</span> obj2 = querystring.parse(obj1.extra, <span class="string">'|'</span>, <span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj2, <span class="literal">null</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"chyingp"</span>,</span><br><span class="line">    <span class="string">"country"</span>: <span class="string">"cn"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询参数拼接：querystring-stringify"><a href="#查询参数拼接：querystring-stringify" class="headerlink" title="查询参数拼接：querystring.stringify()"></a>查询参数拼接：querystring.stringify()</h3><blockquote>
<p>querystring.stringify(obj[, sep[, eq[, options]]])</p>
</blockquote>
<p>没什么好说的，相当于<code>parse</code>的逆向操作。直接看代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="string">"nick"</span>: <span class="string">"casper"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"24"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> str1 = querystring.stringify(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"chyingp"</span>,</span><br><span class="line">    <span class="string">"country"</span>: <span class="string">"cn"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> str2 = querystring.stringify(obj2, <span class="string">'|'</span>, <span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nick=casper&amp;age=<span class="number">24</span></span><br><span class="line">name-chyingp|country-cn</span><br></pre></td></tr></table></figure>

<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>官方文档：<a href="https://nodejs.org/api/querystring.html" target="_blank" rel="noopener">https://nodejs.org/api/querystring.html</a></p>
<h2 id="13-本地路径处理-path"><a href="#13-本地路径处理-path" class="headerlink" title="13 本地路径处理 path"></a>13 本地路径处理 path</h2><h3 id="模块概览"><a href="#模块概览" class="headerlink" title="模块概览"></a>模块概览</h3><p>在nodejs中，path是个使用频率很高，但却让人又爱又恨的模块。部分因为文档说的不够清晰，部分因为接口的平台差异性。</p>
<p>将path的接口按照用途归类，仔细琢磨琢磨，也就没那么费解了。</p>
<h3 id="获取路径-文件名-扩展名"><a href="#获取路径-文件名-扩展名" class="headerlink" title="获取路径/文件名/扩展名"></a>获取路径/文件名/扩展名</h3><ul>
<li>获取路径：path.dirname(filepath)</li>
<li>获取文件名：path.basename(filepath)</li>
<li>获取扩展名：path.extname(filepath)</li>
</ul>
<h4 id="获取所在路径"><a href="#获取所在路径" class="headerlink" title="获取所在路径"></a>获取所在路径</h4><p>例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> filepath = <span class="string">'/tmp/demo/js/test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：/tmp/demo/js</span></span><br><span class="line"><span class="built_in">console</span>.log( path.dirname(filepath) );</span><br></pre></td></tr></table></figure>

<h4 id="获取文件名"><a href="#获取文件名" class="headerlink" title="获取文件名"></a>获取文件名</h4><p>严格意义上来说，path.basename(filepath) 只是输出路径的最后一部分，并不会判断是否文件名。</p>
<p>但大部分时候，我们可以用它来作为简易的“获取文件名“的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：test.js</span></span><br><span class="line"><span class="built_in">console</span>.log( path.basename(<span class="string">'/tmp/demo/js/test.js'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：test</span></span><br><span class="line"><span class="built_in">console</span>.log( path.basename(<span class="string">'/tmp/demo/js/test/'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：test</span></span><br><span class="line"><span class="built_in">console</span>.log( path.basename(<span class="string">'/tmp/demo/js/test'</span>) );</span><br></pre></td></tr></table></figure>

<p>如果只想获取文件名，单不包括文件扩展呢？可以用上第二个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出：test</span></span><br><span class="line"><span class="built_in">console</span>.log( path.basename(<span class="string">'/tmp/demo/js/test.js'</span>, <span class="string">'.js'</span>) );</span><br></pre></td></tr></table></figure>

<h4 id="获取文件扩展名"><a href="#获取文件扩展名" class="headerlink" title="获取文件扩展名"></a>获取文件扩展名</h4><p>简单的例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> filepath = <span class="string">'/tmp/demo/js/test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：.js</span></span><br><span class="line"><span class="built_in">console</span>.log( path.extname(filepath) );</span><br></pre></td></tr></table></figure>

<p>更详细的规则是如下：（假设 path.basename(filepath) === B ）</p>
<ul>
<li>从B的最后一个<code>.</code>开始截取，直到最后一个字符。</li>
<li>如果B中不存在<code>.</code>，或者B的第一个字符就是<code>.</code>，那么返回空字符串。</li>
</ul>
<p>直接看<a href="https://nodejs.org/api/path.html#path_path_extname_path" target="_blank" rel="noopener">官方文档</a>的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path.extname(<span class="string">'index.html'</span>)</span><br><span class="line"><span class="comment">// returns '.html'</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'index.coffee.md'</span>)</span><br><span class="line"><span class="comment">// returns '.md'</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'index.'</span>)</span><br><span class="line"><span class="comment">// returns '.'</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'index'</span>)</span><br><span class="line"><span class="comment">// returns ''</span></span><br><span class="line"></span><br><span class="line">path.extname(<span class="string">'.index'</span>)</span><br><span class="line"><span class="comment">// returns ''</span></span><br></pre></td></tr></table></figure>
<h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><h4 id="path-normalize-p"><a href="#path-normalize-p" class="headerlink" title="path.normalize(p)"></a>path.normalize(p)</h4><p>规范化路径，处理冗余的“..”、“.”、“/”字符。发现多个斜杠时，会替换成一个斜杠。当路径末尾包含一个斜杠时，保留。Windows系统使用反斜杠　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">console.log(path.normalize(&#39;a&#x2F;b&#x2F;c&#x2F;..&#x2F;user&#x2F;bin&#39;));&#x2F;&#x2F; a\b\user\bin</span><br><span class="line">console.log(path.normalize(&#39;a&#x2F;b&#x2F;c&#x2F;&#x2F;&#x2F;..&#x2F;user&#x2F;bin&#x2F;&#39;));&#x2F;&#x2F; a\b\user\bin\</span><br><span class="line">console.log(path.normalize(&#39;a&#x2F;b&#x2F;c&#x2F;..&#x2F;..&#x2F;user&#x2F;bin&#39;));&#x2F;&#x2F; a\user\bin</span><br><span class="line">console.log(path.normalize(&#39;a&#x2F;b&#x2F;c&#x2F;..&#x2F;.&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;user&#x2F;bin&#x2F;..&#39;));&#x2F;&#x2F; a\user</span><br><span class="line">console.log(path.normalize(&#39;a&#x2F;b&#x2F;c&#x2F;..&#x2F;..&#x2F;user&#x2F;bin&#x2F;..&#x2F;..&#x2F;&#39;));&#x2F;&#x2F; a\</span><br><span class="line">console.log(path.normalize(&#39;a&#x2F;..&#x2F;..&#x2F;user&#x2F;bin&#x2F;..&#x2F;..&#x2F;&#39;));&#x2F;&#x2F;..\</span><br><span class="line">console.log(path.normalize(&#39;a&#x2F;..&#x2F;..&#x2F;user&#x2F;bin&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;&#39;));&#x2F;&#x2F; ..\..\..\</span><br><span class="line">console.log(path.normalize(&#39;.&#x2F;a&#x2F;..&#x2F;.&#x2F;user&#x2F;bin&#x2F;.&#x2F;&#39;));&#x2F;&#x2F;user\bin\</span><br></pre></td></tr></table></figure>
<h4 id="path-join-path1-path2-…"><a href="#path-join-path1-path2-…" class="headerlink" title="path.join([path1], [path2], […])"></a>path.join([path1], [path2], […])</h4><p>将多个路径结合在一起，并转换为规范化路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">console.log(path.join(&#39;&#x2F;&#x2F;&#x2F;&#x2F;.&#x2F;a&#39;, &#39;b&#x2F;&#x2F;&#x2F;&#x2F;c&#39;, &#39;user&#x2F;&#39;));&#x2F;&#x2F;\a\b\c\user</span><br><span class="line">console.log(path.join(&#39;a&#39;, &#39;..&#x2F;..&#x2F;&#39;, &#39;user&#x2F;&#39;));&#x2F;&#x2F;..\user\</span><br></pre></td></tr></table></figure>

<h4 id="path-resolve-from-…-to"><a href="#path-resolve-from-…-to" class="headerlink" title="path.resolve([from …], to)"></a>path.resolve([from …], to)</h4><p>从源地址 from 到目的地址 to 的绝对路径，类似在shell里执行一系列的cd命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.resolve(&#39;foo&#x2F;bar&#39;, &#39;&#x2F;tmp&#x2F;file&#x2F;&#39;, &#39;..&#39;, &#39;a&#x2F;..&#x2F;subfile&#39;)</span><br></pre></td></tr></table></figure>
<p>类似于:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd foo&#x2F;bar</span><br><span class="line">cd &#x2F;tmp&#x2F;file&#x2F;</span><br><span class="line">cd ..</span><br><span class="line">cd a&#x2F;..&#x2F;subfile</span><br><span class="line">pwd</span><br></pre></td></tr></table></figure>
<p>如果某个from或to参数是绝对路径（比如 ‘E:/abc’，或是以“/”开头的路径），则将忽略之前的from参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line">console.log(path.resolve(&#39;.&#39;, &#39;testFiles&#x2F;..&#39;, &#39;trdLayer&#39;));&#x2F;&#x2F;D:\project\trdLayer</span><br><span class="line">console.log(path.resolve(&#39;..&#39;, &#39;testFiles&#39;, &#39;a.txt&#39;));&#x2F;&#x2F;D:\testFiles\a.txt</span><br><span class="line">console.log(path.resolve(&#39;D:&#39;, &#39;abc&#39;, &#39;D:&#x2F;a&#39;));&#x2F;&#x2F;D:\a</span><br><span class="line">console.log(path.resolve(&#39;abc&#39;, &#39;ok.gif&#39;));&#x2F;&#x2F;D:\project\abc\ok.gif</span><br><span class="line">console.log(path.resolve(&#39;abc&#39;, &#39;..&#39;, &#39;a&#x2F;..&#x2F;subfile&#39;)); &#x2F;&#x2F;D:\project\subfile</span><br></pre></td></tr></table></figure>

<h4 id="path-resolve-…paths"><a href="#path-resolve-…paths" class="headerlink" title="path.resolve([…paths])"></a>path.resolve([…paths])</h4><p>这个接口的说明有点啰嗦。你可以想象现在你在shell下面，从左到右运行一遍<code>cd path</code>命令，最终获取的绝对路径/文件名，就是这个接口所返回的结果了。</p>
<p>比如 <code>path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;)</code> 可以看成下面命令的结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /foo/bar</span><br><span class="line"><span class="built_in">cd</span> ./baz</span><br></pre></td></tr></table></figure>

<p>更多对比例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设当前工作路径是 /Users/a/Documents/git-code/nodejs-learning-guide/examples/2016.11.08-node-path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 /Users/a/Documents/git-code/nodejs-learning-guide/examples/2016.11.08-node-path</span></span><br><span class="line"><span class="built_in">console</span>.log( path.resolve(<span class="string">''</span>) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 /Users/a/Documents/git-code/nodejs-learning-guide/examples/2016.11.08-node-path</span></span><br><span class="line"><span class="built_in">console</span>.log( path.resolve(<span class="string">'.'</span>) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 /foo/bar/baz</span></span><br><span class="line"><span class="built_in">console</span>.log( path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 /foo/bar/baz</span></span><br><span class="line"><span class="built_in">console</span>.log( path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'./baz/'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 /tmp/file</span></span><br><span class="line"><span class="built_in">console</span>.log( path.resolve(<span class="string">'/foo/bar'</span>, <span class="string">'/tmp/file/'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 /Users/a/Documents/git-code/nodejs-learning-guide/examples/2016.11.08-node-path/www/js/mod.js</span></span><br><span class="line"><span class="built_in">console</span>.log( path.resolve(<span class="string">'www'</span>, <span class="string">'js/upload'</span>, <span class="string">'../mod.js'</span>) );</span><br></pre></td></tr></table></figure>

<h3 id="路径解析"><a href="#路径解析" class="headerlink" title="路径解析"></a>路径解析</h3><h4 id="path-normalize-filepath"><a href="#path-normalize-filepath" class="headerlink" title="path.normalize(filepath)"></a>path.normalize(filepath)</h4><p>从官方文档的描述来看，path.normalize(filepath) 应该是比较简单的一个API，不过用起来总是觉得没底。</p>
<p>为什么呢？API说明过于简略了，包括如下：</p>
<ul>
<li>如果路径为空，返回<code>.</code>，相当于当前的工作路径。</li>
<li>将对路径中重复的路径分隔符（比如linux下的<code>/</code>)合并为一个。</li>
<li>对路径中的<code>.</code>、<code>..</code>进行处理。（类似于shell里的<code>cd ..</code>）</li>
<li>如果路径最后有<code>/</code>，那么保留该<code>/</code>。</li>
</ul>
<p>感觉stackoverflow上一个兄弟对这个API的解释更实在，<a href="http://stackoverflow.com/questions/10822574/difference-between-path-normalize-and-path-resolve-in-node-js" target="_blank" rel="noopener">原文链接</a>。</p>
<blockquote>
<p>In other words, path.normalize is “What is the shortest path I can take that will take me to the same place as the input”</p>
</blockquote>
<p>代码示例如下。建议读者把代码拷贝出来运行下，看下实际效果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> filepath = <span class="string">'/tmp/demo/js/test.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">desc, callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'[用例%d]：%s'</span>, ++index, desc);</span><br><span class="line">  callback();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'\n'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">compare(<span class="string">'路径为空'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 输出 .</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">''</span>) );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">compare(<span class="string">'路径结尾是否带/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 输出 /tmp/demo/js/upload</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'/tmp/demo/js/upload'</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// /tmp/demo/js/upload/</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'/tmp/demo/js/upload/'</span>) );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">compare(<span class="string">'重复的/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 输出 /tmp/demo/js</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'/tmp/demo//js'</span>) );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">compare(<span class="string">'路径带..'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 输出 /tmp/demo/js</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'/tmp/demo/js/upload/..'</span>) );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">compare(<span class="string">'相对路径'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 输出 demo/js/upload/</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'./demo/js/upload/'</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出 demo/js/upload/</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'demo/js/upload/'</span>) );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">compare(<span class="string">'不常用边界'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 输出 ..</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'./..'</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出 ..</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'..'</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出 ../</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'../'</span>) );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出 /</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'/../'</span>) );</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 输出 /</span></span><br><span class="line">  <span class="built_in">console</span>.log( path.normalize(<span class="string">'/..'</span>) );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>感兴趣的可以看下 path.normalize(filepath) 的node源码如下：<a href="https://github.com/nodejs/node/blob/master/lib/path.js" target="_blank" rel="noopener">传送门</a></p>
<h3 id="文件路径分解-组合"><a href="#文件路径分解-组合" class="headerlink" title="文件路径分解/组合"></a>文件路径分解/组合</h3><ul>
<li>path.format(pathObject)：将pathObject的root、dir、base、name、ext属性，按照一定的规则，组合成一个文件路径。</li>
<li>path.parse(filepath)：path.format()方法的反向操作。</li>
</ul>
<p>我们先来看看官网对相关属性的说明。</p>
<p>首先是linux下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌─────────────────────┬────────────┐</span><br><span class="line">│          dir        │    base    │</span><br><span class="line">├──────┬              ├──────┬─────┤</span><br><span class="line">│ root │              │ name │ ext │</span><br><span class="line"><span class="string">"  /    home/user/dir / file  .txt "</span></span><br><span class="line">└──────┴──────────────┴──────┴─────┘</span><br><span class="line">(all spaces <span class="keyword">in</span> the <span class="string">""</span> line should be ignored -- they are purely <span class="keyword">for</span> formatting)</span><br></pre></td></tr></table></figure>


<p>然后是windows下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌─────────────────────┬────────────┐</span><br><span class="line">│          dir        │    base    │</span><br><span class="line">├──────┬              ├──────┬─────┤</span><br><span class="line">│ root │              │ name │ ext │</span><br><span class="line"><span class="string">" C:\      path\dir   \ file  .txt "</span></span><br><span class="line">└──────┴──────────────┴──────┴─────┘</span><br><span class="line">(all spaces <span class="keyword">in</span> the <span class="string">""</span> line should be ignored -- they are purely <span class="keyword">for</span> formatting)</span><br></pre></td></tr></table></figure>

<h4 id="path-format-pathObject"><a href="#path-format-pathObject" class="headerlink" title="path.format(pathObject)"></a>path.format(pathObject)</h4><p>阅读相关API文档说明后发现，path.format(pathObject)中，pathObject的配置属性是可以进一步精简的。</p>
<p>根据接口的描述来看，以下两者是等价的。</p>
<ul>
<li><code>root</code> vs <code>dir</code>：两者可以互相替换，区别在于，路径拼接时，<code>root</code>后不会自动加<code>/</code>，而<code>dir</code>会。</li>
<li><code>base</code> vs <code>name+ext</code>：两者可以互相替换。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = path.format(&#123;</span><br><span class="line">  root: <span class="string">'/tmp/'</span>, </span><br><span class="line">  base: <span class="string">'hello.js'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( p1 ); <span class="comment">// 输出 /tmp/hello.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = path.format(&#123;</span><br><span class="line">  dir: <span class="string">'/tmp'</span>, </span><br><span class="line">  name: <span class="string">'hello'</span>,</span><br><span class="line">  ext: <span class="string">'.js'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log( p2 );  <span class="comment">// 输出 /tmp/hello.js</span></span><br></pre></td></tr></table></figure>

<h4 id="path-parse-filepath"><a href="#path-parse-filepath" class="headerlink" title="path.parse(filepath)"></a>path.parse(filepath)</h4><p>path.format(pathObject) 的反向操作，直接上官网例子。</p>
<p>四个属性，对于使用者是挺便利的，不过path.format(pathObject) 中也是四个配置属性，就有点容易搞混。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path.parse(<span class="string">'/home/user/dir/file.txt'</span>)</span><br><span class="line"><span class="comment">// returns</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//    root : "/",</span></span><br><span class="line"><span class="comment">//    dir : "/home/user/dir",</span></span><br><span class="line"><span class="comment">//    base : "file.txt",</span></span><br><span class="line"><span class="comment">//    ext : ".txt",</span></span><br><span class="line"><span class="comment">//    name : "file"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取相对路径"><a href="#获取相对路径" class="headerlink" title="获取相对路径"></a>获取相对路径</h3><p>接口：path.relative(from, to)</p>
<p>描述：从<code>from</code>路径，到<code>to</code>路径的相对路径。</p>
<p>边界：</p>
<ul>
<li>如果<code>from</code>、<code>to</code>指向同个路径，那么，返回空字符串。</li>
<li>如果<code>from</code>、<code>to</code>中任一者为空，那么，返回当前工作路径。</li>
</ul>
<p>上例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = path.relative(<span class="string">'/data/orandea/test/aaa'</span>, <span class="string">'/data/orandea/impl/bbb'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1);  <span class="comment">// 输出 "../../impl/bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = path.relative(<span class="string">'/data/demo'</span>, <span class="string">'/data/demo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p2);  <span class="comment">// 输出 ""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = path.relative(<span class="string">'/data/demo'</span>, <span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p3);  <span class="comment">// 输出 "../../Users/a/Documents/git-code/nodejs-learning-guide/examples/2016.11.08-node-path"</span></span><br></pre></td></tr></table></figure>


<h3 id="平台相关接口-属性"><a href="#平台相关接口-属性" class="headerlink" title="平台相关接口/属性"></a>平台相关接口/属性</h3><p>以下属性、接口，都跟平台的具体实现相关。也就是说，同样的属性、接口，在不同平台上的表现不同。</p>
<ul>
<li>path.posix：path相关属性、接口的linux实现。</li>
<li>path.win32：path相关属性、接口的win32实现。</li>
<li>path.sep：路径分隔符。在linux上是<code>/</code>，在windows上是<code>\</code>。</li>
<li>path.delimiter：path设置的分割符。linux上是<code>:</code>，windows上是<code>;</code>。</li>
</ul>
<p>注意，当使用 path.win32 相关接口时，参数同样可以使用<code>/</code>做分隔符，但接口返回值的分割符只会是<code>\</code>。</p>
<p>直接来例子更直观。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; path.win32.join(<span class="string">'/tmp'</span>, <span class="string">'fuck'</span>)</span><br><span class="line"><span class="string">'\\tmp\\fuck'</span></span><br><span class="line">&gt; path.win32.sep</span><br><span class="line"><span class="string">'\\'</span></span><br><span class="line">&gt; path.win32.join(<span class="string">'\tmp'</span>, <span class="string">'demo'</span>)</span><br><span class="line"><span class="string">'\\tmp\\demo'</span></span><br><span class="line">&gt; path.win32.join(<span class="string">'/tmp'</span>, <span class="string">'demo'</span>)</span><br><span class="line"><span class="string">'\\tmp\\demo'</span></span><br></pre></td></tr></table></figure>

<h4 id="path-delimiter"><a href="#path-delimiter" class="headerlink" title="path.delimiter"></a>path.delimiter</h4><p>linux系统例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">console.log(process.env.PATH)</span><br><span class="line">// <span class="string">'/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'</span></span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter)</span><br><span class="line">// returns [<span class="string">'/usr/bin'</span>, <span class="string">'/bin'</span>, <span class="string">'/usr/sbin'</span>, <span class="string">'/sbin'</span>, <span class="string">'/usr/local/bin'</span>]</span><br></pre></td></tr></table></figure>

<p>windows系统例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">console.log(process.env.PATH)</span><br><span class="line">// <span class="string">'C:\Windows\system32;C:\Windows;C:\Program Files\node\'</span></span><br><span class="line"></span><br><span class="line">process.env.PATH.split(path.delimiter)</span><br><span class="line">// returns [<span class="string">'C:\\Windows\\system32'</span>, <span class="string">'C:\\Windows'</span>, <span class="string">'C:\\Program Files\\node\\'</span>]</span><br></pre></td></tr></table></figure>

<h2 id="14-事件机制-events"><a href="#14-事件机制-events" class="headerlink" title="14 事件机制 events"></a>14 事件机制 events</h2><h3 id="模块概览-1"><a href="#模块概览-1" class="headerlink" title="模块概览"></a>模块概览</h3><p>events模块是node的核心模块之一，几乎所有常用的node模块都继承了events模块，比如http、fs等。</p>
<p>模块本身非常简单，API虽然也不少，但常用的就那么几个，这里举几个简单例子。</p>
<h3 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h3><p>下面一共是6个例子，都非常简单，可以直接拷贝出来运行。例子5比较有意思，虽然也并不复杂，但确实是容易记错的点，感兴趣的同学可以看下。</p>
<h4 id="例子1：单个事件监听器"><a href="#例子1：单个事件监听器" class="headerlink" title="例子1：单个事件监听器"></a>例子1：单个事件监听器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line">man.on(<span class="string">'wakeup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">man.emit(<span class="string">'wakeup'</span>);</span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// man has woken up</span></span><br></pre></td></tr></table></figure>

<h4 id="例子2：同个事件，多个事件监听器"><a href="#例子2：同个事件，多个事件监听器" class="headerlink" title="例子2：同个事件，多个事件监听器"></a>例子2：同个事件，多个事件监听器</h4><p>可以看到，事件触发时，事件监听器按照注册的顺序执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line">man.on(<span class="string">'wakeup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">man.on(<span class="string">'wakeup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up again'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">man.emit(<span class="string">'wakeup'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// man has woken up</span></span><br><span class="line"><span class="comment">// man has woken up again</span></span><br></pre></td></tr></table></figure>

<h4 id="例子3：只运行一次的事件监听器"><a href="#例子3：只运行一次的事件监听器" class="headerlink" title="例子3：只运行一次的事件监听器"></a>例子3：只运行一次的事件监听器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line">man.on(<span class="string">'wakeup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">man.once(<span class="string">'wakeup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up again'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">man.emit(<span class="string">'wakeup'</span>);</span><br><span class="line">man.emit(<span class="string">'wakeup'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// man has woken up</span></span><br><span class="line"><span class="comment">// man has woken up again</span></span><br><span class="line"><span class="comment">// man has woken up</span></span><br></pre></td></tr></table></figure>

<h4 id="例子4：注册事件监听器前，事件先触发"><a href="#例子4：注册事件监听器前，事件先触发" class="headerlink" title="例子4：注册事件监听器前，事件先触发"></a>例子4：注册事件监听器前，事件先触发</h4><p>可以看到，注册事件监听器前，事件先触发，则该事件会直接被忽略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line">man.emit(<span class="string">'wakeup'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">man.on(<span class="string">'wakeup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up -&gt;'</span> + index);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">man.emit(<span class="string">'wakeup'</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// man has woken up -&gt;2</span></span><br></pre></td></tr></table></figure>

<h4 id="例子5：异步执行，还是顺序执行"><a href="#例子5：异步执行，还是顺序执行" class="headerlink" title="例子5：异步执行，还是顺序执行"></a>例子5：异步执行，还是顺序执行</h4><p>例子很简单，但非常重要。究竟是代码1先执行，还是代码2先执行，这点差异，无论对于我们理解别人的代码，还是自己编写node程序，都非常关键。</p>
<p>实践证明，代码1先执行了。(node v6.1.0)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line">man.on(<span class="string">'wakeup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up'</span>); <span class="comment">// 代码1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">man.emit(<span class="string">'wakeup'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'woman has woken up'</span>);  <span class="comment">// 代码2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// man has woken up</span></span><br><span class="line"><span class="comment">// woman has woken up</span></span><br></pre></td></tr></table></figure>

<h4 id="例子6：移除事件监听器"><a href="#例子6：移除事件监听器" class="headerlink" title="例子6：移除事件监听器"></a>例子6：移除事件监听器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'man has woken up'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line">man.on(<span class="string">'wakeup'</span>, wakeup);</span><br><span class="line">man.emit(<span class="string">'wakeup'</span>);</span><br><span class="line"></span><br><span class="line">man.removeListener(<span class="string">'wakeup'</span>, wakeup);</span><br><span class="line">man.emit(<span class="string">'wakeup'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// man has woken up</span></span><br></pre></td></tr></table></figure>

<h3 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://nodejs.org/api/events.html" target="_blank" rel="noopener">https://nodejs.org/api/events.html</a></p>
<h2 id="15-流操作-stream"><a href="#15-流操作-stream" class="headerlink" title="15 流操作 stream"></a>15 流操作 stream</h2><h3 id="模块概览-2"><a href="#模块概览-2" class="headerlink" title="模块概览"></a>模块概览</h3><p>nodejs的核心模块，基本上都是stream的的实例，比如process.stdout、http.clientRequest。</p>
<p>对于大部分的nodejs开发者来说，平常并不会直接用到stream模块，只需要了解stream的运行机制即可（非常重要）。</p>
<p>而对于想要实现自定义stream实例的开发者来说，就得好好研究stream的扩展API了，比如gulp的内部实现就大量用到了自定义的stream类型。</p>
<p>来个简单的例子镇楼，几行代码就实现了读取文件内容，并打印到控制台：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.createReadStream(<span class="string">'./sample.txt'</span>).pipe(process.stdout);</span><br></pre></td></tr></table></figure>

<h3 id="Stream分类"><a href="#Stream分类" class="headerlink" title="Stream分类"></a>Stream分类</h3><p>在nodejs中，有四种stream类型：</p>
<ul>
<li>Readable：用来读取数据，比如 <code>fs.createReadStream()</code>。</li>
<li>Writable：用来写数据，比如 <code>fs.createWriteStream()</code>。</li>
<li>Duplex：可读+可写，比如 <code>net.Socket()</code>。</li>
<li>Transform：在读写的过程中，可以对数据进行修改，比如 <code>zlib.createDeflate()</code>（数据压缩/解压）。</li>
</ul>
<h3 id="Readable-Stream"><a href="#Readable-Stream" class="headerlink" title="Readable Stream"></a>Readable Stream</h3><p>以下都是nodejs中常见的Readable Stream，当然还有其他的，可自行查看文档。</p>
<ul>
<li>http.IncomingRequest</li>
<li>fs.createReadStream()</li>
<li>process.stdin</li>
<li>其他</li>
</ul>
<p>例子一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./sample.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, content</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 文件读取完成，文件内容是 [你好，我是程序猿小卡]</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'文件读取完成，文件内容是 [%s]'</span>, content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>例子二：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'./sample.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> content = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">readStream.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">	content += chunk;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 文件读取完成，文件内容是 [你好，我是程序猿小卡]</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'文件读取完成，文件内容是 [%s]'</span>, content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>例子三：</p>
<p>这里使用了<code>.pipe(dest)</code>，好处在于，如果文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.createReadStream(<span class="string">'./sample.txt'</span>).pipe(process.stdout);</span><br></pre></td></tr></table></figure>

<p>注意：这里只是原封不动的将内容输出到控制台，所以实际上跟前两个例子有细微差异。可以稍做修改，达到上面同样的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onEnd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	process.stdout.write(<span class="string">']'</span>);	</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fileStream = fs.createReadStream(<span class="string">'./sample.txt'</span>);</span><br><span class="line">fileStream.on(<span class="string">'end'</span>, onEnd)</span><br><span class="line"></span><br><span class="line">fileStream.pipe(process.stdout);</span><br><span class="line"></span><br><span class="line">process.stdout.write(<span class="string">'文件读取完成，文件内容是['</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件读取完成，文件内容是[你好，我是程序猿小卡]</span></span><br></pre></td></tr></table></figure>

<h3 id="Writable-Stream"><a href="#Writable-Stream" class="headerlink" title="Writable Stream"></a>Writable Stream</h3><p>同样以写文件为例子，比如想将<code>hello world</code>写到<code>sample.txt</code>里。</p>
<p>例子一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> content = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">var</span> filepath = <span class="string">'./sample.txt'</span>;</span><br><span class="line"></span><br><span class="line">fs.writeFile(filepath, content);</span><br></pre></td></tr></table></figure>

<p>例子二：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> content = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">var</span> filepath = <span class="string">'./sample.txt'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> writeStram = fs.createWriteStream(filepath);</span><br><span class="line">writeStram.write(content);</span><br><span class="line">writeStram.end();</span><br></pre></td></tr></table></figure>

<h3 id="Duplex-Stream"><a href="#Duplex-Stream" class="headerlink" title="Duplex Stream"></a>Duplex Stream</h3><p>最常见的Duplex stream应该就是<code>net.Socket</code>实例了，在前面的文章里有接触过，这里就直接上代码了，这里包含服务端代码、客户端代码。</p>
<p>服务端代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> opt = &#123;</span><br><span class="line">	host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">	port: <span class="string">'3000'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = net.connect(opt, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	client.write(<span class="string">'msg from client'</span>);  <span class="comment">// 可写</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可读</span></span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// server: msg from client [msg from client]</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'client: got reply from server [%s]'</span>, data);</span><br><span class="line">	client.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>客户端代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> opt = &#123;</span><br><span class="line">	host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">	port: <span class="string">'3000'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> client = net.connect(opt, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	client.write(<span class="string">'msg from client'</span>);  <span class="comment">// 可写</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可读</span></span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// lient: got reply from server [reply from server]</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'client: got reply from server [%s]'</span>, data);</span><br><span class="line">	client.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Transform-Stream"><a href="#Transform-Stream" class="headerlink" title="Transform Stream"></a>Transform Stream</h3><p>Transform stream是Duplex stream的特例，也就是说，Transform stream也同时可读可写。跟Duplex stream的区别点在于，Transform stream的输出与输入是存在相关性的。</p>
<p>常见的Transform stream包括<code>zlib</code>、<code>crypto</code>，这里举个简单例子：文件的gzip压缩。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gzip = zlib.createGzip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inFile = fs.createReadStream(<span class="string">'./extra/fileForCompress.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> out = fs.createWriteStream(<span class="string">'./extra/fileForCompress.txt.gz'</span>);</span><br><span class="line"></span><br><span class="line">inFile.pipe(gzip).pipe(out);</span><br></pre></td></tr></table></figure>

<h3 id="相关链接-2"><a href="#相关链接-2" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://nodejs.org/api/stream.html" target="_blank" rel="noopener">https://nodejs.org/api/stream.html</a></p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>nodeJs入门系列</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript6 实用笔记</title>
    <url>/2020/03/29/ECMAScript6-%E5%AE%9E%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p> 1、目前常用的版本是ECMAScript3.0，后来改了名字叫ECMAScript5</p>
<blockquote>
<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。<br>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现</p>
</blockquote>
<p> 2、ECMAScript6的特点：</p>
<blockquote>
<ul>
<li>ES6增添了许多必要的特性，例如模块和类，块级作用域，常量与变量</li>
</ul>
</blockquote>
<p>3、浏览器的支持程度</p>
<blockquote>
<ul>
<li><a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a></li>
</ul>
</blockquote>
<p>4、可以通过Babel转码器把ES6写的代码转成ES5的，就不用担心运行环境是否支持<br>5、chrome下使用ES6为保证可以正常使用大部分语法，需要使用严格模式，即在js开始部分加上’use strict’<br>6、在firefox下使用ES6为保证可以正常使用大部分语法，需要知道测试版本，即在script标签的type属性中加上“application/javascript;version=1.7”属性值</p>
<a id="more"></a>

<h2 id="二、let"><a href="#二、let" class="headerlink" title="二、let"></a>二、let</h2><blockquote>
<p><strong>let 声明变量的关键字</strong><br>1、在相同的作用域内，let不能重复声明一个变量（不同的作用域内除外）<br>2、let声明的变量不会被预解析<br>3、暂时性死区</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>        <span class="comment">//严格模式，即在js开始部分加上'use strict'</span></span><br><span class="line"><span class="built_in">console</span>.log(a);		<span class="comment">//undefined let声明的变量不会被预解析</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> a=<span class="string">'kaivon'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(b);		//报错	不能提前使用</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//let b=30;			//报错 let不能重复声明一个变量（不同的作用域内除外）</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> str=<span class="string">'kaivon'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、块级作用域"><a href="#三、块级作用域" class="headerlink" title="三、块级作用域"></a>三、块级作用域</h2><blockquote>
<p>块级作用域批是的是一对大括号就是一个作用域<br>块级作用域可以直接写一对大括号，以后就不用写自执行函数了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">12</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">20</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(a);</span><br><span class="line"> &#125;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、const-常量"><a href="#四、const-常量" class="headerlink" title="四、const 常量"></a>四、const 常量</h2><blockquote>
<p><strong>const 声明一个常量，一旦声明后就不能修改了</strong><br>1、如果声明后再去修改的话就会报错<br>2、只声明不赋值也会报错<br>3、只能先声明后使用，不会被提前解析<br>4、不能重复声明一个常量<br><strong>注意：const声明的对象中的属性是可以修改的</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line">			</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">12</span>;</span><br><span class="line">a=<span class="string">'kaivon'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str=<span class="string">'kaivon'</span>;</span><br><span class="line"><span class="comment">//str=12;		//报错  声明后再去修改的话就会报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//const b;			//报错	只声明不赋值也会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(c);	//报错	只能先声明后使用，不会被提前解析</span></span><br><span class="line"><span class="keyword">const</span> c=<span class="number">20</span>;</span><br><span class="line"><span class="comment">//const c='kaivon';	//报错	不能重复声明一个常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个对象后，可以对它里面的属性进行修改</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">	name:<span class="string">'kaivon'</span>	</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.name=<span class="string">'陈学辉'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//const声明的对象中的属性是可以修改的</span></span><br></pre></td></tr></table></figure>
<h2 id="五、数组解构赋值"><a href="#五、数组解构赋值" class="headerlink" title="五、数组解构赋值"></a>五、数组解构赋值</h2><p><strong>解构赋值:</strong></p>
<blockquote>
<p>按照一定的模式，从数组或者对象中把数据拿出来，对变量进行赋值</p>
</blockquote>
<p><strong>数组解构赋值:</strong></p>
<blockquote>
<p>等号左边与右边必需都是数组，数组的解构赋值要一一对应。如果对应不上的话就是undefined</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">/*var a=1;  //传统声明变量</span></span><br><span class="line"><span class="comment">var b=2;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];  <span class="comment">//可以使用数组进行批量声明变量</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);		<span class="comment">//1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x,,y,z]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];   <span class="comment">//数组的解构赋值要一一对应。如果对应不上的话就是undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(x,y,z);		<span class="comment">//1 3 undefined </span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> [a,[b,c]]=[<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"> <span class="built_in">console</span>.log(a,b,c);		<span class="comment">//1 2 3  可以嵌套</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//可以用来调换两个值</span></span><br><span class="line"> <span class="keyword">var</span> n1=<span class="number">10</span>;</span><br><span class="line"> <span class="keyword">var</span> n2=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> [n1,n2]=[n2,n1];</span><br><span class="line"> <span class="built_in">console</span>.log(n1,n2);		<span class="comment">//15 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//也可以用来取函数的返回值</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> [d,e,f]=fn();</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(e);		<span class="comment">//green</span></span><br></pre></td></tr></table></figure>
<h2 id="六、对象解构赋值"><a href="#六、对象解构赋值" class="headerlink" title="六、对象解构赋值"></a>六、对象解构赋值</h2><p><strong>解构赋值:</strong></p>
<blockquote>
<p>按照一定的模式，从数组或者对象中把数据拿出来，对变量进行赋值</p>
</blockquote>
<p><strong>对象解构赋值:</strong></p>
<blockquote>
<p>等号左边与右边必需都是对象，名字要一一对应，顺序不需要对应，对应不上的值结果是undefined</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line">			</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">	name:<span class="string">'kaivon'</span>,</span><br><span class="line">	QQ:<span class="number">356985332</span>,</span><br><span class="line">	language:[<span class="string">'css'</span>,<span class="string">'html'</span>,<span class="string">'js'</span>],</span><br><span class="line">	work:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'js'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;name,work,QQ,age&#125;=obj; <span class="comment">//等号左边与右边必需都是对象，名字要一一对应</span></span><br><span class="line"><span class="built_in">console</span>.log(name,work,QQ,age);<span class="comment">//kaivon 356985332 js undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以用它来取一个对象的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		c1:<span class="string">'red'</span>,</span><br><span class="line">		c2:<span class="string">'green'</span>,</span><br><span class="line">		c3:<span class="string">'blue'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;c1,c2,c3&#125;=fn();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c2);		<span class="comment">//green</span></span><br></pre></td></tr></table></figure>
<h2 id="七、字符串的扩展方法"><a href="#七、字符串的扩展方法" class="headerlink" title="七、字符串的扩展方法"></a>七、字符串的扩展方法</h2><blockquote>
<ul>
<li>includes(s) 字符串里面是否包含某个字符，参数是一个字符</li>
</ul>
</blockquote>
<ul>
<li>startsWidth(s) 字符串的开始位置的字符是否是参数的，参数是一个字符</li>
<li>endsWidth(s) 字符串的结束位置的字符是否是参数的，参数是一个字符</li>
</ul>
<p><strong>以上的几个方法都返回一个布尔值,包含有true,不包括为false</strong></p>
<ul>
<li>repeat(num) 复制字符串，参数为数字，表示复制的次数。参数必需是一个正数，其它的就会报错<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">'kaivon'</span>;   <span class="comment">//声明个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'i'</span>));			<span class="comment">//true 字符串里面包含 'i'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'b'</span>));			<span class="comment">//false 字符串里面不包含 'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'k'</span>));		<span class="comment">//true  开始位置包含'k'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'n'</span>));			<span class="comment">//true  结束位置包含'n'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">3</span>));				<span class="comment">//kaivonkaivonkaivon 复制三次</span></span><br><span class="line"><span class="comment">//console.log(str.repeat(-1));				//报错 参数必需是一个正数，其它的就会报错</span></span><br><span class="line"><span class="comment">//console.log(str.repeat(Infinity));		//报错 参数必需是一个正数，其它的就会报错</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="八、模板字符串"><a href="#八、模板字符串" class="headerlink" title="八、模板字符串"></a>八、模板字符串</h2><p><strong>模板字符串：字符串及数据的拼接方式</strong></p>
<blockquote>
<p>1、字符串需要用一对反引号包起来，它可以定义多行字符串，只用一对反引号<br> 2、要拼进去的数据需要放在${}里面<br> 3、大括号里还可以进行运算<br> 4、大括号里还可以调用函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">	title:‘心情‘,</span><br><span class="line">	content:’今天很爽，吃了饭，睡了觉，还打了豆豆‘</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> text=<span class="built_in">document</span>.getElementById(<span class="string">"text"</span>);</span><br><span class="line"><span class="comment">//text.innerHTML='&lt;h1&gt;'+obj.title+'&lt;/h1&gt;&lt;p&gt;'+obj.content+'&lt;/p&gt;'; //常规的拼接方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">'那么问题来了，豆豆爽么？'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要拼进去的数据需要放在$&#123;&#125;里面</span></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">`&lt;h1&gt;<span class="subst">$&#123;obj.title&#125;</span>&lt;/h1&gt;  </span></span><br><span class="line"><span class="string">			&lt;p&gt;<span class="subst">$&#123;obj.content&#125;</span>&lt;/p&gt;`</span>;</span><br><span class="line">			</span><br><span class="line"><span class="comment">//大括号里还可以进行运算</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">`&lt;h1&gt;<span class="subst">$&#123;obj.title+<span class="string">'+1'</span>&#125;</span>&lt;/h1&gt;    </span></span><br><span class="line"><span class="string">			&lt;p&gt;<span class="subst">$&#123;obj.content&#125;</span>&lt;/p&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3=<span class="string">`&lt;h1&gt;<span class="subst">$&#123;obj.title+<span class="string">'+1'</span>&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">			&lt;p&gt;<span class="subst">$&#123;obj.content+fn()&#125;</span>&lt;/p&gt;`</span>;    <span class="comment">//大括号里还可以调用函数</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">//text.innerHTML=str1;</span></span><br><span class="line"><span class="comment">//text.innerHTML=str2;</span></span><br><span class="line"><span class="comment">//text.innerHTML=str3;</span></span><br></pre></td></tr></table></figure>

<h2 id="九、Math对象的扩展方法"><a href="#九、Math对象的扩展方法" class="headerlink" title="九、Math对象的扩展方法"></a>九、Math对象的扩展方法</h2><p><strong>Math.trunc(num): 去除小数部分，是直接把小数部分去掉</strong></p>
<blockquote>
<p>1、对于非数值，先调用Number方法把它转成数字<br>2、对于空值和无法转成数字的值，结果是NaN</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">12.74</span>));			<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="number">0.5</span>));			<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="string">'36.01'</span>));		<span class="comment">//36</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.trunc(<span class="string">'kaivon'</span>));		<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<p><strong>Math.sign(num): 判断一个数是正数还是负数还是0</strong></p>
<blockquote>
<p>1、参数为正数，返回1<br>2、参数为负数，返回-1<br>3、参数为0，返回0<br>4、参数为-0，返回-0<br>5、参数为其它值，返回NaN</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(Math.sign(5));				&#x2F;&#x2F;1</span><br><span class="line">console.log(Math.sign(-5));				&#x2F;&#x2F;-1</span><br><span class="line">console.log(Math.sign(0));				&#x2F;&#x2F;0</span><br><span class="line">console.log(Math.sign(-0));				&#x2F;&#x2F;-0</span><br><span class="line">console.log(Math.sign(&#39;kaivon&#39;));		&#x2F;&#x2F;NaN</span><br></pre></td></tr></table></figure>
<h2 id="十、数组的扩展方法"><a href="#十、数组的扩展方法" class="headerlink" title="十、数组的扩展方法"></a>十、数组的扩展方法</h2><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a><strong>Array.from()</strong></h3><blockquote>
<p>把类数组转成真正的数组 任何有length属性的对象都可以用这个方法转真正数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">	&lt;li&gt;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">	&lt;li&gt;&lt;/</span>li&gt;</span><br><span class="line">	&lt;li&gt;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">	&lt;li&gt;&lt;/</span>li&gt;</span><br><span class="line">	&lt;li&gt;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> lis=<span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">//console.log(lis);</span></span><br><span class="line"><span class="keyword">var</span> newLis=[].slice.call(lis); <span class="comment">//利用以前的方法将类数组转换为数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newLis=<span class="built_in">Array</span>.from(lis);     <span class="comment">//Array.from() 把类数组转成真正的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(newLis);			<span class="comment">//[li, li, li, li, li]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">'kaivon'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=<span class="built_in">Array</span>.from(str);     <span class="comment">//任何有length属性的对象都可以用这个方法转真正数组</span></span><br><span class="line"><span class="built_in">console</span>.log(newStr);			<span class="comment">//["k", "a", "i", "v", "o", "n"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象身上只要有length属性就可以调用Array.from()把对象转成数组,对象中的key必需是从0开始的数字才能转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">	<span class="number">0</span>:<span class="string">'red'</span>,</span><br><span class="line">	<span class="number">1</span>:<span class="string">'green'</span>,</span><br><span class="line">	<span class="number">2</span>:<span class="string">'blue'</span>,</span><br><span class="line">	<span class="number">3</span>:<span class="string">'yellow'</span>,</span><br><span class="line">	length:<span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(obj)); <span class="comment">// ['red','green','blue','yellow']</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a><strong>Array.of()</strong></h3><blockquote>
<p>把一组数值转成真正的数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>());		<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>));		<span class="comment">//[, , ,]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>));		<span class="comment">//[1]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));	<span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a><strong>filter</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假定有一个对象数组(A),获取数组中指定类型的对象放到B数组中 </span></span><br><span class="line"><span class="keyword">var</span> porducts = [</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"cucumber"</span>,<span class="attr">type</span>:<span class="string">"vegetable"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"banana"</span>,<span class="attr">type</span>:<span class="string">"fruit"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"celery"</span>,<span class="attr">type</span>:<span class="string">"vegetable"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"orange"</span>,<span class="attr">type</span>:<span class="string">"fruit"</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> filteredProducts = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; porducts.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(porducts[i].type === <span class="string">"fruit"</span>)&#123;</span><br><span class="line">      filteredProducts.push(porducts[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 filter</span></span><br><span class="line"><span class="keyword">var</span> filtered2 = porducts.filter(<span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> product.type === <span class="string">"vegetable"</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 假定有一个对象数组(A),过滤掉不满足以下条件的对象</span></span><br><span class="line"><span class="comment">// * 条件: 蔬菜 数量大于0,价格小于10</span></span><br><span class="line"><span class="keyword">var</span> products = [</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"cucumber"</span>,<span class="attr">type</span>:<span class="string">"vegetable"</span>,<span class="attr">quantity</span>:<span class="number">0</span>,<span class="attr">price</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"banana"</span>,<span class="attr">type</span>:<span class="string">"fruit"</span>,<span class="attr">quantity</span>:<span class="number">10</span>,<span class="attr">price</span>:<span class="number">16</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"celery"</span>,<span class="attr">type</span>:<span class="string">"vegetable"</span>,<span class="attr">quantity</span>:<span class="number">30</span>,<span class="attr">price</span>:<span class="number">8</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">"orange"</span>,<span class="attr">type</span>:<span class="string">"fruit"</span>,<span class="attr">quantity</span>:<span class="number">3</span>,<span class="attr">price</span>:<span class="number">6</span>&#125;</span><br><span class="line">];</span><br><span class="line">products = products.filter(<span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> product.type === <span class="string">"vegetable"</span> </span><br><span class="line">    &amp;&amp; product.quantity &gt; <span class="number">0</span> </span><br><span class="line">    &amp;&amp; product.price &lt; <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 假定有两个数组(A,B),根据A中id值,过滤掉B数组不符合的数据</span></span><br><span class="line"> <span class="keyword">var</span> comments = [</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="number">4</span>,<span class="attr">content</span>:<span class="string">"Angular4"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="number">2</span>,<span class="attr">content</span>:<span class="string">"Vue.js"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="number">3</span>,<span class="attr">content</span>:<span class="string">"Node.js"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">postId</span>:<span class="number">4</span>,<span class="attr">content</span>:<span class="string">"React.js"</span>&#125;,</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">commentsForPost</span>(<span class="params">post,comments</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> comments.filter(<span class="function"><span class="keyword">function</span>(<span class="params">comment</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> comment.postId === post.id;</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(commentsForPost(post,comments));</span><br></pre></td></tr></table></figure>

<h3 id="Array-includes"><a href="#Array-includes" class="headerlink" title="Array.includes"></a><strong>Array.includes</strong></h3><blockquote>
<p>(数据,起始位置)    查找数组中有没有某个数据</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'red'</span>));		<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'pink'</span>));		<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">'green'</span>,<span class="number">2</span>));	<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="遍历相关"><a href="#遍历相关" class="headerlink" title="遍历相关"></a><strong>遍历相关</strong></h3><blockquote>
<ul>
<li>for in        循环，能够直接读取键名</li>
</ul>
</blockquote>
<ul>
<li>for of        循环，能够直接读取键值<ul>
<li>它不光可以遍历数组或者对象，只要有遍历接口的对象都可以用它</li>
</ul>
</li>
<li>keys()        存储了数组的所有键名</li>
<li>values()        存储了数组的所有键值</li>
<li>entries()        存储了数组的所有键值对<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> color=[<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//for in</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> color)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(attr);	<span class="comment">//0 1 2 3 直接读取键名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for of</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> color)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(value);	<span class="comment">//red green blue yellow 直接读取键值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串也可以使用for of</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">'kaivon'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> str)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(value);		<span class="comment">//k a i v o n 只要有遍历接口的对象都可以用它</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历keys</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> color.keys())&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(key);		<span class="comment">//0 1 2 3 存储了数组的所有键名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历values</span></span><br><span class="line"><span class="comment">/*for(var value of color.values())&#123;  存储了数组的所有键值</span></span><br><span class="line"><span class="comment">	console.log(value);		//red green blue yellow	提示一下，chrom还不支持</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历entries</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> color.entries())&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(key,value);	<span class="comment">//0 "red"	 1 "green"	2 "blue"		3 "yellow"  存储了数组的所有键值对</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h3><blockquote>
<p>遍历数据或者对象，并映射新对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//场景1</span></span><br><span class="line"><span class="comment">//假定有一个数值数组(A),将A数组中的值以双倍的形式放到B数组 </span></span><br><span class="line"> <span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"> <span class="keyword">var</span> doubledNumbers = [];</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">  doubledNumbers.push(numbers[i] * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 map</span></span><br><span class="line"><span class="keyword">var</span> doubled = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//场景1</span></span><br><span class="line"><span class="comment">//假定有一个对象数组(A),将A数中对象某个属性的值存储到B数组中</span></span><br><span class="line"><span class="keyword">var</span> cars = [</span><br><span class="line">  &#123;<span class="attr">model</span>:<span class="string">"Buick"</span>,<span class="attr">price</span>:<span class="string">"CHEAP"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">model</span>:<span class="string">"BMW"</span>,<span class="attr">price</span>:<span class="string">"expensive"</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> prices = cars.map(<span class="function"><span class="keyword">function</span>(<span class="params">car</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> car.price;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="十一、函数参数默认值"><a href="#十一、函数参数默认值" class="headerlink" title="十一、函数参数默认值"></a>十一、函数参数默认值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	b=b||<span class="string">'kaivon'</span>;  <span class="comment">//以往设置默认参数方法</span></span><br><span class="line">	<span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">'hello'</span>);		<span class="comment">//hello kaivon</span></span><br><span class="line">fn(<span class="string">'hello'</span>,<span class="string">'moto'</span>);	<span class="comment">//hello moto</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数变量是默认声明的，不能用let或者const再次声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">a=<span class="number">20</span>,b=<span class="number">10</span></span>)</span>&#123;    <span class="comment">//直接将默认参数写在函数括号中</span></span><br><span class="line">	<span class="comment">//console.log(a,b);		//20 10</span></span><br><span class="line">	<span class="comment">//let a=12;				//报错</span></span><br><span class="line">	<span class="built_in">console</span>.log(a+b);       <span class="comment">//30</span></span><br><span class="line">&#125;</span><br><span class="line">fn2();			<span class="comment">//30</span></span><br><span class="line">fn2(<span class="number">23</span>,<span class="number">45</span>);		<span class="comment">//68</span></span><br></pre></td></tr></table></figure>
<h2 id="十二、箭头函数"><a href="#十二、箭头函数" class="headerlink" title="十二、箭头函数"></a>十二、箭头函数</h2><blockquote>
<p><strong>语法：</strong><br>1、function用var、let、const来表示<br>2、参数要写在第一个等号后面</p>
</blockquote>
</li>
</ul>
<blockquote>
<ul>
<li>1、如果没有参数，需要写一对空的小括号</li>
</ul>
</blockquote>
<ul>
<li>2、只有一个参数，那就直接写，不用加括号</li>
<li>3、参数有多个，需要加一个小括号，参数用逗号隔开<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">/*function fn1()&#123;</span></span><br><span class="line"><span class="comment">	console.log('kaivon');</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">fn1();*/</span> <span class="comment">//常规写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1=<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'kaivon'</span>);  <span class="comment">//es5写法 如果没有参数，需要写一对空的小括号</span></span><br><span class="line">fn1();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn2=<span class="function"><span class="params">a</span>=&gt;</span><span class="built_in">console</span>.log(a);  <span class="comment">//只有一个参数，那就直接写，不用加括号</span></span><br><span class="line">fn2(<span class="string">'kaivon'</span>);			<span class="comment">//kaivon</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn3=<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;      <span class="comment">//参数有多个，需要加一个小括号，参数用逗号隔开</span></span><br><span class="line">	<span class="keyword">let</span> result=a+b;</span><br><span class="line">	<span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">fn3(<span class="number">1</span>,<span class="number">2</span>);		<span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<h2 id="十三、对象的简洁表示法"><a href="#十三、对象的简洁表示法" class="headerlink" title="十三、对象的简洁表示法"></a>十三、对象的简洁表示法</h2>属性与方法都可以简洁表示 , 当属性与值的变量同名时。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">/*function fn()&#123;</span></span><br><span class="line"><span class="comment">	var x=10;</span></span><br><span class="line"><span class="comment">	var y=20;</span></span><br><span class="line"><span class="comment">	function sum()&#123;</span></span><br><span class="line"><span class="comment">		return x+y;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	return &#123;x:x,y:y,sum:sum&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">console.log(fn());*/</span>        <span class="comment">//常规获取函数内部变量及方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;              <span class="comment">//ES6获取函数内部变量及方法</span></span><br><span class="line">	<span class="keyword">var</span> x=<span class="number">10</span>;</span><br><span class="line">	<span class="keyword">var</span> y=<span class="number">20</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x+y;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		x,</span><br><span class="line">		y,</span><br><span class="line">		sum()&#123;</span><br><span class="line">			<span class="keyword">return</span> x+y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br><span class="line"><span class="built_in">console</span>.log(fn().sum())			<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Jane'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name,</span><br><span class="line">  age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: name,</span><br><span class="line">  age: age</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="十四、属性名表达式"><a href="#十四、属性名表达式" class="headerlink" title="十四、属性名表达式"></a>十四、属性名表达式</h2></li>
<li><em>可以把表达式放在中括号里作为属性名*</em><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key=<span class="string">'interest'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">	name:<span class="string">'kaivon'</span>,</span><br><span class="line">	[key]:<span class="string">'打豆豆'</span>,</span><br><span class="line">	[<span class="string">'show'</span>]()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>
<h2 id="十五、Object-is"><a href="#十五、Object-is" class="headerlink" title="十五、Object.is()"></a>十五、Object.is()</h2></li>
<li><em>比较两个值是否相等，与===的结果一样，但是还是有一些区别*</em><blockquote>
<ul>
<li>返回的结果是一个布尔值<br>区别:</li>
</ul>
</blockquote>
<ul>
<li>1、+0与-0比较的结果为false</li>
<li>2、NaN与NaN比较的结果为true<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">'kaivon'</span>,<span class="string">'kaivon'</span>));		<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span>===<span class="number">-0</span>);			<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>,<span class="number">-0</span>));	<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span>===<span class="literal">NaN</span>);			<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>));	<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="十六、Object-is"><a href="#十六、Object-is" class="headerlink" title="十六、Object.is()"></a>十六、Object.is()</h2></li>
</ul>
</li>
<li><em>将一个对象身上的属性复制到另一个对象身上*</em><blockquote>
<ul>
<li>至少需要两个参数</li>
</ul>
</blockquote>
<ul>
<li>1、第一个参数为合并后的对象</li>
<li>2、从第二个参数开始往后就是所有要合并的对象</li>
<li>3、如果有同名的属性，后面会把前面覆盖了</li>
<li>4、如果有嵌套的对象，是覆盖并不是添加</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> obj1=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2=&#123;<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj3=&#123;<span class="attr">a</span>:<span class="number">4</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(obj1,obj2,obj3);</span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">//&#123;a:1,b:2,c:3&#125;  //如果有同名的属性，后面会把前面覆盖了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装个函数</span></span><br><span class="line"><span class="keyword">const</span> merge=<span class="function">(<span class="params">target,...souce</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">Object</span>.assign(target,...souce);</span><br><span class="line">	<span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(merge(obj1,obj2,obj3));		<span class="comment">//Object &#123;a: 4, b: 2, c: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果有嵌套的对象，是覆盖并不是添加</span></span><br><span class="line"><span class="keyword">var</span> obj4=&#123;</span><br><span class="line">	d:&#123;</span><br><span class="line">		e:<span class="number">5</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj5=&#123;</span><br><span class="line">	d:&#123;</span><br><span class="line">		f:<span class="number">6</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(merge(&#123;&#125;,obj4,obj5)); <span class="comment">//&#123;a: 4, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="十七、Set数据结构"><a href="#十七、Set数据结构" class="headerlink" title="十七、Set数据结构"></a>十七、Set数据结构</h2><p><strong>Set 数据结构，类似数组。所有的数据都是唯一的，没有重复的值。它本身是一个构造函数</strong></p>
<blockquote>
<ul>
<li>size    数据的长度</li>
</ul>
</blockquote>
<ul>
<li>add()        添加一个数据</li>
<li>deleate()    删除一个数据</li>
<li>has()        查找某条数据，返回一个布尔值</li>
<li>clear()    删除所有数据<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span>=new Set([1,3,4,5,4,3,2]);</span><br><span class="line"><span class="keyword">set</span>.add(6);     //在数据结构中添加 6 </span><br><span class="line"><span class="keyword">set</span>.delete(1);  //在数据结构中删除 1</span><br><span class="line">console.log(<span class="keyword">set</span>.has(5));    //true 在数据结构中查找是否有 5</span><br><span class="line"><span class="keyword">set</span>.clear();    //删除所有数据内容</span><br><span class="line">console.log(<span class="keyword">set</span>,<span class="keyword">set</span>.size);			//Set &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>&#125; <span class="number">5</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="十八、-展开运算符"><a href="#十八、-展开运算符" class="headerlink" title="十八、 展开运算符"></a>十八、 展开运算符</h2><p><strong>在ES6中用…来表示展开运算符，它可以将数组方法或者对象进行展开。先来看一个例子它是如何使用的。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="comment">// 这样，arr2 就变成了[1, 2, 3, 10, 20, 30];</span></span><br></pre></td></tr></table></figure>
<p>当然，展开对象数据也是可以得到类似的结果</p>
<p>```<br>const obj1 = {<br>  a: 1,<br>  b: 2,<br>  c: 3<br>}</p>
<p>const obj2 = {<br>  …obj1,<br>  d: 4,<br>  e: 5,<br>  f: 6<br>}</p>
<p>// 结果类似于 const obj2 = Object.assign({}, obj1, {d: 4})</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>js的闭包详解</title>
    <url>/2020/03/29/js%E7%9A%84%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="js变量作用域"><a href="#js变量作用域" class="headerlink" title="js变量作用域"></a>js变量作用域</h2><p>js的变量作用域有两种，全局变量和局部变量</p>
<p>需要注意的是，函数内部可以直接读取全局变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> global = <span class="number">666</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(global);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(); <span class="comment">//666</span></span><br></pre></td></tr></table></figure>
<p>函数外部无法读取到函数内部的局部变量，因为函数在执行完之后，函数内部的环境就被销毁了。</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="number">888</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(message); <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>如果函数内部没有使用var，那么实际上就相当于把这个变量声明为全局变量了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	message = <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();	<span class="comment">//这里注意要运行一遍函数，`message`	才有定义</span></span><br><span class="line"></span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure>
<h2 id="如何从外部读取到局部变量？"><a href="#如何从外部读取到局部变量？" class="headerlink" title="如何从外部读取到局部变量？"></a>如何从外部读取到局部变量？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> message = <span class="number">999</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		alert(message); <span class="comment">//999</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，f2可以访问到f1的局部变量message，那么我们只要把f2作为f1的返回值return出去，那么就可以在外部访问到message了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> message = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		alert(message); <span class="comment">//999</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> f2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简单理解闭包"><a href="#简单理解闭包" class="headerlink" title="简单理解闭包"></a>简单理解闭包</h2><p>上面的f2函数就是闭包。</p>
<p>闭包就是能够读取其他函数内部变量的函数，所以，闭包实际上是一个函数。<br>闭包可以理解为“定义在一个函数内部的函数”，本质上，闭包是将函数内部和外部连接起来的一座桥梁。<br>这里要注意一点，父函数内部定义的子函数，如果没有引用父函数作用域中的变量，那么这个子函数不是闭包，这点非常重要，也就是说，闭包是由函数和它所在的环境构成的，缺一不可</p>
<h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><ul>
<li>读取函数内部的变量</li>
<li>让变量始终保存在内存中<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line">	nAdd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; n += <span class="number">1</span> &#125;; <span class="comment">//nAdd是一个全局函数</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		alert(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = f1(); <span class="comment">//result是一个函数，f1中return的字函数</span></span><br><span class="line">result();<span class="comment">//999</span></span><br><span class="line">nAdd();<span class="comment">//执行全局函数</span></span><br><span class="line">result();<span class="comment">//1000</span></span><br></pre></td></tr></table></figure></li>
<li>闭包的应用比较典型是定义模块，我们将操作函数暴露给外部，而细节隐藏在模块内部：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [];</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">typeof</span> val == <span class="string">'number'</span>) &#123;</span><br><span class="line">			arr.push(val);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; arr.length) &#123;</span><br><span class="line">			<span class="keyword">return</span> arr[index]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		add: add,</span><br><span class="line">		<span class="keyword">get</span>: <span class="keyword">get</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">var mod1 = module();</span><br><span class="line">mod1.add(1);</span><br><span class="line">mod1.add(2);</span><br><span class="line">mod1.add('xxx');</span><br><span class="line">console.log(mod1.<span class="keyword">get</span>(2));</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="使用闭包的注意事项"><a href="#使用闭包的注意事项" class="headerlink" title="使用闭包的注意事项"></a>使用闭包的注意事项</h2><p>闭包会让函数中的变量都被保存在内存中，内存消耗大，所以不能滥用闭包，可以在不使用该变量的时候将其delete。<br>闭包会在父函数外部改变父函数内部的值，如果把父函数当作object使用，把闭包当作公有方法，内部变量当作私有成员，那就要小心不要随意改变父函数内部变量的值。</p>
<h2 id="经典闭包例子"><a href="#经典闭包例子" class="headerlink" title="经典闭包例子"></a>经典闭包例子</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line"> lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本意是想每次点击，输入对应序号，但结果是每次输入都为3</span></span><br></pre></td></tr></table></figure>

<p>———————————–分割线———————————–分割线————————–</p>
<p>首先我们来了解几个概念：</p>
<p>立即执行函数：形如 （function(){}）();的一类函数；</p>
<p>闭包：闭包是指有权访问另一函数作用域中的变量的函数。</p>
<p>作用域链：当代码执行的时候，会创建变量对象的一个作用域链….（具体百度）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">	lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(s)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，代码中的匿名函数没有变量 i，所以它必须向上查找，在全局环境中找到了 i。</p>
<p>当for循环运行后，全局变量中的 i 变成了3。此时当你点击文字的时候，会调用其绑定的函数，而该函数运行的时候，发现自己没有 i，就会取得全局环境中的 i。</p>
<p>所以，最后的结果是，不管你点击那段文字，最后结果都是3。</p>
<p><strong>那怎么办呢？你可以用立即执行函数，看代码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">	lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(s)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们把参数 i 作为传给立即执行函数，这样，i 的值就传给了立即执行函数的局部变量 i 了。立即执行函数会直接执行，但是其活动不会销毁，因为里面有个匿名函数。执行后局部变量 i 与全局变量 i 联系就切断了，也就是执行的时候，传进去的变量 i 是多少，立即执行函数的局部变量 i  就是多少，并且该局部变量 i 仍然没有消失，因为匿名函数的存在。</p>
<p>这时候，return中的匿名函数的作用域链中会有两个变量 i。当点击文本的时候，它向上搜索 i 的时候，它找到立即执行函数的局部变量 i ，就停止向上查找了，因此最后的结果就不会是全局变量 i 的值3了。</p>
<p> 有一个方法可以检验你们有没有真的理解上面所说的，看上面的变体，代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;dom.length;i++)&#123;</span><br><span class="line">    dom[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(t);<span class="comment">//1</span></span><br><span class="line">        <span class="built_in">console</span>.log(i);<span class="comment">//3</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实return中的匿名函数中的 t 就是立即执行函数的局部变量 i，而 i 就是 指全局变量 i，因为立即执行函数中没有变量i，只能继续向上搜索，然后就找到全局变量的 i 了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>知识点</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>js的面向对象详解</title>
    <url>/2020/03/29/js%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="对象的创建："><a href="#对象的创建：" class="headerlink" title="对象的创建："></a>对象的创建：</h2><ul>
<li>创建一个面向对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">obj.name = <span class="string">'haha'</span>;</span><br><span class="line">obj.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  alert(obj.name);</span><br><span class="line">&#125;</span><br><span class="line">obj.showName();</span><br></pre></td></tr></table></figure>
缺点：当我们想创建多个面向对象的时候，重复代码过多，需要封装，所以有了工厂方法。</li>
</ul>
<a id="more"></a>

<ul>
<li><p>工厂方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();   <span class="comment">//原料</span></span><br><span class="line">   obj.name = name;         <span class="comment">//加工</span></span><br><span class="line">   obj.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.name);</span><br><span class="line"> &#125; </span><br><span class="line">   <span class="keyword">return</span> obj;<span class="comment">//出厂</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = CreatePerson(<span class="string">'haha'</span>);</span><br><span class="line">p1.showName();</span><br><span class="line"><span class="keyword">var</span> p2 = CreatePerson(<span class="string">'hehe'</span>);</span><br><span class="line">p2.showName();</span><br><span class="line"><span class="comment">//其实就是简单的封装函数，整个过程像工厂的流水线，所以叫工厂方式</span></span><br></pre></td></tr></table></figure>
<p>缺点：无法识别创建的对象的类型。因为全部都是Object，没有区分度，不像Date、Array等，因此出现了构造函数模式。</p>
</li>
<li><p>构造函数模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">this</span>.name = name; </span><br><span class="line">   <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">     alert(<span class="keyword">this</span>.name);</span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> p1 =<span class="keyword">new</span> CreatePerson(<span class="string">'haha'</span>); </span><br><span class="line">p1.showName();</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> CreatePerson(<span class="string">'hehe'</span>); </span><br><span class="line">p2.showName();</span><br></pre></td></tr></table></figure>
<p>我们通过这二个方面来改变：</p>
</li>
<li><p>1 函数名首字母大写<br>这是为了区别于普通的函数，构造函数本身其实就是普通的函数，只是我们专门用它来实现了构造的功能，所以专门起了一个名字叫构造函数，任何函数都可以成为构造函数，这取决于你调用函数的方式，当使用了New的方式调用就成了构造函数。</p>
</li>
<li><p>2 New 关键字调用<br>调用函数的时候用了 New关键字，那么New到底做了什么？用不用New有什么区别？再来看下面的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.name); </span><br><span class="line">   &#125;; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">new</span> CreatePerson(<span class="string">'haha'</span>); <span class="comment">//CreatePerson 指向了当前构造函数</span></span><br><span class="line">CreatePerson(<span class="string">'haha'</span>);  <span class="comment">//window 指向了window</span></span><br></pre></td></tr></table></figure>
<p>我们会发现当用New去调用一个函数的时候，this的指向会不一样。其实New主要做了下面这些事，不过下面写的只是大概的行为，并不是内部源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//声明一个空对象obj </span></span><br><span class="line">   obj._proto_= CreatePerson.prototype;</span><br><span class="line">   <span class="comment">//把这个对象的_proto_属性指向构造函数的原型对象,这样obj就可以调用CreatePerson原型对象下的所有方法 ，这里原型先知道结论，下面会讲。</span></span><br><span class="line">    CreatePerson.apply(obj);   <span class="comment">//用apply方法让this指向obj对象</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;   <span class="comment">//obj对象添加属性，方法</span></span><br><span class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">       alert(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;; </span><br><span class="line">    <span class="keyword">return</span> obj;<span class="comment">//返回这个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>函数构造模式存在的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(p1.showName==p2.showName);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>缺点：可见这两个对象并不是共用一个方法，每new一次，系统都会新创建一个内存，这两个对象各自有各自的地盘，但他们具有相同的功能，还不共用，肯定不是我们所希望的。所以就有了下一种方法，原型+构造模式</p>
<ul>
<li>原型+构造模式<br>原型：每个函数都有一个prototype属性，它是一个对象，也称作原型对象，我们可以把方法和属性写在它上面（不过原型对象不仅仅有我们写的属性和方法，还有别的，下面会介绍），而通过这个函数创建出来的实例对象，都能共享这个原型对象下的方法和属性。所以我们只需要把想要共享的东西放在函数的prototype下，不想共享的东西通过构造函数来创建就可以了。<br>看个栗子（原型+构造）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">CreatePerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">   alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 =<span class="keyword">new</span> CreatePerson(<span class="string">'haha'</span>);</span><br><span class="line">p1.showName();</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> CreatePerson(<span class="string">'hehe'</span>);</span><br><span class="line">p2.showName();</span><br><span class="line">alert(p1.showName==p2.showName);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
测试为true，可见showName()方法是共享的，也就是说他们共用一个内存，更进一步的说它们存在引用关系，也就是说你更改了p1的showName也会影响p2的showName。</li>
</ul>
<p>_proto_属性:<br>同一个函数造出来的实例对象能共享这个函数的prototype下的方法和属性，但是它是如何做到的呢？这里要出场的就是_proto_属性.<br>每个实例化对象都有_proto_属性，它是一个指针，指向函数的prototype，也就是保存了它的地址。（JS中任何对象的值都是保存在堆内存中，我们声明的变量只是一个指针，保存了这个对象的实际地址，所以有了地址就能找到对象），<br>所以总得来说，每个实例化对象都有_proto_属性，保存了构造函数的原型对象的地址，通过这个属性就可以拥有原型对象下的所有属性和方法，_proto_属性实际就是实例化对象和原型对象之间的连接</p>
<p>原型链：<br>每个函数都可以成为构造函数，每个函数都有原型对象，每个原型对象也可以是一个实例化对象，比如，你创建了一个函数fun,它是构造函数function的实例化对象，而function的原型对象，又是Object的实例对象。所以fun有个_proto_属性可以访问到function的原型对象,function原型对象也是个实例对象，也有个_proto_属性,可以访问到Object的原型对象，所以通过_proto_属性，就形成了一条原型链。每个实例化对象都可以访问到链子上方的方法和属性，所以fun是可以访问Object原型对象下的方法和属性的。实际上所有对象都可以访问到Object的原型对象。</p>
<p>原型链的访问规则：先在自身的下面寻找，再去一级一级的往原型链上找。<br>如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Aaa</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Aaa.prototype.num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> Aaa();</span><br><span class="line">a1.num =<span class="number">10</span>;</span><br><span class="line">alert(a1.num); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p>![image_1clisr95k1r2a857e9ii3oqc9.png-15.3kB][1]<br>[1]: <a href="http://static.zybuluo.com/wp0214/l00axuifrvo7bvpqfeiz8pfa/image_1clisr95k1r2a857e9ii3oqc9.png" target="_blank" rel="noopener">http://static.zybuluo.com/wp0214/l00axuifrvo7bvpqfeiz8pfa/image_1clisr95k1r2a857e9ii3oqc9.png</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>知识点</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>小白要掌握的常用Git命令清单</title>
    <url>/2020/03/20/%E5%B0%8F%E7%99%BD%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p>记录一下工作中常用到的git命令，只是简单的笔记</p>
<p>几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示当前的Git配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --list</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑Git配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config -e [--global]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置提交代码时的用户信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">"[name]"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">"[email address]"</span></span></span><br></pre></td></tr></table></figure>

<h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加指定文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add [dir]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2] ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>

<h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交时显示所有diff信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>

<h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>

<h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在当前commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag在指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag [tag] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tag信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交指定tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] [tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交所有tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [remote] --tags</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br></pre></td></tr></table></figure>

<h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">"提交说明"</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>

<h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>

<h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [commit] [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --keep [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SSH连接到GitHub</title>
    <url>/2020/03/08/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5%E5%88%B0GitHub/</url>
    <content><![CDATA[<h2 id="关于-SSH"><a href="#关于-SSH" class="headerlink" title="关于 SSH"></a>关于 SSH</h2><p>使用 SSH 协议可以连接远程服务器和服务并向它们验证。 利用 SSH 密钥可以连接 GitHub，而无需在每次访问时提供用户名或密码。</p>
<h2 id="检查现有-SSH-密钥"><a href="#检查现有-SSH-密钥" class="headerlink" title="检查现有 SSH 密钥"></a>检查现有 SSH 密钥</h2><p>在生成 SSH 密钥之前，您可以检查是否有任何现有的 SSH 密钥。</p>
<ul>
<li>打开 Git Bash。</li>
<li>输入 <code>ls -al ~/.ssh</code> 以查看是否存在现有 SSH 密钥：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -al ~/.ssh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出 .ssh 目录中的文件（如果有）</span></span><br></pre></td></tr></table></figure></li>
<li>检查目录列表以查看是否已经有 SSH 公钥。 默认情况下，公钥的文件名是以下之一：<ul>
<li>id_rsa.pub</li>
<li>id_ecdsa.pub</li>
<li>id_ed25519.pub<a id="more"></a>
<h2 id="生成新-SSH-密钥"><a href="#生成新-SSH-密钥" class="headerlink" title="生成新 SSH 密钥"></a>生成新 SSH 密钥</h2>检查现有 SSH 密钥后，您可以生成新 SSH 密钥以用于身份验证<br>如果您还没有 SSH 密钥，则必须生成新 SSH 密钥。 如果您不确定是否已有 SSH 密钥，请检查现有密钥。</li>
</ul>
</li>
</ul>
<p><strong>生成新 SSH 密钥</strong></p>
<ul>
<li>打开 Git Bash或者其它终端命令行工具。</li>
<li>粘贴下面的文本（替换为您的 GitHub 电子邮件地址）。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C "your_email@example.com"</span><br></pre></td></tr></table></figure>
这将创建以所提供的电子邮件地址为标签的新 SSH 密钥。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Generating public/private rsa key pair.</span></span><br></pre></td></tr></table></figure></li>
<li>提示您“Enter a file in which to save the key（输入要保存密钥的文件）”时，按 Enter 键。 这将接受默认文件位置。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]</span></span><br></pre></td></tr></table></figure></li>
<li>在提示时输入安全密码(  可以默认回车 )</li>
</ul>
<h2 id="新增-SSH-密钥到-GitHub-帐户"><a href="#新增-SSH-密钥到-GitHub-帐户" class="headerlink" title="新增 SSH 密钥到 GitHub 帐户"></a>新增 SSH 密钥到 GitHub 帐户</h2><p>要配置 GitHub 帐户使用新的（或现有）SSH 密钥，您还需要将其添加到 GitHub 帐户。</p>
<ul>
<li>将 SSH 密钥复制到剪贴板。<br>在复制密钥时，请勿添加任何新行或空格。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> clip &lt; ~/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Copies the contents of the id_rsa.pub file to your clipboard</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示：如果 clip 不可用，可找到隐藏的 .ssh 文件夹，在常用的文本编辑器中打开该文件，并将其复制到剪贴板。</p>
</blockquote>
</li>
<li>在github用户设置侧边栏中，单击 SSH and GPG keys（SSH 和 GPG 密钥）。</li>
<li>单击 New SSH key（新 SSH 密钥）或 Add SSH key（添加 SSH 密钥）</li>
<li>在 “Title”（标题）字段中，为新密钥添加描述性标签。 例如，如果您使用的是个人 Mac，此密钥名称可能是 “Personal MacBook Air”。</li>
<li>将密钥粘贴到 “Key”（密钥）字段。</li>
</ul>
<h2 id="测试-SSH-连接"><a href="#测试-SSH-连接" class="headerlink" title="测试 SSH 连接"></a>测试 SSH 连接</h2><ul>
<li>打开 Git Bash或者其它终端命令行工具。</li>
<li>输入以下内容<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对 GitHub 尝试 ssh</span></span><br></pre></td></tr></table></figure>
您可能会看到类似如下的警告：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; The authenticity of host &#39;github.com (IP ADDRESS)&#39; can&#39;t be established.</span><br><span class="line">&gt; RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">&gt; Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure>
或类似如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; The authenticity of host &#39;github.com (IP ADDRESS)&#39; can&#39;t be established.</span><br><span class="line">&gt; RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">&gt; Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure>
验证您看到的消息中的指纹匹配步骤 2 中的消息之一，然后输入 yes：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Hi username! You&#39;ve successfully authenticated, but GitHub does not</span><br><span class="line">&gt; provide shell access.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="权限被拒绝-验证失败"><a href="#权限被拒绝-验证失败" class="headerlink" title="权限被拒绝/验证失败"></a>权限被拒绝/验证失败</h2><p><a href="https://help.github.com/cn/github/authenticating-to-github/error-permission-denied-publickey" target="_blank" rel="noopener">https://help.github.com/cn/github/authenticating-to-github/error-permission-denied-publickey</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>一行代码实现移动端适配方案(rem+vw)</title>
    <url>/2020/03/06/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88-rem-vw/</url>
    <content><![CDATA[<p>rem 这个单位对于前端来说并不陌生了,在移动端适配方面,我们经常会用到它,通常我们会采用类似淘宝flexible.js 的方案, 写px,然后通过插件转化成rem,然后得出一堆小数值的rem单位.淘宝这个方案已经用了很多年,兼容性很好,然而现在,许多兼容性问题现在不再那么头疼了,因此我们现在有了更好的适配方案.</p>
<a id="more"></a>

<p>在很早以前,vw 这个单位就已经被列入w3c规范了,如果基本都支持了,vw 表示屏幕的1%,可能有人会问到那跟百分比有什么区别呢? 通常,很多情况确实可以被百分比替代,但是要知道百分比如果要子n代元素都生效,那得所有父级元素都得相对html,body 100%宽才能有作用,而vw则永远相对 屏幕1%.说了vw的含义来说说怎么结合rem适配吧.<br>这里直接给出结果,只需一行代码即可</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">13.33333333vw</span>&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们即可根据设计稿(前提设计稿是750px的),这样我们写1rem即为设计稿上的100px</p>
<p><strong>设置meta为移动端</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>是不感觉很诧异,写的width:1rem,heigth:1rem的div 就是50px 50px (iphone6为2倍屏,即对应750px设计稿上的100px100px) 怎么搞定的,1句代码就能实现,太神奇.不信可以看看上图或者自己试一下.恩,就是这么简单,1句css代码就搞定,无需任何的js代码.</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>上面我们说了vw表示1%的屏幕宽度,而我们的设计稿通常是750px的,屏幕一共是100vw,对应750px,那么1px就是0.1333333vw </p>
<p>为了方便计算,我们放大100倍,同时我们知道另一个单位rem,rem是相对html元素,为了方便计算,我们取html是100px,通过上面的计算结果1px是0.13333333vw,那么100px就是13.333333vw了 </p>
<p>这样后面的用rem就很好计算了,这样就得到13.3333333vw对应100px(750px的 设计稿),然后我们就可以很愉快的写rem单位了, 由于倍率是100,我们也不需要啥计算插件之类的了,除以100,直接小数点向左移动2位,1rem是100px,那么10px就是0.1rem,1px就是0.01rem</p>
<p>小学生都会算了, 不需要用postcss-px-to-viewport这种工具转成一堆小数位特长的rem单位了,而且这个很方便,直接写rem,并不需要转换,用了转换工具 如果想写px的地方还得设置白名单或者黑名单,这个就不存在这种问题了, 想用相对的就rem,想绝对的就直接写px即可,并不需要其他的各种设置.是不是很简单?</p>
<h2 id="改进版"><a href="#改进版" class="headerlink" title="改进版:"></a>改进版:</h2><p>经过一些实践,发现此方案只能兼容手机,甚至连ipad兼容都不好,当然,此处的兼容不是兼容问题,是效果问题,只要兼容vw的设备都能用这个方案,但是由于适配的根本是vw这个, 这个会随着设备的宽度越来越大,那么用rem做单位的元素也会越来越大,以至于如果这个在pc上,那么没法预览了,效果会很差,字太大了.这样我们可以设置一下当屏幕过大的时候的情况,我们可以加一句代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">560px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">54px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加上这句代码,在pc上效果也很不错了</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>技巧</tag>
        <tag>适配</tag>
        <tag>前端</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>css多行文本溢出显示省略号...</title>
    <url>/2019/10/30/css%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
    <content><![CDATA[<p>大家应该都知道用text-overflow:ellipsis属性来实现单行文本的溢出显示省略号(…)。当然部分浏览器还需要加宽度width属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>但是这个属性并不支持多行文本溢出显示省略号，这里根据应用场景介绍几个方法来实现这样的效果。</p>
<p>WebKit浏览器或移动端的页面</p>
<p>在WebKit浏览器或移动端（绝大部分是WebKit内核的浏览器）的页面实现比较简单，可以直接使用WebKit的CSS扩展属性(WebKit是私有属性)-webkit-line-clamp </p>
<p><code>-webkit-line-clamp</code>用来限制在一个块元素显示的文本的行数。 为了实现该效果，它需要组合其他的WebKit属性</p>
<p>常见结合属性：</p>
<ul>
<li><code>display: -webkit-box</code>; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</li>
<li><code>-webkit-box-orient</code> 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</li>
<li><code>text-overflow: ellipsis</code>;，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span> : <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>小白要看的js事件委托指南</title>
    <url>/2017/03/10/%E5%B0%8F%E7%99%BD%E8%A6%81%E7%9C%8B%E7%9A%84js%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><p>那什么叫事件委托呢？它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。那这是什么意思呢？网上的各位大牛们讲事件委托基本上都用了同一个例子，就是取快递来解释这个现象，我仔细揣摩了一下，这个例子还真是恰当，我就不去想别的例子来解释了，借花献佛，我摘过来，大家认真领会一下事件委托到底是一个什么原理：</p>
<p>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p>
<a id="more"></a>
<p>这里其实还有2层意思的：</p>
<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p>
<p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p>
<h2 id="为什么要用事件委托："><a href="#为什么要用事件委托：" class="headerlink" title="为什么要用事件委托："></a>为什么要用事件委托：</h2><p>一般来说，dom需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的dom需要添加事件处理呢？比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件，那这么做会存在什么影响呢？</p>
<p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p>
<p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了（内存不够用，是硬伤，哈哈），比如上面的100个li，就要占用100个内存空间，如果是1000个，10000个呢，那只能说呵呵了，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p>
<h2 id="事件委托的原理："><a href="#事件委托的原理：" class="headerlink" title="事件委托的原理："></a>事件委托的原理：</h2><p>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p>
<h2 id="事件委托怎么实现："><a href="#事件委托怎么实现：" class="headerlink" title="事件委托怎么实现："></a>事件委托怎么实现：</h2><p>终于到了本文的核心部分了，哈哈，在介绍事件委托的方法之前，我们先来看一段一般方法的例子：<br>子节点实现相同的功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;ul1&quot;&gt;</span><br><span class="line">    &lt;li&gt;111&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;222&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;333&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;444&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<p>实现功能是点击li，弹出123：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">    var aLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">    for(var i&#x3D;0;i&lt;aLi.length;i++)&#123;</span><br><span class="line">        aLi[i].onclick &#x3D; function()&#123;</span><br><span class="line">            alert(123);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 上面的代码的意思很简单，相信很多人都是这么实现的，我们看看有多少次的dom操作，首先要找到ul，然后遍历li，然后点击li的时候，又要找一次目标的li的位置，才能执行最后的操作，每次点击都要找一次li；</p>
<p>那么我们用事件委托的方式做又会怎么样呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">   oUl.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(123);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：</p>
<p>Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    　　var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">    　　oUl.onclick &#x3D; function(ev)&#123;</span><br><span class="line">    	　　　　var ev &#x3D; ev || window.event;</span><br><span class="line">   		　　　　var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">        　　　　if(target.nodeName.toLowerCase() &#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">        　 　　　　　　	alert(123);</span><br><span class="line">　　　　　　　  alert(target.innerHTML);</span><br><span class="line">		　　&#125;</span><br><span class="line">    　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样改下就只有点击li会触发事件了，且每次只执行一次dom操作，如果li数量很多的话，将大大减少dom的操作，优化的性能可想而知！</p>
<p>上面的例子是说li操作的是同样的效果，要是每个li被点击的效果都不一样，那么用事件委托还有用吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;add&quot; value&#x3D;&quot;添加&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;remove&quot; value&#x3D;&quot;删除&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;move&quot; value&#x3D;&quot;移动&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;select&quot; value&#x3D;&quot;选择&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var Add &#x3D; document.getElementById(&quot;add&quot;);</span><br><span class="line">    var Remove &#x3D; document.getElementById(&quot;remove&quot;);</span><br><span class="line">    var Move &#x3D; document.getElementById(&quot;move&quot;);</span><br><span class="line">    var Select &#x3D; document.getElementById(&quot;select&quot;);</span><br><span class="line">    </span><br><span class="line">    Add.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;添加&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Remove.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;删除&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Move.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;移动&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Select.onclick &#x3D; function()&#123;</span><br><span class="line">        alert(&#39;选择&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面实现的效果我就不多说了，很简单，4个按钮，点击每一个做不同的操作，那么至少需要4次dom操作，如果用事件委托，能进行优化吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oBox &#x3D; document.getElementById(&quot;box&quot;);</span><br><span class="line">    oBox.onclick &#x3D; function (ev) &#123;</span><br><span class="line">        var ev &#x3D; ev || window.event;</span><br><span class="line">        var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">        if(target.nodeName.toLocaleLowerCase() &#x3D;&#x3D; &#39;input&#39;)&#123;</span><br><span class="line">            switch(target.id)&#123;</span><br><span class="line">                case &#39;add&#39; :</span><br><span class="line">                    alert(&#39;添加&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;remove&#39; :</span><br><span class="line">                    alert(&#39;删除&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;move&#39; :</span><br><span class="line">                    alert(&#39;移动&#39;);</span><br><span class="line">                    break;</span><br><span class="line">                case &#39;select&#39; :</span><br><span class="line">                    alert(&#39;选择&#39;);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用事件委托就可以只用一次dom操作就能完成所有的效果，比上面的性能肯定是要好一些的 </p>
<p>现在讲的都是document加载完成的现有dom节点下的操作，那么如果是新增的节点，新增的节点会有事件吗？也就是说，一个新员工来了，他能收到快递吗？</p>
<p>看一下正常的添加节点的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;添加&quot; &#x2F;&gt;</span><br><span class="line">&lt;ul id&#x3D;&quot;ul1&quot;&gt;</span><br><span class="line">    &lt;li&gt;111&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;222&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;333&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;444&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<p>现在是移入li，li变红，移出li，li变白，这么一个效果，然后点击按钮，可以向ul中添加一个li子节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oBtn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">    var aLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">    var num &#x3D; 4;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;鼠标移入变红，移出变白</span><br><span class="line">    for(var i&#x3D;0; i&lt;aLi.length;i++)&#123;</span><br><span class="line">        aLi[i].onmouseover &#x3D; function()&#123;</span><br><span class="line">            this.style.background &#x3D; &#39;red&#39;;</span><br><span class="line">        &#125;;</span><br><span class="line">        aLi[i].onmouseout &#x3D; function()&#123;</span><br><span class="line">            this.style.background &#x3D; &#39;#fff&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;添加新节点</span><br><span class="line">    oBtn.onclick &#x3D; function()&#123;</span><br><span class="line">        num++;</span><br><span class="line">        var oLi &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">        oLi.innerHTML &#x3D; 111*num;</span><br><span class="line">        oUl.appendChild(oLi);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一般的做法，但是你会发现，新增的li是没有事件的，说明添加子节点的时候，事件没有一起添加进去，这不是我们想要的结果，那怎么做呢？一般的解决方案会是这样，将for循环用一个函数包起来，命名为mHover，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oBtn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">    var aLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">    var num &#x3D; 4;</span><br><span class="line">    </span><br><span class="line">    function mHover () &#123;</span><br><span class="line">        &#x2F;&#x2F;鼠标移入变红，移出变白</span><br><span class="line">        for(var i&#x3D;0; i&lt;aLi.length;i++)&#123;</span><br><span class="line">            aLi[i].onmouseover &#x3D; function()&#123;</span><br><span class="line">                this.style.background &#x3D; &#39;red&#39;;</span><br><span class="line">            &#125;;</span><br><span class="line">            aLi[i].onmouseout &#x3D; function()&#123;</span><br><span class="line">                this.style.background &#x3D; &#39;#fff&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mHover ();</span><br><span class="line">    &#x2F;&#x2F;添加新节点</span><br><span class="line">    oBtn.onclick &#x3D; function()&#123;</span><br><span class="line">        num++;</span><br><span class="line">        var oLi &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">        oLi.innerHTML &#x3D; 111*num;</span><br><span class="line">        oUl.appendChild(oLi);</span><br><span class="line">        mHover ();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然功能实现了，看着还挺好，但实际上无疑是又增加了一个dom操作，在优化性能方面是不可取的，那么有事件委托的方式，能做到优化吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.onload &#x3D; function()&#123;</span><br><span class="line">    var oBtn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">    var oUl &#x3D; document.getElementById(&quot;ul1&quot;);</span><br><span class="line">    var aLi &#x3D; oUl.getElementsByTagName(&#39;li&#39;);</span><br><span class="line">    var num &#x3D; 4;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;事件委托，添加的子元素也有事件</span><br><span class="line">    oUl.onmouseover &#x3D; function(ev)&#123;</span><br><span class="line">        var ev &#x3D; ev || window.event;</span><br><span class="line">        var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">        if(target.nodeName.toLowerCase() &#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">            target.style.background &#x3D; &quot;red&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    oUl.onmouseout &#x3D; function(ev)&#123;</span><br><span class="line">        var ev &#x3D; ev || window.event;</span><br><span class="line">        var target &#x3D; ev.target || ev.srcElement;</span><br><span class="line">        if(target.nodeName.toLowerCase() &#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">            target.style.background &#x3D; &quot;#fff&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;添加新节点</span><br><span class="line">    oBtn.onclick &#x3D; function()&#123;</span><br><span class="line">        num++;</span><br><span class="line">        var oLi &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">        oLi.innerHTML &#x3D; 111*num;</span><br><span class="line">        oUl.appendChild(oLi);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看，上面是用事件委托的方式，新添加的子元素是带有事件效果的，我们可以发现，当用事件委托的时候，根本就不需要去遍历元素的子节点，只需要给父级元素添加事件就好了，其他的都是在js里面的执行，这样可以大大的减少dom操作，这才是事件委托的精髓所在。</p>
<p>现在给一个场景 ul &gt; li &gt; div &gt; p，div占满li，p占满div，还是给ul绑定时间，需要判断点击的是不是li（假设li里面的结构是不固定的），那么e.target就可能是p，也有可能是div，这种情况你会怎么处理呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;test&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;p&gt;11111111111&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;span&gt;3333333333&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;4444444&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<p>如上列表，有4个li，里面的内容各不相同，点击li，event对象肯定是当前点击的对象，怎么指定到li上，<br>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var oUl &#x3D; document.getElementById(&#39;test&#39;);</span><br><span class="line">oUl.addEventListener(&#39;click&#39;,function(ev)&#123;</span><br><span class="line">    var target &#x3D; ev.target;</span><br><span class="line">    while(target !&#x3D;&#x3D; oUl )&#123;</span><br><span class="line">        if(target.tagName.toLowerCase() &#x3D;&#x3D; &#39;li&#39;)&#123;</span><br><span class="line">            console.log(&#39;li click~&#39;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        target &#x3D; target.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>那什么样的事件可以用事件委托，什么样的事件不可以用呢？</p>
<p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p>
<p>值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。</p>
<p>不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>html转图片小技巧</title>
    <url>/2017/02/14/html%E8%BD%AC%E5%9B%BE%E7%89%87%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> wth = <span class="number">500</span>,</span><br><span class="line">	hgt = <span class="number">360</span>;</span><br><span class="line">canvas.width = wth;</span><br><span class="line">canvas.height = hgt;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">"&lt;svg xmlns='http://www.w3.org/2000/svg' width='200' height='200'&gt;"</span> +</span><br><span class="line">             <span class="string">"&lt;foreignObject width='100%' height='100%'&gt;"</span> +</span><br><span class="line">               <span class="string">"&lt;div xmlns='http://www.w3.org/1999/xhtml' style='font-size:40px'&gt;"</span> +</span><br><span class="line">                  <span class="string">"&lt;em&gt;I&lt;/em&gt; like &lt;span style='color:white; text-shadow:0 0 2px blue;'&gt;cheese&lt;/span&gt;"</span> +</span><br><span class="line">               <span class="string">"&lt;/div&gt;"</span> +</span><br><span class="line">             <span class="string">"&lt;/foreignObject&gt;"</span> +</span><br><span class="line">           <span class="string">"&lt;/svg&gt;"</span>;</span><br><span class="line">ctx.fillStyle = <span class="string">'#ddd'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, wth, hgt);</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="keyword">var</span> svg = <span class="keyword">new</span> Blob([data], &#123;<span class="attr">type</span>: <span class="string">"image/svg+xml;charset=utf-8"</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">window</span>.URL.createObjectURL(svg);</span><br><span class="line">img.crossOrigin = <span class="string">'anonymous'</span>;</span><br><span class="line">img.src = url;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(url);</span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">window</span>.open(canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.75</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>核心代码是while循环部分，实际上就是一个递归调用，你也可以写成一个函数，用递归的方法来调用，同时用到冒泡的原理，从里往外冒泡，知道currentTarget为止，当当前的target是li的时候，就可以执行对应的事件了，然后终止循环</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>知识点</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>FileReader使用指南</title>
    <url>/2016/06/30/FileReader%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>FileReader用来把文件读入内存，并且读取文件中的数据。其接口提供了一个异步API，使用该API可以在浏览器主线程中异步访问文件系统，读取文件中的数据。到目前文职，只有FF3.6+和Chrome6.0+实现了FileReader接口。</p>
<p><strong>接口方法:</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>readAsText</td>
<td>file</td>
<td>将文件读取为文本</td>
</tr>
<tr>
<td>readAsDataURL</td>
<td>file</td>
<td>将文件读取为DataURL</td>
</tr>
<tr>
<td>readAsBinaryString</td>
<td>file</td>
<td>将文件读取为二进制编码</td>
</tr>
<tr>
<td>readAsArrayBuffer</td>
<td>file</td>
<td>将文件读取为ArrayBuffer</td>
</tr>
<tr>
<td>abort</td>
<td>none</td>
<td>终止读取操作</td>
</tr>
</tbody></table>
<a id="more"></a>

<p><strong>接口事件</strong></p>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onabort</td>
<td>中断</td>
</tr>
<tr>
<td>onerror</td>
<td>出错</td>
</tr>
<tr>
<td>onloadstart</td>
<td>开始</td>
</tr>
<tr>
<td>onprogress</td>
<td>正在读取</td>
</tr>
<tr>
<td>onload</td>
<td>成功读取</td>
</tr>
<tr>
<td>onloadend</td>
<td>读取完成，无论成功失败</td>
</tr>
</tbody></table>
<p><strong>完整示例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;FileReader&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; multiple&#x3D;&quot;multiple&quot;&gt;</span><br><span class="line">    &lt;button type&#x3D;&quot;button&quot;&gt;获取&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 具体脚本</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>具体脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="built_in">document</span>.querySelectorAll.bind(<span class="built_in">document</span>),</span><br><span class="line">    log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'button'</span>)[<span class="number">0</span>].addEventListener(<span class="string">'click'</span>, handle);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = $(<span class="string">'input'</span>)[<span class="number">0</span>].files,</span><br><span class="line">        len = files.length,</span><br><span class="line">        file;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果有选中图片</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">            file = files[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="regexp">/image\/[jpeg,gif,jpg,png]/</span>.test(file.type)) &#123; <span class="comment">// 如果是图片</span></span><br><span class="line">                log(file);</span><br><span class="line">                <span class="comment">// readAsText(file);</span></span><br><span class="line">                <span class="comment">// readAsDataURL(file);</span></span><br><span class="line">                <span class="comment">// readAsBinaryString(file);</span></span><br><span class="line">                readAsArrayBuffer(file);</span><br><span class="line">                <span class="comment">// createObjectURL(file);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log(<span class="string">'请选择图片!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件以文本形式读入页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsText</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();  </span><br><span class="line">    fileReader.readAsText(file);</span><br><span class="line">    fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">        p.textContent = e.currentTarget.result;</span><br><span class="line">        $(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件以Data URL形式读入页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsDataURL</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();  </span><br><span class="line">    fileReader.readAsDataURL(file);</span><br><span class="line">    log(fileReader)</span><br><span class="line">    fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        img.src = e.currentTarget.result;</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(img);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件以二进制形式读入页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsBinaryString</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();  </span><br><span class="line">    fileReader.readAsBinaryString(file);</span><br><span class="line">    fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">        p.textContent = e.currentTarget.result;</span><br><span class="line">        $(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(p);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件以Array Buffer形式读入页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAsArrayBuffer</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();  </span><br><span class="line">    fileReader.readAsArrayBuffer(file);</span><br><span class="line">    fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        log(e.currentTarget.result);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象URL</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObjectURL</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(img.src); <span class="comment">// revokeObjectURL() 静态方法用来释放一个之前通过调用 URL.createObjectURL() 创建的已经存在的 URL 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    img.src = <span class="built_in">window</span>.URL.createObjectURL(file);</span><br><span class="line">    $(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(img);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>javascript</tag>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>js 常用事件大全</title>
    <url>/2016/05/29/js-%E5%B8%B8%E7%94%A8%E4%BA%8B%E4%BB%B6%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>js 常用事件大全</p>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">click 当用户点击某个对象时调用的事件句柄。 </span><br><span class="line">contextmenu 在用户点击鼠标右键打开上下文菜单时触发 </span><br><span class="line">dblclick 当用户双击某个对象时调用的事件句柄。 </span><br><span class="line">mousedown 鼠标按钮被按下。 </span><br><span class="line">mouseenter 当鼠标指针移动到元素上时触发。 </span><br><span class="line">mouseleave 当鼠标指针移出元素时触发 </span><br><span class="line">mousemove 鼠标被移动。 </span><br><span class="line">mouseover 鼠标移到某元素之上。 </span><br><span class="line">mouseout 鼠标从某元素移开。 </span><br><span class="line">mouseup 鼠标按键被松开。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">属性 描述 DOM </span><br><span class="line">keydown 某个键盘按键被按下。 </span><br><span class="line">keypress 某个键盘按键被按下并松开。 </span><br><span class="line">keyup 某个键盘按键被松开。</span><br></pre></td></tr></table></figure>

<h2 id="框架-对象（Frame-Object）事件"><a href="#框架-对象（Frame-Object）事件" class="headerlink" title="框架/对象（Frame/Object）事件"></a>框架/对象（Frame/Object）事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abort 图像的加载被中断。 ( ) </span><br><span class="line">beforeunload 该事件在即将离开页面（刷新或关闭）时触发 </span><br><span class="line">error 在加载文档或图像时发生错误。 ( , 和 ) </span><br><span class="line">hashchange 该事件在当前 URL 的锚部分发生修改时触发。 </span><br><span class="line">load 一张页面或一幅图像完成加载。 </span><br><span class="line">pageshow 该事件在用户访问页面时触发 </span><br><span class="line">pagehide 该事件在用户离开当前网页跳转到另外一个页面时触发 </span><br><span class="line">resize 窗口或框架被重新调整大小。 </span><br><span class="line">scroll 当文档被滚动时发生的事件。 </span><br><span class="line">unload 用户退出页面。 ( 和 )</span><br></pre></td></tr></table></figure>
<h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blur 元素失去焦点时触发 </span><br><span class="line">change 该事件在表单元素的内容改变时触发( , , , 和 ) </span><br><span class="line">focus 元素获取焦点时触发 </span><br><span class="line">focusin 元素即将获取焦点是触发 </span><br><span class="line">focusout 元素即将失去焦点是触发 </span><br><span class="line">input 元素获取用户输入是触发 </span><br><span class="line">reset 表单重置时触发 </span><br><span class="line">search 用户向搜索域输入文本时触发</span><br></pre></td></tr></table></figure>
<h2 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy 该事件在用户拷贝元素内容时触发 </span><br><span class="line">cut 该事件在用户剪切元素内容时触发 </span><br><span class="line">paste 该事件在用户粘贴元素内容时触发</span><br></pre></td></tr></table></figure>
<h2 id="打印事件"><a href="#打印事件" class="headerlink" title="打印事件"></a>打印事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">afterprint 该事件在页面已经开始打印，或者打印窗口已经关闭时触发 </span><br><span class="line">beforeprint 该事件在页面即将开始打印时触发</span><br></pre></td></tr></table></figure>
<h2 id="拖动事件"><a href="#拖动事件" class="headerlink" title="拖动事件"></a>拖动事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drag 该事件在元素正在拖动时触发 </span><br><span class="line">dragend 该事件在用户完成元素的拖动时触发 </span><br><span class="line">dragenter 该事件在拖动的元素进入放置目标时触发 </span><br><span class="line">dragleave 该事件在拖动元素离开放置目标时触发 </span><br><span class="line">dragover 该事件在拖动元素在放置目标上时触发 </span><br><span class="line">dragstart 该事件在用户开始拖动元素时触发 </span><br><span class="line">drop 该事件在拖动元素放置在目标区域时触发</span><br></pre></td></tr></table></figure>
<h2 id="多媒体（Media）事件"><a href="#多媒体（Media）事件" class="headerlink" title="多媒体（Media）事件"></a>多媒体（Media）事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abort 事件在视频&#x2F;音频（audio&#x2F;video）终止加载时触发。 </span><br><span class="line">canplay 事件在用户可以开始播放视频&#x2F;音频（audio&#x2F;video）时触发。 </span><br><span class="line">canplaythrough 事件在视频&#x2F;音频（audio&#x2F;video）可以正常播放且无需停顿和缓冲时触发。 </span><br><span class="line">durationchange 事件在视频&#x2F;音频（audio&#x2F;video）的时长发生变化时触发。 </span><br><span class="line">emptied The event occurs when the current playlist is empty </span><br><span class="line">ended 事件在视频&#x2F;音频（audio&#x2F;video）播放结束时触发。 </span><br><span class="line">error 事件在视频&#x2F;音频（audio&#x2F;video）数据加载期间发生错误时触发。 </span><br><span class="line">loadeddata 事件在浏览器加载视频&#x2F;音频（audio&#x2F;video）当前帧时触发触发。 </span><br><span class="line">loadedmetadata 事件在指定视频&#x2F;音频（audio&#x2F;video）的元数据加载后触发。 </span><br><span class="line">loadstart 事件在浏览器开始寻找指定视频&#x2F;音频（audio&#x2F;video）触发。 </span><br><span class="line">pause 事件在视频&#x2F;音频（audio&#x2F;video）暂停时触发。 </span><br><span class="line">play 事件在视频&#x2F;音频（audio&#x2F;video）开始播放时触发。 </span><br><span class="line">playing 事件在视频&#x2F;音频（audio&#x2F;video）暂停或者在缓冲后准备重新开始播放时触发。 </span><br><span class="line">progress 事件在浏览器下载指定的视频&#x2F;音频（audio&#x2F;video）时触发。 </span><br><span class="line">ratechange 事件在视频&#x2F;音频（audio&#x2F;video）的播放速度发送改变时触发。 </span><br><span class="line">seeked 事件在用户重新定位视频&#x2F;音频（audio&#x2F;video）的播放位置后触发。 </span><br><span class="line">seeking 事件在用户开始重新定位视频&#x2F;音频（audio&#x2F;video）时触发。 </span><br><span class="line">stalled 事件在浏览器获取媒体数据，但媒体数据不可用时触发。 </span><br><span class="line">suspend 事件在浏览器读取媒体数据中止时触发。 </span><br><span class="line">timeupdate 事件在当前的播放位置发送改变时触发。 </span><br><span class="line">volumechange 事件在音量发生改变时触发。 </span><br><span class="line">waiting 事件在视频由于要播放下一帧而需要缓冲时触发。</span><br></pre></td></tr></table></figure>

<h2 id="动画事件"><a href="#动画事件" class="headerlink" title="动画事件"></a>动画事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animationend 该事件在 CSS 动画结束播放时触发 </span><br><span class="line">animationiteration 该事件在 CSS 动画重复播放时触发 </span><br><span class="line">animationstart 该事件在 CSS 动画开始播放时触发</span><br></pre></td></tr></table></figure>
<h2 id="过渡事件"><a href="#过渡事件" class="headerlink" title="过渡事件"></a>过渡事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transitionend 该事件在 CSS 完成过渡后触发。</span><br></pre></td></tr></table></figure>

<h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message 该事件通过或者从对象(WebSocket, Web Worker, Event Source 或者子 frame 或父窗口)接收到消息时触发 </span><br><span class="line">online 该事件在浏览器开始在线工作时触发。 </span><br><span class="line">offline 该事件在浏览器开始离线工作时触发。 </span><br><span class="line">popstate 该事件在窗口的浏览历史（history 对象）发生改变时触发。 </span><br><span class="line">show 该事件当元素在上下文菜单显示时触发 </span><br><span class="line">storage 该事件在 Web Storage(HTML 5 Web 存储)更新时触发 </span><br><span class="line">toggle 该事件在用户打开或关闭 元素时触发 </span><br><span class="line">wheel 该事件在鼠标滚轮在元素上下滚动时触发</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML&amp;CSS入门</title>
    <url>/2016/03/29/HTML-CSS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>HTML&amp;CSS基础入门总结</p>
<h2 id="一、使用-css-控制页面样式的方式"><a href="#一、使用-css-控制页面样式的方式" class="headerlink" title="一、使用 css 控制页面样式的方式"></a>一、使用 css 控制页面样式的方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//行内样式</span></span><br><span class="line">&lt;div style=<span class="string">"属性1:值1;属性2:值2;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/嵌入样式</span></span><br><span class="line"><span class="regexp">&lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">选择器&#123;属性1:值1;属性2:值2;&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">//外部样式</span></span><br><span class="line"><span class="string">&lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>url<span class="string">"&gt;</span></span><br><span class="line"><span class="string">//导入样式</span></span><br><span class="line"><span class="string">import url(外部样式表位置)；</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="二、css-选择器"><a href="#二、css-选择器" class="headerlink" title="二、css 选择器"></a>二、css 选择器</h2><blockquote>
<p>当我们定义一条样式规则时候，这条样式规则会作用于网页当中<br>的某些元素，而我们的规定的这些元素的规则就叫做选择器</p>
</blockquote>
<p>•  <strong>id选择器</strong><br>•  <strong>类选择器</strong><br>•  <strong>标签选择器</strong><br>• 交叉选择器<br>• 群组选择器<br>• 后代选择器 (包含选择器 )<br>• 通用选择器</p>
<h2 id="三、css-的继承性和叠加性"><a href="#三、css-的继承性和叠加性" class="headerlink" title="三、css 的继承性和叠加性"></a>三、css 的继承性和叠加性</h2><blockquote>
<p><strong>继承性</strong><br>后代元素会继承前辈元素的一些文字属性和样式</p>
</blockquote>
<blockquote>
<p><strong>叠加性</strong><br>同一个元素，被多个样式规则指定。<br>因为css的继承性和叠加性，就有了css优先级的概念</p>
</blockquote>
<h2 id="四、选择器的优先级"><a href="#四、选择器的优先级" class="headerlink" title="四、选择器的优先级"></a>四、选择器的优先级</h2><blockquote>
<p>所谓的优先级，指的就是哪条样式规则会最终作用于指定的元素</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> 在属性后面使用 !<span class="selector-tag">important</span> 会覆盖页面内任何位置定义的元素样式。</span><br><span class="line"><span class="selector-tag">-</span> 作为<span class="selector-tag">style</span>属性写在元素内的样式</span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">id</span>选择器</span><br><span class="line"><span class="selector-tag">-</span> 类选择器</span><br><span class="line"><span class="selector-tag">-</span> 标签选择器</span><br><span class="line"><span class="selector-tag">-</span> 通配符选择器</span><br><span class="line"><span class="selector-tag">-</span> 浏览器自定义或继承</span><br></pre></td></tr></table></figure>

<h2 id="五、元素类型"><a href="#五、元素类型" class="headerlink" title="五、元素类型"></a>五、元素类型</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&gt;  块元素</span><br><span class="line">&gt;		<span class="selector-tag">div</span>,<span class="selector-tag">h1-h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">header</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">section</span>,<span class="selector-tag">article</span>,<span class="selector-tag">aside</span></span><br><span class="line">&gt;		特征：</span><br><span class="line">&gt;		1、默认独占一行</span><br><span class="line">&gt;		2、没有给宽度的时候，宽度是<span class="selector-tag">auto</span>，撑满一行(宽度就是父级的宽度)</span><br><span class="line">&gt;		3、支持所有的<span class="selector-tag">css</span>命令</span><br><span class="line">&gt;		</span><br><span class="line">&gt;	行内元素</span><br><span class="line">&gt;		<span class="selector-tag">a</span>,<span class="selector-tag">span</span>,<span class="selector-tag">strong</span>,<span class="selector-tag">em</span>,<span class="selector-tag">mark</span>,<span class="selector-tag">img</span>,<span class="selector-tag">time</span></span><br><span class="line">&gt;		特征：</span><br><span class="line">&gt;		1、内容撑开宽高</span><br><span class="line">&gt;			宽高的值都是<span class="selector-tag">auto</span>，只不过显出来的宽高是由内容撑开的</span><br><span class="line">&gt;		2、不支持设置宽高</span><br><span class="line">&gt;		3、不支持上下的<span class="selector-tag">margin</span>与上下<span class="selector-tag">padding</span>(左右支持)</span><br><span class="line">&gt;			上下的<span class="selector-tag">padding</span>是有问题，虽然把背影撑出来了，这个只是表面现象，它不会对其它的元素有影响</span><br><span class="line">&gt;		4、所有的行内元素都会在一行显示</span><br><span class="line">&gt;		5、代码换行会被解析成一个空格</span><br><span class="line">&gt;		</span><br><span class="line">&gt;	行内块元素</span><br><span class="line">&gt;		特征：</span><br><span class="line">&gt;			1、行内元素支持宽高</span><br><span class="line">&gt;			2、块元素可以在一行中显示</span><br><span class="line">&gt;			3、不给宽高的话，宽度会由内容撑开</span><br><span class="line">&gt;			4、代码换行会被解析成一个空格</span><br><span class="line">&gt;			5、<span class="selector-tag">IE6</span>、7不支持块元素的<span class="selector-tag">inline-block</span></span><br></pre></td></tr></table></figure>
<h3 id="块元素和行元素的相互转换"><a href="#块元素和行元素的相互转换" class="headerlink" title="块元素和行元素的相互转换"></a>块元素和行元素的相互转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">块元素转为行元素</span><br><span class="line">display:inline</span><br><span class="line"></span><br><span class="line">行元素转为块元素</span><br><span class="line">display:block</span><br><span class="line"></span><br><span class="line">行元素转为行内块元素</span><br><span class="line">display:inline-block</span><br><span class="line"></span><br><span class="line">为元素设置display: none; 可以让元素隐藏起来并且不</span><br><span class="line">占用页面空间,浏览器会完全忽略掉这个元素，该元素将</span><br><span class="line">不会被显示，也不会占据文档中的位置</span><br></pre></td></tr></table></figure>
<h2 id="六、css-文字属性"><a href="#六、css-文字属性" class="headerlink" title="六、css 文字属性"></a>六、css 文字属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">font</span>			文字</span><br><span class="line"><span class="selector-tag">font-weight</span>		文字着重</span><br><span class="line"><span class="selector-tag">font-style</span>		文字倾斜</span><br><span class="line"><span class="selector-tag">font-size</span>		文字大小（一般都为偶数）</span><br><span class="line"><span class="selector-tag">line-height</span>		文字行高		</span><br><span class="line"><span class="selector-tag">font-family</span>		字体（中文默认是宋体）</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">  </span><br><span class="line">### 文字样式 <span class="selector-tag">font</span></span><br><span class="line">``` <span class="selector-tag">css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">font-weight</span>			文字加粗</span><br><span class="line">	<span class="selector-tag">weight</span>			加粗</span><br><span class="line">	<span class="selector-tag">normal</span>			正常</span><br><span class="line">	</span><br><span class="line"><span class="selector-tag">font-style</span>			文字倾斜</span><br><span class="line">	<span class="selector-tag">italic</span>			倾斜</span><br><span class="line">	<span class="selector-tag">normal</span>			正常</span><br><span class="line">	</span><br><span class="line"><span class="selector-tag">font-size</span>			文字大小</span><br><span class="line">	50<span class="selector-tag">px</span>			数字加单位</span><br><span class="line">	</span><br><span class="line"><span class="selector-tag">font-family</span>			文字字体</span><br><span class="line">	"主要字体","备选字体1","备选字体2"		表示如果用户电脑上有 “主要字体”，就显示"主要字体",如果用户电脑上没有主要字体",那就显示"备选字体1",如果用户电脑没有"备选字体1",就显示"备选字体2";</span><br><span class="line">	英文字体,"中文字体"		英文字符 使用英文字体，中文字符 使用 中文字体;</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">font-weight</span>: bold;</span><br><span class="line">	<span class="attribute">font-style</span>: normal;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">font-family</span>:arial,<span class="string">"华文行楷"</span>,<span class="string">"宋体"</span>,<span class="string">'楷体'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="行高-line-height"><a href="#行高-line-height" class="headerlink" title="行高 line-height"></a>行高 line-height</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">行高代表了一行文字在容器中所占的高度</span><br><span class="line"><span class="selector-tag">line-height</span>		行高	</span><br><span class="line">	'16px'		值是数字加单位</span><br><span class="line">	</span><br><span class="line">如果行高的值与容器的高度相等，那文字就会垂直居中</span><br><span class="line"></span><br><span class="line">测量多行文字行高的方法</span><br><span class="line">	1、首先要知道文字的大小</span><br><span class="line">	2、量下两行文字之间的距离</span><br><span class="line">	3、拿上面量出来的距离除上2</span><br><span class="line">	</span><br><span class="line">	如果行高为奇数的话，文字的上边距会小一像素，下边距会多一像素</span><br><span class="line">	</span><br><span class="line">	12	13/2=7.5		6	7</span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文字复合样式"><a href="#文字复合样式" class="headerlink" title="文字复合样式"></a>文字复合样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">font:font-weight font-style font-size(必需)/line-height font-family(必需);</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">font</span>: bold italic <span class="number">26px</span>/<span class="number">50px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">文本</span><br><span class="line">			</span><br><span class="line"><span class="selector-tag">color</span>				颜色</span><br><span class="line"><span class="selector-tag">text-algin</span>			文本的对齐方式</span><br><span class="line"><span class="selector-tag">text-indent</span>			首行缩进（<span class="selector-tag">em</span>缩进字符）</span><br><span class="line"><span class="selector-tag">text-decoration</span>		文本修饰</span><br><span class="line"><span class="selector-tag">letter-spacing</span>		字母的间距</span><br><span class="line"><span class="selector-tag">word-spacing</span>		单词的间距（以空格来解析）</span><br><span class="line"><span class="selector-tag">white-space</span>			强制不换行</span><br><span class="line"></span><br><span class="line">详细:</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">color</span>				颜色</span><br><span class="line"><span class="selector-tag">text-algin</span>			文本的对齐方式</span><br><span class="line">	<span class="selector-tag">left</span>			左对齐（默认）</span><br><span class="line">	<span class="selector-tag">center</span>			居中对齐</span><br><span class="line">	<span class="selector-tag">right</span>			右对齐</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-indent</span>			首行缩进</span><br><span class="line">	32<span class="selector-tag">px</span>			值是数字加单位</span><br><span class="line">	</span><br><span class="line"><span class="selector-tag">text-decoration</span>		文本修饰</span><br><span class="line">	<span class="selector-tag">underline</span>		下划线</span><br><span class="line">	<span class="selector-tag">overline</span>		上划线</span><br><span class="line">	<span class="selector-tag">line-through</span>	中划线</span><br><span class="line">	<span class="selector-tag">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">letter-spacing</span>		字母间距</span><br><span class="line">	10<span class="selector-tag">px</span>			值为数字加单位</span><br><span class="line">	</span><br><span class="line"><span class="selector-tag">word-sapcing</span>		单词间距</span><br><span class="line">	10<span class="selector-tag">px</span>			值为数字加单位</span><br></pre></td></tr></table></figure>
<h3 id="七、盒模型"><a href="#七、盒模型" class="headerlink" title="七、盒模型"></a>七、盒模型</h3><blockquote>
<p>盒子模型是CSS的基石之一，布局最重要的概念，它<br>指定元素如何呈现在页面当中。网页就是由许多个盒<br>子通过不同的排列方式（纵向排列，横向排列，嵌套<br>排列）堆积而成。</p>
</blockquote>
<blockquote>
<p>页面上的每个元素都被浏览器看成是一个矩形盒子模型是由content（内容）、padding（内边距）、margin（外边距）和border（边框）组成。</p>
</blockquote>
<blockquote>
<p>默认情况下盒子的边框是无，背景色是透明，所以我们在默认情况下看不到盒子</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160823131751824?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="enter image description here"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">内容</span><br><span class="line">盒子里面所包含的元素和内容</span><br><span class="line"></span><br><span class="line">填充(内边距) (<span class="selector-tag">padding</span>)</span><br><span class="line">盒子里面的内容到盒子的边框之间的距离.</span><br><span class="line"><span class="selector-tag">padding-left</span>、 <span class="selector-tag">padding-right</span>、 <span class="selector-tag">padding-top</span>、<span class="selector-tag">padding-bottom</span></span><br><span class="line"></span><br><span class="line">边框(<span class="selector-tag">border</span>)</span><br><span class="line">盒子本身没有边框(<span class="selector-tag">border</span>)</span><br><span class="line"><span class="selector-tag">border-left</span>、 <span class="selector-tag">border-right</span>、 <span class="selector-tag">border-top</span>、 <span class="selector-tag">border-bottom</span></span><br><span class="line"></span><br><span class="line">外边距(<span class="selector-tag">margin</span>)</span><br><span class="line">• 边框外和其它盒子之间</span><br><span class="line"><span class="selector-tag">margin-left</span>、 <span class="selector-tag">margin-right</span>、 <span class="selector-tag">margin-top</span>、</span><br><span class="line"><span class="selector-tag">margin-bottom</span></span><br></pre></td></tr></table></figure>

<ul>
<li>边框（border）的组成：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">边框（<span class="selector-tag">border</span>）的组成</span><br><span class="line">1、边框的粗细</span><br><span class="line">	1<span class="selector-tag">px</span></span><br><span class="line">2、边框的样子</span><br><span class="line">	<span class="selector-tag">solid</span>		实线</span><br><span class="line">	<span class="selector-tag">dashed</span>		虚线</span><br><span class="line">	<span class="selector-tag">dotted</span>		点划线(不同的浏览器显示的是不一样的)</span><br><span class="line">3、边框的颜色</span><br><span class="line">	<span class="selector-tag">red</span>					颜色的英文单词</span><br><span class="line">	<span class="selector-id">#f00</span>				颜色的16进制表示法</span><br><span class="line">	<span class="selector-tag">rgba</span>(255,0,0,0<span class="selector-class">.5</span>)	颜色的<span class="selector-tag">rgb</span>的表示方法</span><br><span class="line">	</span><br><span class="line">举例 :</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">	<span class="selector-tag">div</span>&#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>


<h2 id="八、overflow-属性"><a href="#八、overflow-属性" class="headerlink" title="八、overflow 属性"></a>八、overflow 属性</h2><blockquote>
<p>有时候，子元素的宽高会超出父元素的尺寸，我们需要对超出<br>的内容做一些设置。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">overflow			针对超出父级的内容如何显示</span><br><span class="line">	visible			默认值，超出的内容会显示出来</span><br><span class="line">	auto			如果内容超出了父级，那就出现滚动条。如果内容没有超出，就没有滚动条</span><br><span class="line">	hidden			超出的内容隐藏掉</span><br><span class="line">	scroll			不管内容有没有超出，都会出现滚动条</span><br></pre></td></tr></table></figure>

<h2 id="九、浮动-float"><a href="#九、浮动-float" class="headerlink" title="九、浮动 float"></a>九、浮动 float</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">定义			使元素脱离文档流，按照指定的方向发生移动，遇到父级的边界或者相邻的浮动元素就会停下来</span><br><span class="line">值			<span class="selector-tag">left</span>、<span class="selector-tag">right</span>、<span class="selector-tag">none</span></span><br><span class="line">特征</span><br><span class="line">			1、块元素可以在一行显示</span><br><span class="line">			2、按照一个指定的方向移动，遇到父级的边界或者相邻的浮动元素就会停下来</span><br><span class="line">			3、行内元素支持宽高</span><br><span class="line">			4、脱离文档流</span><br></pre></td></tr></table></figure>
<h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><blockquote>
<p>文档流<br>                文档中可显示的元素在排列时候的开始位置以及他们所占的区域<br>                因为页面中的元素分为不同的种类，所以他们会按各自的特点去显示，在页面中所占的区域不是一样的。会按从上到下，从左到右的顺序输出内容</p>
</blockquote>
<h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">清除浮动的方法</span><br><span class="line">	1、<span class="selector-tag">clear</span></span><br><span class="line">	2、给父级添加高度</span><br><span class="line">		有的时候是不能给父级添加高度的，所以这个方法就用不了（父级没有高度的情况下）</span><br><span class="line">	3、<span class="selector-tag">inline-block</span></span><br><span class="line">		具胡与上一个的清除浮动一样的总是，同时加了以后这个元素就没有办法居中了</span><br><span class="line">	4、<span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line">		如果子级有定位的话，并且这个定位超出了父级的范围，那样的话就看不到了，所以不能加这个命令</span><br><span class="line">	5、空标签</span><br><span class="line">		空标签是没有内容，但是它的作用是用来清除浮动的，所以不符合行为、样式、结构相分离的标准</span><br><span class="line">		<span class="selector-tag">ie6</span>下标签是有一个最小高度19<span class="selector-tag">px</span>，解决后也会有2像素的偏差</span><br><span class="line">	6、<span class="selector-tag">br</span>清除浮动</span><br><span class="line">		与上面的问题是一样</span><br><span class="line">	7、<span class="selector-tag">after</span>伪类清除浮动（现在最主流的方法）</span><br><span class="line"></span><br><span class="line">	示例:</span><br><span class="line">	<span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">		*zoom:1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">		<span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">		<span class="attribute">display</span>: block;</span><br><span class="line">		<span class="attribute">clear</span>: both;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">		<span class="attribute">overflow</span>: hidden;</span><br><span class="line">		<span class="attribute">visibility</span>: hidden;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<br/>

<h2 id="十、定位-position"><a href="#十、定位-position" class="headerlink" title="十、定位 position"></a>十、定位 position</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>				定位</span><br><span class="line">	<span class="selector-tag">relative</span>			相对定位</span><br><span class="line">		移动的方向</span><br><span class="line">			<span class="selector-tag">top</span>、<span class="selector-tag">right</span>、<span class="selector-tag">bottom</span>、<span class="selector-tag">left</span></span><br><span class="line">		特点</span><br><span class="line">			1、只加相对定位，不设置元素移动的位置，元素和之前是没有变化</span><br><span class="line">			2、根据自己原来的位置计算移动的位置</span><br><span class="line">			3、不脱离文档流，元素移走以后，原来的位置还会被保留</span><br><span class="line">			4、加上相对定位后对原来的元素本身的特征没有影响</span><br><span class="line">			5、提升层级</span><br><span class="line">			</span><br><span class="line">	示例:</span><br><span class="line">	<span class="selector-class">.div2</span>&#123;</span><br><span class="line">		<span class="attribute">background</span>: green;</span><br><span class="line">		<span class="attribute">position</span>: relative;</span><br><span class="line">		<span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">		<span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">absolute</span>			绝对定位</span><br><span class="line">	移动的方向</span><br><span class="line">		<span class="selector-tag">top</span>、<span class="selector-tag">right</span>、<span class="selector-tag">bottom</span>、<span class="selector-tag">left</span></span><br><span class="line">	特点</span><br><span class="line">		1、完全脱离文档流</span><br><span class="line">		2、行内元素支持所有样式（与加上浮动或者<span class="selector-tag">inline-block</span>以后的效果是一样的）</span><br><span class="line">		3、如果父级有定位，那位置会根据父级移动。如果父级没有定位，那位置根据可视区移动</span><br><span class="line">			(一般情况下，要用到绝对定位的时候，都会给父级来一个相对定位)</span><br><span class="line">		4、提升层级</span><br><span class="line">			5、提升层级</span><br><span class="line">			</span><br><span class="line">	示例:</span><br><span class="line">	<span class="selector-class">.div2</span>&#123;</span><br><span class="line">		<span class="attribute">background</span>: green;</span><br><span class="line">		<span class="attribute">position</span>: absolute;</span><br><span class="line">		<span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">		<span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十一、背景（background）"><a href="#十一、背景（background）" class="headerlink" title="十一、背景（background）"></a>十一、背景（background）</h2><h3 id="背景（background）的组成："><a href="#背景（background）的组成：" class="headerlink" title="背景（background）的组成："></a>背景（background）的组成：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>				背景</span><br><span class="line"><span class="selector-tag">background-color</span>		背景色</span><br><span class="line"><span class="selector-tag">backgounnd-image</span>		背景图片</span><br><span class="line"><span class="selector-tag">background-repeat</span>		背景图片是否重复</span><br><span class="line"><span class="selector-tag">background-position</span>		背景图片的位置</span><br><span class="line"><span class="selector-tag">background-attachment</span>	背景图片是否滚动</span><br></pre></td></tr></table></figure>
<h3 id="背景色-background-color"><a href="#背景色-background-color" class="headerlink" title="背景色 background-color"></a>背景色 background-color</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>		背景色</span><br><span class="line"></span><br><span class="line">内容可以把容器的宽高撑开</span><br><span class="line">背景不会占用容器的宽高</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">	<span class="attribute">background-color</span>:green;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">107</span>,<span class="number">35</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#008800</span>;		<span class="comment">/*#080*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="背景图片-background-image"><a href="#背景图片-background-image" class="headerlink" title="背景图片 background-image"></a>背景图片 background-image</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">background-image</span>		背景图片</span><br><span class="line">		<span class="selector-tag">url</span>(图片的地址)</span><br><span class="line">		<span class="selector-tag">none</span>			没有背景图（默认）</span><br><span class="line">		</span><br><span class="line">背景图默认会铺满整个容器</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">	<span class="attribute">background-image</span>:<span class="built_in">url</span>(images/img.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="背景图重复-background-repeat"><a href="#背景图重复-background-repeat" class="headerlink" title="背景图重复 background-repeat"></a>背景图重复 background-repeat</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">background-repeat</span>			背景图是否重复平铺</span><br><span class="line">		<span class="selector-tag">no-repeat</span>			不重复平铺</span><br><span class="line">		<span class="selector-tag">repeat-x</span>			横向平铺</span><br><span class="line">		<span class="selector-tag">repeat-y</span>			纵向平铺</span><br><span class="line">		<span class="selector-tag">repeat</span>				全部平铺（默认值）</span><br><span class="line">		</span><br><span class="line">背景图默认会铺满整个容器</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">	<span class="attribute">background-image</span>:<span class="built_in">url</span>(images/img.jpg);</span><br><span class="line">	<span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="背景图片位置-background-position"><a href="#背景图片位置-background-position" class="headerlink" title="背景图片位置 background-position"></a>背景图片位置 background-position</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:x</span> <span class="selector-tag">y</span>;			背景图片的位置</span><br><span class="line">	传数值：（背景图片离左上角的距离）</span><br><span class="line">			<span class="selector-tag">x</span>:</span><br><span class="line">				正值		从容器的左边往右边走的距离</span><br><span class="line">				负值		从容器的左边往左边走的距离</span><br><span class="line">			<span class="selector-tag">y</span>:</span><br><span class="line">				正值		从容器的上边往下边走的距离</span><br><span class="line">				负值		从容器的上边往上边走的距离</span><br><span class="line">	传关键字</span><br><span class="line">			<span class="selector-tag">x</span>:</span><br><span class="line">				<span class="selector-tag">left</span>	图片在容器的左边</span><br><span class="line">				<span class="selector-tag">center</span>	图片在容器<span class="selector-tag">X</span>轴的中心</span><br><span class="line">				<span class="selector-tag">right</span>	图片在容器的右边</span><br><span class="line">			<span class="selector-tag">y</span>:</span><br><span class="line">				<span class="selector-tag">top</span>		图片在容器的上边</span><br><span class="line">				<span class="selector-tag">center</span>	图片在容器<span class="selector-tag">Y</span>轴的中心</span><br><span class="line">				<span class="selector-tag">bottom</span>	图片在容器的下边</span><br><span class="line">				</span><br><span class="line">	</span><br><span class="line">	如果只传一个值的话，那另一个值默认为<span class="selector-tag">center</span></span><br><span class="line">	如果两个值都不写的话，那默认为0，0点，左上角</span><br><span class="line"></span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">	<span class="attribute">background-image</span>:<span class="built_in">url</span>(images/img.jpg);</span><br><span class="line">	<span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">	<span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="背景图复合样式-background-推荐"><a href="#背景图复合样式-background-推荐" class="headerlink" title="背景图复合样式 background ( 推荐 )"></a>背景图复合样式 background ( 推荐 )</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">举例:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">	<span class="comment">/*background-image: url(images/img.jpg);</span></span><br><span class="line"><span class="comment">	background-position: left top;</span></span><br><span class="line"><span class="comment">	background-repeat: no-repeat;</span></span><br><span class="line"><span class="comment">	background-attachment: scroll;*/</span></span><br><span class="line">	<span class="attribute">background</span>: green <span class="built_in">url</span>(images/img.jpg) no-repeat center top scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十二、html-amp-html5标签"><a href="#十二、html-amp-html5标签" class="headerlink" title="十二、html&amp;html5标签"></a>十二、html&amp;html5标签</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;...&lt;&#x2F;h1&gt; 标题字(最大)</span><br><span class="line">&lt;h6&gt;...&lt;&#x2F;h6&gt; 标题字(最小)</span><br><span class="line">&lt;ul&gt; &lt;li&gt;&lt;&#x2F;li&gt; &lt;&#x2F;ul&gt; 无序列表</span><br><span class="line">&lt;ol&gt; &lt;li&gt;&lt;&#x2F;li&gt; &lt;&#x2F;ol&gt; 有序列表</span><br><span class="line">&lt;strong&gt;...&lt;&#x2F;strong&gt; 粗体字</span><br><span class="line">&lt;em&gt;...&lt;&#x2F;em&gt; 		 斜体字</span><br><span class="line">&lt;span&gt;…&lt;&#x2F;span&gt;       无意义的文字标签</span><br><span class="line">&lt;a&gt;…&lt;&#x2F;a&gt; 			 链接标签</span><br><span class="line">&lt;img&gt;				 图片标签</span><br><span class="line"></span><br><span class="line">html5</span><br><span class="line">新的特殊内容元素 article、footer、header、nav、section</span><br><span class="line">新的表单控件，比如 calendar、date、time、email、url、search</span><br></pre></td></tr></table></figure>
<h2 id="十三、transition过渡效果"><a href="#十三、transition过渡效果" class="headerlink" title="十三、transition过渡效果"></a>十三、transition过渡效果</h2><blockquote>
<p>过渡效果：<br>• 过渡效果允许css的属性值在一定的时间区间内平滑地过渡。这种效果可以在鼠标单击、<br>获得焦点或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值<br>transition简写形式:<br>• transition: transition-property transition-duration transition-timing-function<br>transition-delay<br>transition-property:<br>• 指定应用过渡的属性，值为：none(没有属性改变)；all（所有属性改变）这<br>个也是其默认值；indent（元素属性名）。<br>transition-duration:<br>• 指定元素 转换过程的持续时间，单位为s（秒）或者ms(毫秒)<br>transition-delay：<br>• 指定动画开始执行前的延迟时间，单位为s（秒）或者ms(毫秒)</p>
</blockquote>
<h2 id="十四、大波练习…"><a href="#十四、大波练习…" class="headerlink" title="十四、大波练习…"></a>十四、大波练习…</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>css</tag>
      </tags>
  </entry>
</search>
